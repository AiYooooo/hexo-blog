{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-icer/source/style.scss","path":"style.scss","modified":0,"renderable":1},{"_id":"themes/hexo-icer/source/image/logo.jpg","path":"image/logo.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-icer/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"bd586acf3c0fffa65d53a351948d6c8629f2edfb","modified":1530261385629},{"_id":"themes/hexo-icer/README.md","hash":"079a0a2f3be640d5bc176f94471b9b1f3ff9360a","modified":1506546046000},{"_id":"themes/hexo-icer/LICENSE","hash":"60b0b13f2fbc0d6891ae7c310a0394f84eee00a0","modified":1506546046000},{"_id":"themes/hexo-icer/.gitignore","hash":"c996c55a53a02302d5b5db8082b0a2d525cc1007","modified":1506546046000},{"_id":"themes/hexo-icer/.DS_Store","hash":"57eda02e76417e35747cbdbc71a78bf6ecd2d735","modified":1523188210802},{"_id":"themes/hexo-icer/_config.yml","hash":"19f9114b650ddaff6660c098a86fae92de5f226f","modified":1523187781097},{"_id":"source/_posts/Angular页面应用添加扫描二维码功能.md","hash":"a6934ff129e9decf34510543415741b016f56e17","modified":1523453780149},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1523173795947},{"_id":"source/_posts/CSS_grid.md","hash":"918add45f7eb10edaea22e8522f0ce4dbcae42cc","modified":1530264216281},{"_id":"source/_posts/JS跨域笔记.md","hash":"9eb19105765d0c469663cdd27676e210e154152b","modified":1523711800175},{"_id":"source/_posts/Nginx的安装及配置.md","hash":"5f4e612f79bc25424c51280337797d47308aa4e2","modified":1523687444227},{"_id":"source/_posts/Nginx部署静态网页.md","hash":"f5d6acf922fd9c92c8fbdf38e5f274245504b846","modified":1523245671198},{"_id":"source/_posts/Nginx配置SSL证书.md","hash":"2d62d93c02931c04dc793c8d24f149b76c35c7b8","modified":1523245623261},{"_id":"source/_posts/Nginx配置跨域信息.md","hash":"eee28e215ddaa171617e5b57ea1d44426dfae8de","modified":1534386186465},{"_id":"source/_posts/LeetCode_3.md","hash":"8921fb2905f969288d7a4c700adc03fd38e79013","modified":1515932463828},{"_id":"source/_posts/Promise.md","hash":"dad6a3ed3d6e7cddf4c271f08a765393374a17e6","modified":1523670111301},{"_id":"source/_posts/React-native-echarts在安卓下可滑动的问题.md","hash":"b979f65c9953614bfec898bb8ebbbacf154ed614","modified":1523341632794},{"_id":"source/_posts/ReactNative路由回调.md","hash":"a36cbb0dbe9e7ddb3ee4256bccc954b8ca69ac60","modified":1523341721480},{"_id":"source/_posts/Sublime使用SFTP上传文件.md","hash":"10f8cb9e89949122c99aadf328b36103cbffddd2","modified":1523328816375},{"_id":"source/_posts/LeetCode_65.md","hash":"8b42b5713c6b04f48c97c9ae0962e34d29031263","modified":1520583344365},{"_id":"source/_posts/es6-notebook02.md","hash":"377afca19231fae830cc928bdc3780602611122b","modified":1533284823208},{"_id":"source/_posts/LeetCode_214.md","hash":"3b0e3a291ab7daaa18dbe3cc96c162b541b93a50","modified":1515932458360},{"_id":"source/_posts/VPS.md","hash":"4bb40b7013a050c230fa0aba630723c98b21799b","modified":1522658504601},{"_id":"source/_posts/es6-notebook01.md","hash":"b47e8b620892cedf58868c6f093c102c0e0280ec","modified":1532672193376},{"_id":"source/_posts/jQueryPlugins.md","hash":"b2f633772387e988f86ddaa25422fa717a7a8e87","modified":1526975660642},{"_id":"source/_posts/fetch.md","hash":"2c1b8187725af55390dfb1d77f4d8497fd748aaf","modified":1522643509288},{"_id":"source/_posts/koa1.md","hash":"6d04584cff2f7a26362bd228c9f4e5f2c1b1f076","modified":1516176650321},{"_id":"source/_posts/jsfunctions.md","hash":"8b55396190231737b652d309ce04479e1bd158dc","modified":1522736609463},{"_id":"source/_posts/node_mongoose_1.md","hash":"5eaea86ea44c9fd92bf1fd101a96541db0959631","modified":1515932468849},{"_id":"source/_posts/mockapi.js","hash":"aa2c9257618b977ea2d682abd8755d4f8f217609","modified":1521363790141},{"_id":"source/_posts/redux.md","hash":"fb6fd3fd174aa36629c48644160c2f7596203459","modified":1521986419468},{"_id":"source/_posts/netlify.md","hash":"cb07aca1b88eada6eb7e0d8409889bc448d712f4","modified":1521780566312},{"_id":"source/_posts/redux-todos.md","hash":"feb226e7e551ce67b46a1fdc42915101b9ab182f","modified":1521986419468},{"_id":"source/_posts/san1.md","hash":"358cda78ce7d304b1b77642a071cf7417f2e4cfa","modified":1517125779007},{"_id":"source/_posts/san2.md","hash":"b663a316cb3db4a666f0fc2c75ca995503c2a859","modified":1517129827472},{"_id":"source/_posts/san3.md","hash":"5fc7828092dfebf7c243170e51bff85243b32764","modified":1517374791367},{"_id":"source/_posts/san4.md","hash":"e3795435269d15c553a68bc3d6d95f6c0fa7dff3","modified":1517545494407},{"_id":"source/_posts/数组循环添加问题分析.md","hash":"cd80bf720e3b70d06fbe1670ba059fb442c0a71f","modified":1527750165540},{"_id":"source/_posts/san5.md","hash":"ef29a5bcadf4a14c449fa49fa823cdea7d53ef33","modified":1517810087423},{"_id":"source/_posts/webpack.md","hash":"1157fcef4b3c3bd18d854826a9fc9febd752fe71","modified":1521363853617},{"_id":"themes/hexo-icer/layout/archive.ejs","hash":"4cec8b4b4ffd07ce066e637959288a4345c42769","modified":1506546046000},{"_id":"themes/hexo-icer/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1506546046000},{"_id":"themes/hexo-icer/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1506546046000},{"_id":"themes/hexo-icer/layout/layout.ejs","hash":"d3f30a74d4cb5f4f0b8bf67ddfb01bc38233bbe3","modified":1506546046000},{"_id":"themes/hexo-icer/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1506546046000},{"_id":"themes/hexo-icer/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1506546046000},{"_id":"themes/hexo-icer/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1506546046000},{"_id":"themes/hexo-icer/source/.DS_Store","hash":"36d9a947628b285afa09ec2869aa5d6ea335d0af","modified":1523178079529},{"_id":"themes/hexo-icer/source/style.scss","hash":"78e5a6746cf2d5792cc051c3be5f40a69290be4f","modified":1506546046000},{"_id":"themes/hexo-icer/layout/_partial/article.ejs","hash":"136f865170aa641b93698b0273636d5f5b0ddec4","modified":1506546046000},{"_id":"themes/hexo-icer/layout/_partial/archive.ejs","hash":"4eeb8c5cc5453127688a2a5e99dd007baacb75bd","modified":1506546046000},{"_id":"themes/hexo-icer/layout/_partial/footer.ejs","hash":"543b2121e48b9a79758df4fad23e5750f6716dea","modified":1506546046000},{"_id":"themes/hexo-icer/layout/_partial/google-analytics.ejs","hash":"96d27ed863c59aeec7e066daf32ac8db8166d0fe","modified":1506546046000},{"_id":"themes/hexo-icer/layout/_partial/head.ejs","hash":"b7c39c9a6c19c9ba4228970cf0077106110759ee","modified":1523328167671},{"_id":"themes/hexo-icer/layout/_partial/header.ejs","hash":"e98a7025d7d8e04acd7adf2c1f5631a656d35c9e","modified":1533266847382},{"_id":"themes/hexo-icer/layout/_partial/post.ejs","hash":"60b4a7c8c6a3e5950ec46bfd00d2b8268b5b7793","modified":1506546046000},{"_id":"themes/hexo-icer/layout/_partial/scripts.ejs","hash":"4f448582aa9bb252f23c061025a89dc6a8ec3f21","modified":1506546046000},{"_id":"themes/hexo-icer/source/_scss/animation.scss","hash":"048e0a68f6ea72420ab0fad88d62ffa6d63a3540","modified":1506546046000},{"_id":"themes/hexo-icer/source/image/logo.jpg","hash":"d9b6ec7628ecd5b58ce0c93087ace9a3fa4edba5","modified":1523188199997},{"_id":"themes/hexo-icer/source/_scss/archive.scss","hash":"81bb68cd5e102b99db0c8b9172ec729cdc9c6957","modified":1506546046000},{"_id":"themes/hexo-icer/source/image/.DS_Store","hash":"a1d0f0439e63442b9f8e9ce5f41fda724658a372","modified":1523188210803},{"_id":"themes/hexo-icer/source/_scss/article.scss","hash":"3afdd5cc4870f3dd0e5c4490fd2c903e6af07534","modified":1506546046000},{"_id":"themes/hexo-icer/source/_scss/header.scss","hash":"a1170aa5375d95ec816bb3f7f06cd1b3b8561809","modified":1533266804546},{"_id":"themes/hexo-icer/source/_scss/const.scss","hash":"4f9a02833ece8d138cfeb5aaeabc3df549f809b1","modified":1506546046000},{"_id":"themes/hexo-icer/source/_scss/content.scss","hash":"55b4073566a03ef2ad407536e97e79a81a116eeb","modified":1506546046000},{"_id":"themes/hexo-icer/source/_scss/footer.scss","hash":"473d8d5dbf642441a278bfba40602487c24c9a44","modified":1533260763252},{"_id":"themes/hexo-icer/source/_scss/page-nav.scss","hash":"fdb1f061c3f52da43b417a2c8466a19ac9aa8871","modified":1506546046000},{"_id":"themes/hexo-icer/source/_scss/page.scss","hash":"07f6db0372786c1fccedfbd89d3ab489f67effcc","modified":1506546046000},{"_id":"themes/hexo-icer/source/_scss/loading.scss","hash":"7591bb35bcb58bae3a4d8f113987c6bd23d567c0","modified":1506546046000},{"_id":"themes/hexo-icer/source/_scss/social.scss","hash":"d267235890513c67cedf7bee8d5258c078014167","modified":1506546046000},{"_id":"themes/hexo-icer/source/_scss/post.scss","hash":"f1cce189c42a3ba2f8bce25c65b4c642959dbbbb","modified":1506546046000},{"_id":"themes/hexo-icer/source/_scss/search.scss","hash":"0e960bf3309eacaeea3f80bd0d5bc97984fa3768","modified":1506546046000},{"_id":"themes/hexo-icer/source/js/main.js","hash":"b137fa62ff53df50564130ec5ea6f804cb87782f","modified":1506546046000},{"_id":"public/search.xml","hash":"7c2af2ad836588b55b4b3f4eebaffd814ac63fc2","modified":1543475364522},{"_id":"public/2018/03/16/React-native-echarts在安卓下可滑动的问题/index.html","hash":"be1a12b868ad094f8f5f6d492099941cdc5181b8","modified":1534386248763},{"_id":"public/2018/03/05/jsfunctions/index.html","hash":"f87ea81347976c8409da53d6c1c4a1805d32ff60","modified":1534386248766},{"_id":"public/2018/02/10/netlify/index.html","hash":"b3c4006c934bd1d8bf6b048ac7547cb44af280f0","modified":1534386248766},{"_id":"public/2018/02/06/mockapi/index.html","hash":"8e00144f17f56fdae73d3140bac958a1c143872d","modified":1534386248766},{"_id":"public/2018/02/05/Nginx部署静态网页/index.html","hash":"ebaf5794082e50f790c0fcc5c36727abf3d278a1","modified":1534386248766},{"_id":"public/2018/01/25/LeetCode_65/index.html","hash":"c812eea9d1350eee25b2b0c447b6fdf6f689c6ee","modified":1534386248766},{"_id":"public/2018/01/20/VPS/index.html","hash":"58b152ee015402546b6d086a823a671f1ff03ad0","modified":1534386248766},{"_id":"public/archives/index.html","hash":"7af47b935ae6312ae291abad14887b9d9cd836ff","modified":1543475364772},{"_id":"public/archives/page/2/index.html","hash":"e42beb1b097f8e080ca9c5c8c69a4b15d526cbe3","modified":1543475364772},{"_id":"public/archives/page/3/index.html","hash":"3d33055bd1acad19b33d8608db992e725a5e892d","modified":1543475364772},{"_id":"public/archives/page/4/index.html","hash":"1b350e719c86b34b1d3757a877f7be80985e6756","modified":1543475364772},{"_id":"public/archives/2017/index.html","hash":"de2cbb1fc273d1cde7ee3a7925aadc5eecd58247","modified":1534386248767},{"_id":"public/archives/2017/12/index.html","hash":"0a8901e2dccbd3fe29e3d8fcb8b49b217d4604f0","modified":1534386248767},{"_id":"public/archives/2018/05/index.html","hash":"18a1a4c8a1dccc1858fb17bf6fcd5f4dc60f28fd","modified":1534386248767},{"_id":"public/archives/2018/06/index.html","hash":"33dfb1344e8d3a5258f9a6bce7827092e2e8ac04","modified":1534386248767},{"_id":"public/archives/2018/07/index.html","hash":"00a3f0bafa5bbdbd39c267c90d34ab468d68b437","modified":1534386248767},{"_id":"public/archives/2018/08/index.html","hash":"d654aebe22d593e9f872758103c25355aec8e2ca","modified":1534386248767},{"_id":"public/page/4/index.html","hash":"ab6866e760b6cd8bf35f8ef20e6af8a11507514c","modified":1543475364760},{"_id":"public/tags/Angular/index.html","hash":"7ecfe4ced8d1a21d74de520eccf4b3e5d0e0c187","modified":1534386248767},{"_id":"public/tags/CSS/index.html","hash":"1f84396910c94d9e643052e55cbbcb1fb554e6de","modified":1534386248767},{"_id":"public/tags/JavaScript/index.html","hash":"73384e1ff31a067d875bb1902858dbf529c647d4","modified":1534386248767},{"_id":"public/tags/Nginx/index.html","hash":"0ae34ab58baee7aefde829e9c465f1e01da7c3c5","modified":1534386248767},{"_id":"public/tags/LeetCode/index.html","hash":"bf5ae6678727e83069b4214824aa721421e9fc69","modified":1534386248767},{"_id":"public/tags/ES6/index.html","hash":"1591e9734288cfb762f98b058565bf74bcf89590","modified":1534386248767},{"_id":"public/tags/ReactNative/index.html","hash":"c6db2a468274444d005c0111d0c4334fe1d16ecb","modified":1534386248768},{"_id":"public/tags/Sublime/index.html","hash":"29dd578cf565b1d349edaee57d498eea4d094511","modified":1534386248768},{"_id":"public/tags/VPS/index.html","hash":"da4839785db078acd8f0f659d6a5262c155b804a","modified":1534386248768},{"_id":"public/tags/fetch/index.html","hash":"0003782a5335f7dfd9efc75ddc6af6f8320e88f5","modified":1534386248768},{"_id":"public/tags/Node-js/index.html","hash":"6e675a2065a590b460c45af2b7520d8fdb8b58ec","modified":1543475364772},{"_id":"public/tags/Koa/index.html","hash":"a4becb4f0d104041fa60a6ee0d120959cb5b9c50","modified":1534386248768},{"_id":"public/tags/mockAPI/index.html","hash":"370d9046dab5b6bdc1a1ab1445a754df7043acd8","modified":1534386248768},{"_id":"public/tags/MongoDB/index.html","hash":"6f259ff0f18703baa5623ef88a065814265f20e3","modified":1534386248768},{"_id":"public/tags/Redux/index.html","hash":"16d28a1fb4f5df81aa7c2f1fe414ced69c15dd17","modified":1534386248768},{"_id":"public/tags/Netlify/index.html","hash":"ff194e784a9ecddae4a30a44710ebefabeb6e86d","modified":1534386248768},{"_id":"public/tags/San/index.html","hash":"e0a59d78e29f921b9981c7cb492688107b2ffad0","modified":1534386248768},{"_id":"public/tags/webpack/index.html","hash":"bbeb508e0f36419dc01e2f45abf8b860437dee44","modified":1534386248768},{"_id":"public/2018/08/03/es6-notebook02/index.html","hash":"cd01254d561ae6c911260413f998a945c0011a67","modified":1534386248768},{"_id":"public/2018/07/27/es6-notebook01/index.html","hash":"c4404408bdcd6424409312290bc91ddae8f4fb7c","modified":1534386248768},{"_id":"public/2018/06/25/CSS_grid/index.html","hash":"646c664eeba1ad362256ee98cf313392cd2e8956","modified":1534386248768},{"_id":"public/2018/05/31/数组循环添加问题分析/index.html","hash":"7e2a5d6eb9b80669b3d402f547d83ed4cd36188a","modified":1534386248769},{"_id":"public/2018/05/20/jQueryPlugins/index.html","hash":"eb13a64d3a917a32b00a28ffb580eb69701e3528","modified":1534386248769},{"_id":"public/2018/03/28/JS跨域笔记/index.html","hash":"112d9a3545214bc630269fa9b18bda9cc02c7bd5","modified":1534386248769},{"_id":"public/2018/03/25/Promise/index.html","hash":"7e648431b7513ad21f9a0f3b5b1c8b373aaee656","modified":1534386248769},{"_id":"public/2018/03/20/Angular页面应用添加扫描二维码功能/index.html","hash":"ad63d7cf2eac471c58c6c41987eb9631aaa2f311","modified":1534386248769},{"_id":"public/2018/03/13/Sublime使用SFTP上传文件/index.html","hash":"3f69fb7ebc7c305e26737583fa84e57f29032708","modified":1534386248769},{"_id":"public/2018/03/10/Nginx配置SSL证书/index.html","hash":"f23adb8ba9ebd5a9169d63e6fc4c6414a4785e20","modified":1534386248769},{"_id":"public/2018/03/03/fetch/index.html","hash":"2ba8d5a1fbe052ce696d45ef65b1e6b985949f1d","modified":1534386248769},{"_id":"public/2018/02/28/ReactNative路由回调/index.html","hash":"c8b8c0d73de49f00ffc271025d2ee4fb13105379","modified":1534386248769},{"_id":"public/2018/02/21/redux-todos/index.html","hash":"0c7d394949ce25ce93ec70f5757660ec5a2ec6ff","modified":1534386248769},{"_id":"public/2018/02/20/redux/index.html","hash":"971adcaa08541850683398b6cc7d6f786ab3363f","modified":1534386248769},{"_id":"public/2018/02/02/webpack/index.html","hash":"d615a2d6d84853471c9e432c2e44fc5656f56fe5","modified":1534386248769},{"_id":"public/2018/01/28/Nginx的安装及配置/index.html","hash":"6804c2f5906ffc218a3ad1a507f881fa1a45c370","modified":1534386248770},{"_id":"public/2018/01/14/san5/index.html","hash":"79642c5c33414e91f0ca39c7c0933a1e4f11c942","modified":1534386248770},{"_id":"public/2018/01/11/san4/index.html","hash":"3dd3febc090b267ce34d773581724baed32445b4","modified":1534386248770},{"_id":"public/2018/01/09/san3/index.html","hash":"88012f1f5187b0ea8e5bc90c9e38f697d4e29717","modified":1534386248770},{"_id":"public/2018/01/06/san2/index.html","hash":"d4fb841612203f25a4d4cc24f69720a55e7b01d2","modified":1534386248770},{"_id":"public/2018/01/05/san1/index.html","hash":"5e54d4b884b98c9917a0cedb1f034873ea68bfa5","modified":1534386248770},{"_id":"public/2018/01/01/koa1/index.html","hash":"aa567f3a13a0f72b371bdd92f66789bf14b6d452","modified":1534386248770},{"_id":"public/2017/12/26/LeetCode_214/index.html","hash":"319aa9e380457c6fd5ccb170b92e0dfddef75346","modified":1534386248771},{"_id":"public/2017/12/24/node_mongoose_1/index.html","hash":"d77518046112586b250c3e6fe1bda202ad9c0142","modified":1534386248771},{"_id":"public/2017/12/20/LeetCode_3/index.html","hash":"9158123b0570327475cc9b8a2dc55ae0a619424c","modified":1534386248771},{"_id":"public/archives/2018/index.html","hash":"73488b7015ac11abe5155dbd80bacefffc974b9e","modified":1543475364773},{"_id":"public/archives/2018/page/2/index.html","hash":"ffa4ca30ba240bdc328a2133d7689a66ac8629f6","modified":1543475364773},{"_id":"public/archives/2018/page/3/index.html","hash":"7bd08bf1f949237abc43743f27a219e5365535ca","modified":1543475364773},{"_id":"public/archives/2018/01/index.html","hash":"4899f6d51c0bb5407e172f0011a10a4605cdd5c9","modified":1534386248771},{"_id":"public/archives/2018/02/index.html","hash":"face567e18e7143a37e0a51e6d934eb3e11dfe50","modified":1534386248771},{"_id":"public/archives/2018/03/index.html","hash":"6435f80fbb3e1c153e07e7794218a48119060552","modified":1534386248771},{"_id":"public/index.html","hash":"bfdd27e639c454554b8dbed8bf9161ae61ff1fec","modified":1543475364773},{"_id":"public/page/2/index.html","hash":"0a7514d609e847711d3714fed9cb027ba962a0c3","modified":1543475364773},{"_id":"public/page/3/index.html","hash":"fbaa183fe53023f114b05bb2d073301877844d7f","modified":1543475364773},{"_id":"public/2018/08/16/Nginx配置跨域信息/index.html","hash":"d68597c2ac96065e075c24aa029d7ae2a2c8ed61","modified":1534386248775},{"_id":"public/image/logo.jpg","hash":"d9b6ec7628ecd5b58ce0c93087ace9a3fa4edba5","modified":1534386248775},{"_id":"public/style.css","hash":"e57c29b57515d3d95fcf52539b79d49ad8dfd1af","modified":1534386248803},{"_id":"public/js/main.js","hash":"b137fa62ff53df50564130ec5ea6f804cb87782f","modified":1534386248803},{"_id":"source/_posts/qs.stringify({})包含数组导致的问题解决.md","hash":"daeee3feb6e5231811393b34396261d7c6b178df","modified":1543475341580},{"_id":"public/archives/2018/page/4/index.html","hash":"f5821fa1107b00be20e3b3048108feee8a82f4d2","modified":1543475364774},{"_id":"public/archives/2018/11/index.html","hash":"deb5f658c8ea372b6c39b5e5defa1ab9e2c72e5a","modified":1543475364774},{"_id":"public/2018/11/29/qs.stringify({})包含数组导致的问题解决/index.html","hash":"0c68e81d43ca998f4d741c75868f6eb9e41665e8","modified":1543475364774}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Angular页面应用添加扫描二维码功能","date":"2018-03-19T16:00:00.000Z","author":"Ai Shuangying","_content":"\n----------\n\n最近突然接到一个任务就是在Angular应用里需要一个扫描二维码的功能，当然是前往Github看一看有没有合适的轮子啊\n逛了一圈看看demo我决定使用这个[@zxing/ngx-scanner](https://github.com/zxing-js/ngx-scanner)\n看他的文档使用起来比较简单，测试用例效果也不错，事实证明我还是太年轻了 =。=|||\n\n\n报错\n\n```\n  ERROR in Metadata version mismatch for module C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/animations/browser/browser.d.ts, found version 4, expected 3, resolving symbol ɵf in C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/platform-browser/animations/index.d.ts, resolving symbol BrowserAnimationsModule in C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/platform-browser/animations/index.d.ts, resolving symbol BrowserAnimationsModule in C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/platform-browser/animations/index.d.ts\n```\n\n看起来应该是Metadata的包与版本有冲突，但是Google了一下发现很多人都出现了这个问题，而且并不好解决\n\n[Metadata version mismatch with Angular 4](https://stackoverflow.com/questions/47115649/metadata-version-mismatch-with-angular-4)\n[Github](https://github.com/angular/material2/issues/8229)\n[Github](https://github.com/KillerCodeMonkey/ngx-quill/issues/76)\n\n等等，查阅了很多，最后还是整体升级到了Angular5，并更新了所有依赖模块才解决这个问题。\n\n\n但是，引入包之后仅仅在HTML中使用\n\n```\n<zxing-scanner\n    [scannerEnabled]=\"scannerEnabled\"\n    [autofocusEnabled]=\"autofocusEnabled\"\n    [device]=\"selectedDevice\"\n    [cssClass]=\"'small-video'\"\n    (camerasFound)=\"displayCameras($event)\"\n    (scanSuccess)=\"handleQrCodeResult($event)\"\n></zxing-scanner>\n```\n\n并不能生效。\n\n结合示例，ts文件我是这样用的\n\n``` JS\n  import { Router, ActivatedRoute, ParamMap } from '@angular/router';\n  import {Component, ViewChild, ViewEncapsulation, OnInit} from '@angular/core';\n  import { ZXingScannerComponent } from '@zxing/ngx-scanner';\n  import { Result } from '@zxing/library';\n \n  @Component({\n    selector: 'coinscan',\n    styleUrls: [ './coinscan.component.css' ],\n    templateUrl: './coinscan.component.html'\n  })\n  export class CoinScanComponent implements OnInit {\n\n    @ViewChild('scanner') scanner: ZXingScannerComponent;\n\n    constructor() {\n    }\n\n    hasCameras = false;\n    hasPermission: boolean;\n    diviceIndex: number = 0;\n    availableDevices: MediaDeviceInfo[];\n    selectedDevice: MediaDeviceInfo;\n\n    ngOnInit(): void {\n      this.scanner.camerasFound.subscribe((devices: MediaDeviceInfo[]) => {\n        this.hasCameras = true;\n        this.availableDevices = devices;\n        //取到相机设备，并默认开启并选中最后一个(在手机Web端则是后置摄像头)\n        if(devices.length){\n          this.selectedDevice = this.scanner.getDeviceById(devices[devices.length - 1].deviceId);\n        }\n      });\n      //获取相机使用权限\n      this.scanner.permissionResponse.subscribe((answer: boolean) => {\n        // alert(answer);\n        this.hasPermission = answer;\n      });\n    }\n    //取到识别结果\n    handleQrCodeResult(resultString: string) {\n      if(confirm(\"Address：\"+resultString)){\n        this.dataBaseService.qrscan_address = resultString;\n      }\n    }\n    //针对移动浏览器自己添加按钮，来依次切换摄像头设备，比如前后置摄像头切换\n    gotoAround(): void {\n      this.diviceIndex += 1;\n      if(this.diviceIndex == this.availableDevices.length){\n        this.diviceIndex = 0;\n      }\n      this.selectedDevice = this.scanner.getDeviceById(this.availableDevices[this.diviceIndex].deviceId);\n    }\n\n}\n```\n\n从而实现了预期要求。\n\n但是在ApiCloud打包的Native App中却无法得到相机使用权限，待补充。\n\n\n\n","source":"_posts/Angular页面应用添加扫描二维码功能.md","raw":"---\nlayout: post\ntitle: \"Angular页面应用添加扫描二维码功能\"\ndate: 2018-3-20\nauthor: \"Ai Shuangying\"\ntags:\n\t- Angular\n---\n\n----------\n\n最近突然接到一个任务就是在Angular应用里需要一个扫描二维码的功能，当然是前往Github看一看有没有合适的轮子啊\n逛了一圈看看demo我决定使用这个[@zxing/ngx-scanner](https://github.com/zxing-js/ngx-scanner)\n看他的文档使用起来比较简单，测试用例效果也不错，事实证明我还是太年轻了 =。=|||\n\n\n报错\n\n```\n  ERROR in Metadata version mismatch for module C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/animations/browser/browser.d.ts, found version 4, expected 3, resolving symbol ɵf in C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/platform-browser/animations/index.d.ts, resolving symbol BrowserAnimationsModule in C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/platform-browser/animations/index.d.ts, resolving symbol BrowserAnimationsModule in C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/platform-browser/animations/index.d.ts\n```\n\n看起来应该是Metadata的包与版本有冲突，但是Google了一下发现很多人都出现了这个问题，而且并不好解决\n\n[Metadata version mismatch with Angular 4](https://stackoverflow.com/questions/47115649/metadata-version-mismatch-with-angular-4)\n[Github](https://github.com/angular/material2/issues/8229)\n[Github](https://github.com/KillerCodeMonkey/ngx-quill/issues/76)\n\n等等，查阅了很多，最后还是整体升级到了Angular5，并更新了所有依赖模块才解决这个问题。\n\n\n但是，引入包之后仅仅在HTML中使用\n\n```\n<zxing-scanner\n    [scannerEnabled]=\"scannerEnabled\"\n    [autofocusEnabled]=\"autofocusEnabled\"\n    [device]=\"selectedDevice\"\n    [cssClass]=\"'small-video'\"\n    (camerasFound)=\"displayCameras($event)\"\n    (scanSuccess)=\"handleQrCodeResult($event)\"\n></zxing-scanner>\n```\n\n并不能生效。\n\n结合示例，ts文件我是这样用的\n\n``` JS\n  import { Router, ActivatedRoute, ParamMap } from '@angular/router';\n  import {Component, ViewChild, ViewEncapsulation, OnInit} from '@angular/core';\n  import { ZXingScannerComponent } from '@zxing/ngx-scanner';\n  import { Result } from '@zxing/library';\n \n  @Component({\n    selector: 'coinscan',\n    styleUrls: [ './coinscan.component.css' ],\n    templateUrl: './coinscan.component.html'\n  })\n  export class CoinScanComponent implements OnInit {\n\n    @ViewChild('scanner') scanner: ZXingScannerComponent;\n\n    constructor() {\n    }\n\n    hasCameras = false;\n    hasPermission: boolean;\n    diviceIndex: number = 0;\n    availableDevices: MediaDeviceInfo[];\n    selectedDevice: MediaDeviceInfo;\n\n    ngOnInit(): void {\n      this.scanner.camerasFound.subscribe((devices: MediaDeviceInfo[]) => {\n        this.hasCameras = true;\n        this.availableDevices = devices;\n        //取到相机设备，并默认开启并选中最后一个(在手机Web端则是后置摄像头)\n        if(devices.length){\n          this.selectedDevice = this.scanner.getDeviceById(devices[devices.length - 1].deviceId);\n        }\n      });\n      //获取相机使用权限\n      this.scanner.permissionResponse.subscribe((answer: boolean) => {\n        // alert(answer);\n        this.hasPermission = answer;\n      });\n    }\n    //取到识别结果\n    handleQrCodeResult(resultString: string) {\n      if(confirm(\"Address：\"+resultString)){\n        this.dataBaseService.qrscan_address = resultString;\n      }\n    }\n    //针对移动浏览器自己添加按钮，来依次切换摄像头设备，比如前后置摄像头切换\n    gotoAround(): void {\n      this.diviceIndex += 1;\n      if(this.diviceIndex == this.availableDevices.length){\n        this.diviceIndex = 0;\n      }\n      this.selectedDevice = this.scanner.getDeviceById(this.availableDevices[this.diviceIndex].deviceId);\n    }\n\n}\n```\n\n从而实现了预期要求。\n\n但是在ApiCloud打包的Native App中却无法得到相机使用权限，待补充。\n\n\n\n","slug":"Angular页面应用添加扫描二维码功能","published":1,"updated":"2018-04-11T13:36:20.149Z","comments":1,"photos":[],"link":"","_id":"cjkvxydw300005xfaeev45l5h","content":"<hr>\n<p>最近突然接到一个任务就是在Angular应用里需要一个扫描二维码的功能，当然是前往Github看一看有没有合适的轮子啊<br>逛了一圈看看demo我决定使用这个<a href=\"https://github.com/zxing-js/ngx-scanner\" target=\"_blank\" rel=\"noopener\">@zxing/ngx-scanner</a><br>看他的文档使用起来比较简单，测试用例效果也不错，事实证明我还是太年轻了 =。=|||</p>\n<p>报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR in Metadata version mismatch for module C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/animations/browser/browser.d.ts, found version 4, expected 3, resolving symbol ɵf in C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/platform-browser/animations/index.d.ts, resolving symbol BrowserAnimationsModule in C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/platform-browser/animations/index.d.ts, resolving symbol BrowserAnimationsModule in C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/platform-browser/animations/index.d.ts</span><br></pre></td></tr></table></figure>\n<p>看起来应该是Metadata的包与版本有冲突，但是Google了一下发现很多人都出现了这个问题，而且并不好解决</p>\n<p><a href=\"https://stackoverflow.com/questions/47115649/metadata-version-mismatch-with-angular-4\" target=\"_blank\" rel=\"noopener\">Metadata version mismatch with Angular 4</a><br><a href=\"https://github.com/angular/material2/issues/8229\" target=\"_blank\" rel=\"noopener\">Github</a><br><a href=\"https://github.com/KillerCodeMonkey/ngx-quill/issues/76\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>等等，查阅了很多，最后还是整体升级到了Angular5，并更新了所有依赖模块才解决这个问题。</p>\n<p>但是，引入包之后仅仅在HTML中使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;zxing-scanner</span><br><span class=\"line\">    [scannerEnabled]=&quot;scannerEnabled&quot;</span><br><span class=\"line\">    [autofocusEnabled]=&quot;autofocusEnabled&quot;</span><br><span class=\"line\">    [device]=&quot;selectedDevice&quot;</span><br><span class=\"line\">    [cssClass]=&quot;&apos;small-video&apos;&quot;</span><br><span class=\"line\">    (camerasFound)=&quot;displayCameras($event)&quot;</span><br><span class=\"line\">    (scanSuccess)=&quot;handleQrCodeResult($event)&quot;</span><br><span class=\"line\">&gt;&lt;/zxing-scanner&gt;</span><br></pre></td></tr></table></figure>\n<p>并不能生效。</p>\n<p>结合示例，ts文件我是这样用的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">import</span> &#123; Router, ActivatedRoute, ParamMap &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123;Component, ViewChild, ViewEncapsulation, OnInit&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; ZXingScannerComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@zxing/ngx-scanner'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; Result &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@zxing/library'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  @Component(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'coinscan'</span>,</span><br><span class=\"line\">    styleUrls: [ <span class=\"string\">'./coinscan.component.css'</span> ],</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./coinscan.component.html'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoinScanComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ViewChild(<span class=\"string\">'scanner'</span>) scanner: ZXingScannerComponent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    hasCameras = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    hasPermission: boolean;</span><br><span class=\"line\">    diviceIndex: number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    availableDevices: MediaDeviceInfo[];</span><br><span class=\"line\">    selectedDevice: MediaDeviceInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnInit(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.scanner.camerasFound.subscribe(<span class=\"function\">(<span class=\"params\">devices: MediaDeviceInfo[]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hasCameras = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.availableDevices = devices;</span><br><span class=\"line\">        <span class=\"comment\">//取到相机设备，并默认开启并选中最后一个(在手机Web端则是后置摄像头)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(devices.length)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.selectedDevice = <span class=\"keyword\">this</span>.scanner.getDeviceById(devices[devices.length - <span class=\"number\">1</span>].deviceId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//获取相机使用权限</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.scanner.permissionResponse.subscribe(<span class=\"function\">(<span class=\"params\">answer: boolean</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// alert(answer);</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hasPermission = answer;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//取到识别结果</span></span><br><span class=\"line\">    handleQrCodeResult(resultString: string) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(confirm(<span class=\"string\">\"Address：\"</span>+resultString))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataBaseService.qrscan_address = resultString;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//针对移动浏览器自己添加按钮，来依次切换摄像头设备，比如前后置摄像头切换</span></span><br><span class=\"line\">    gotoAround(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.diviceIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.diviceIndex == <span class=\"keyword\">this</span>.availableDevices.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.diviceIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.selectedDevice = <span class=\"keyword\">this</span>.scanner.getDeviceById(<span class=\"keyword\">this</span>.availableDevices[<span class=\"keyword\">this</span>.diviceIndex].deviceId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从而实现了预期要求。</p>\n<p>但是在ApiCloud打包的Native App中却无法得到相机使用权限，待补充。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>最近突然接到一个任务就是在Angular应用里需要一个扫描二维码的功能，当然是前往Github看一看有没有合适的轮子啊<br>逛了一圈看看demo我决定使用这个<a href=\"https://github.com/zxing-js/ngx-scanner\" target=\"_blank\" rel=\"noopener\">@zxing/ngx-scanner</a><br>看他的文档使用起来比较简单，测试用例效果也不错，事实证明我还是太年轻了 =。=|||</p>\n<p>报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR in Metadata version mismatch for module C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/animations/browser/browser.d.ts, found version 4, expected 3, resolving symbol ɵf in C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/platform-browser/animations/index.d.ts, resolving symbol BrowserAnimationsModule in C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/platform-browser/animations/index.d.ts, resolving symbol BrowserAnimationsModule in C:/gitRepo/gmdias/gmdais-frontend/node_modules/@angular/platform-browser/animations/index.d.ts</span><br></pre></td></tr></table></figure>\n<p>看起来应该是Metadata的包与版本有冲突，但是Google了一下发现很多人都出现了这个问题，而且并不好解决</p>\n<p><a href=\"https://stackoverflow.com/questions/47115649/metadata-version-mismatch-with-angular-4\" target=\"_blank\" rel=\"noopener\">Metadata version mismatch with Angular 4</a><br><a href=\"https://github.com/angular/material2/issues/8229\" target=\"_blank\" rel=\"noopener\">Github</a><br><a href=\"https://github.com/KillerCodeMonkey/ngx-quill/issues/76\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>等等，查阅了很多，最后还是整体升级到了Angular5，并更新了所有依赖模块才解决这个问题。</p>\n<p>但是，引入包之后仅仅在HTML中使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;zxing-scanner</span><br><span class=\"line\">    [scannerEnabled]=&quot;scannerEnabled&quot;</span><br><span class=\"line\">    [autofocusEnabled]=&quot;autofocusEnabled&quot;</span><br><span class=\"line\">    [device]=&quot;selectedDevice&quot;</span><br><span class=\"line\">    [cssClass]=&quot;&apos;small-video&apos;&quot;</span><br><span class=\"line\">    (camerasFound)=&quot;displayCameras($event)&quot;</span><br><span class=\"line\">    (scanSuccess)=&quot;handleQrCodeResult($event)&quot;</span><br><span class=\"line\">&gt;&lt;/zxing-scanner&gt;</span><br></pre></td></tr></table></figure>\n<p>并不能生效。</p>\n<p>结合示例，ts文件我是这样用的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">import</span> &#123; Router, ActivatedRoute, ParamMap &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123;Component, ViewChild, ViewEncapsulation, OnInit&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; ZXingScannerComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@zxing/ngx-scanner'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; Result &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@zxing/library'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  @Component(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'coinscan'</span>,</span><br><span class=\"line\">    styleUrls: [ <span class=\"string\">'./coinscan.component.css'</span> ],</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./coinscan.component.html'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoinScanComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ViewChild(<span class=\"string\">'scanner'</span>) scanner: ZXingScannerComponent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    hasCameras = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    hasPermission: boolean;</span><br><span class=\"line\">    diviceIndex: number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    availableDevices: MediaDeviceInfo[];</span><br><span class=\"line\">    selectedDevice: MediaDeviceInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnInit(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.scanner.camerasFound.subscribe(<span class=\"function\">(<span class=\"params\">devices: MediaDeviceInfo[]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hasCameras = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.availableDevices = devices;</span><br><span class=\"line\">        <span class=\"comment\">//取到相机设备，并默认开启并选中最后一个(在手机Web端则是后置摄像头)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(devices.length)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.selectedDevice = <span class=\"keyword\">this</span>.scanner.getDeviceById(devices[devices.length - <span class=\"number\">1</span>].deviceId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//获取相机使用权限</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.scanner.permissionResponse.subscribe(<span class=\"function\">(<span class=\"params\">answer: boolean</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// alert(answer);</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hasPermission = answer;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//取到识别结果</span></span><br><span class=\"line\">    handleQrCodeResult(resultString: string) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(confirm(<span class=\"string\">\"Address：\"</span>+resultString))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataBaseService.qrscan_address = resultString;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//针对移动浏览器自己添加按钮，来依次切换摄像头设备，比如前后置摄像头切换</span></span><br><span class=\"line\">    gotoAround(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.diviceIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.diviceIndex == <span class=\"keyword\">this</span>.availableDevices.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.diviceIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.selectedDevice = <span class=\"keyword\">this</span>.scanner.getDeviceById(<span class=\"keyword\">this</span>.availableDevices[<span class=\"keyword\">this</span>.diviceIndex].deviceId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从而实现了预期要求。</p>\n<p>但是在ApiCloud打包的Native App中却无法得到相机使用权限，待补充。</p>\n"},{"layout":"post","title":"CSS grid(网格)","date":"2018-06-24T16:00:00.000Z","author":"Ai Shuangying","_content":"\n\n很久没有更新了，今天难得清闲，浏览了一些前端博客，发现了CSS grid布局，有点意思，记录下来。\n\n----------\n\n\n#### CSS Grid 的出现，网格变得更加简单\n-------------\n\n```\n//先给定一个HTML结构\n\n<div class=\"grid\">\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n</div>\n\n//来尝试一个最简单的grid布局\n.grid {\n    display: grid;\n    height: 100px;\n    grid-template-columns: 100px 100px 100px 100px;\n    grid-column-gap: 20px;\n}\n.item {\n    background-color: #999;\n}\n```\n\n效果怎么样呢？\n\n![最简单的grid布局](https://download.chatchat.online/aiblogimgs/css_grid_01.png)\n\n可以看到容器里面四个元素都具有了定宽，元素间距也设置好了。\n\n是不是很简单，效果也不错吧（现有的实现方式也可以用flex布局来完成，但不够灵活）\n \n也就是说，想要创建几个网格就给 grid-template-columns 添加多少值，同时支持每个网格不同的宽度设置。\n\n\n#### 让网格具有响应性\n-------------\n\n划重点：这里引入一个单位：fr\n\nfr 是代表一个片段的灵活长度单位。当你使用 fr 单位时，浏览器会分割开放空间并根据 fr 倍数将区域分配给列。这意味着要创建四个相同大小的列，你需要写四次 1fr。\n\n```\n.grid {\n    display: grid;\n    height: 100px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    grid-column-gap: 20px;\n}\n.item {\n    background-color: #999;\n}\n```\n\n效果如下：\n\n![响应网格](https://download.chatchat.online/aiblogimgs/css_grid_02.png)\n\n可以看到四个元素均匀充满了空间，间距依旧是设定好的20px，很不错。\n\n但是这种方式可以保证四个元素始终等宽么？？？\n\nno\n\n使用 fr 单元创建的网格并不总是相等的！\n\n当你使用 fr 时，你需要知道每个 fr 单位是可用（或剩余）空间的一个小片段。\n\n如果你的元素比使用 fr 单位创建的任何列都要宽，则需要以不同的方式进行计算。\n\n举个例子：\n\n我们在第一个元素里添加一个定宽的元素（一个200px的红色方块），再看看效果\n\n![特殊不均分网格](https://download.chatchat.online/aiblogimgs/css_grid_03.png)\n\nsee? 这样我们就明白了fr的工作原理： 按照权重分配剩余宽度\n\n（在这里，父元素宽700，正常情况下fr均分等宽为 (700-60)/4 ，可是不够200怎么办呢？那么第一个item宽度就是200，剩下三个均分 就是 (500-60)/3 ），GET！\n\n\n###### 关于不等宽网格\n-------------\n\n只需更改 fr 倍数，就可以创建宽度不等的网格。\n\n```\n.grid {\n    display: grid;\n    height: 100px;\n    grid-template-columns: 1fr 1.618fr 2.618fr;\n    grid-column-gap: 20px;\n}\n.item {\n    background-color: #999;\n}\n```\n\n![不等宽网格](https://download.chatchat.online/aiblogimgs/css_grid_04.png)\n\n这很好理解。\n\n###### 配合媒体查询\n-------------\n\n为了更灵活得网页设计，可以将grid与媒体查询结合起来\n\n```\n.grid {\n    display: grid;\n    height: 100px;\n    grid-template-columns: 1fr 1.618fr 2.618fr;\n    grid-column-gap: 20px;\n}\n@media (min-width: 30em) {\n    .grid {\n        grid-template-columns: 1fr 1fr 1fr 1fr;\n    }\n}\n```\n\n\n#### 根据高度来划分网格\n-------------\n\n这里就要用到 vh 这个单位，这个常用，不多介绍\n\n看个例子\n\n```\n.grid {\n    display: grid;\n    height: 100%;\n    grid-template-rows: 1fr 1fr 1fr 1fr; \n    grid-auto-columns: calc((100% - 3em) / 4);\n    grid-auto-flow: column;\n    grid-gap: 1em;\n}\n```\n![按高度划分的网格](https://download.chatchat.online/aiblogimgs/css_grid_05.png)\n\n很简单吧。\n\n\n#### 灵活的防止网格\n-------------\n\n那么再来看一个问题：\n\n加入我只有一个item，但是我希望父元素分成四个网格，我的item放在第二个里面，其余留空，如何处理？？\n\n```\n<div class=\"grid\">\n    <div class=\"item\"></div>\n</div>\n\n.grid {\n    display: grid;\n    width: 100%;\n    height: 100px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    grid-column-gap: 20px;\n}\n.item {\n    background-color: #999;\n    grid-column: 2;\n}\n```\n![放置网格](https://download.chatchat.online/aiblogimgs/css_grid_06.png)\n\n甚至还可以 通过 span 关键字来设置覆盖多少列，看个例子\n\n```\n.item {\n    background-color: #999;\n    grid-column: 2 / span 2;\n}\n```\n![放置网格](https://download.chatchat.online/aiblogimgs/css_grid_07.png)\n\n这里注意 网格填充空间也会被一并填充进去。\n\n\n#### 末尾\n-----------------\n\n推荐  [Jen Simmon的实验室](http://labs.jensimmons.com/)\n","source":"_posts/CSS_grid.md","raw":"---\nlayout: post\ntitle: \"CSS grid(网格)\"\ndate: 2018-6-25\nauthor: \"Ai Shuangying\"\ntags:\n\t- CSS\n---\n\n\n很久没有更新了，今天难得清闲，浏览了一些前端博客，发现了CSS grid布局，有点意思，记录下来。\n\n----------\n\n\n#### CSS Grid 的出现，网格变得更加简单\n-------------\n\n```\n//先给定一个HTML结构\n\n<div class=\"grid\">\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n</div>\n\n//来尝试一个最简单的grid布局\n.grid {\n    display: grid;\n    height: 100px;\n    grid-template-columns: 100px 100px 100px 100px;\n    grid-column-gap: 20px;\n}\n.item {\n    background-color: #999;\n}\n```\n\n效果怎么样呢？\n\n![最简单的grid布局](https://download.chatchat.online/aiblogimgs/css_grid_01.png)\n\n可以看到容器里面四个元素都具有了定宽，元素间距也设置好了。\n\n是不是很简单，效果也不错吧（现有的实现方式也可以用flex布局来完成，但不够灵活）\n \n也就是说，想要创建几个网格就给 grid-template-columns 添加多少值，同时支持每个网格不同的宽度设置。\n\n\n#### 让网格具有响应性\n-------------\n\n划重点：这里引入一个单位：fr\n\nfr 是代表一个片段的灵活长度单位。当你使用 fr 单位时，浏览器会分割开放空间并根据 fr 倍数将区域分配给列。这意味着要创建四个相同大小的列，你需要写四次 1fr。\n\n```\n.grid {\n    display: grid;\n    height: 100px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    grid-column-gap: 20px;\n}\n.item {\n    background-color: #999;\n}\n```\n\n效果如下：\n\n![响应网格](https://download.chatchat.online/aiblogimgs/css_grid_02.png)\n\n可以看到四个元素均匀充满了空间，间距依旧是设定好的20px，很不错。\n\n但是这种方式可以保证四个元素始终等宽么？？？\n\nno\n\n使用 fr 单元创建的网格并不总是相等的！\n\n当你使用 fr 时，你需要知道每个 fr 单位是可用（或剩余）空间的一个小片段。\n\n如果你的元素比使用 fr 单位创建的任何列都要宽，则需要以不同的方式进行计算。\n\n举个例子：\n\n我们在第一个元素里添加一个定宽的元素（一个200px的红色方块），再看看效果\n\n![特殊不均分网格](https://download.chatchat.online/aiblogimgs/css_grid_03.png)\n\nsee? 这样我们就明白了fr的工作原理： 按照权重分配剩余宽度\n\n（在这里，父元素宽700，正常情况下fr均分等宽为 (700-60)/4 ，可是不够200怎么办呢？那么第一个item宽度就是200，剩下三个均分 就是 (500-60)/3 ），GET！\n\n\n###### 关于不等宽网格\n-------------\n\n只需更改 fr 倍数，就可以创建宽度不等的网格。\n\n```\n.grid {\n    display: grid;\n    height: 100px;\n    grid-template-columns: 1fr 1.618fr 2.618fr;\n    grid-column-gap: 20px;\n}\n.item {\n    background-color: #999;\n}\n```\n\n![不等宽网格](https://download.chatchat.online/aiblogimgs/css_grid_04.png)\n\n这很好理解。\n\n###### 配合媒体查询\n-------------\n\n为了更灵活得网页设计，可以将grid与媒体查询结合起来\n\n```\n.grid {\n    display: grid;\n    height: 100px;\n    grid-template-columns: 1fr 1.618fr 2.618fr;\n    grid-column-gap: 20px;\n}\n@media (min-width: 30em) {\n    .grid {\n        grid-template-columns: 1fr 1fr 1fr 1fr;\n    }\n}\n```\n\n\n#### 根据高度来划分网格\n-------------\n\n这里就要用到 vh 这个单位，这个常用，不多介绍\n\n看个例子\n\n```\n.grid {\n    display: grid;\n    height: 100%;\n    grid-template-rows: 1fr 1fr 1fr 1fr; \n    grid-auto-columns: calc((100% - 3em) / 4);\n    grid-auto-flow: column;\n    grid-gap: 1em;\n}\n```\n![按高度划分的网格](https://download.chatchat.online/aiblogimgs/css_grid_05.png)\n\n很简单吧。\n\n\n#### 灵活的防止网格\n-------------\n\n那么再来看一个问题：\n\n加入我只有一个item，但是我希望父元素分成四个网格，我的item放在第二个里面，其余留空，如何处理？？\n\n```\n<div class=\"grid\">\n    <div class=\"item\"></div>\n</div>\n\n.grid {\n    display: grid;\n    width: 100%;\n    height: 100px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    grid-column-gap: 20px;\n}\n.item {\n    background-color: #999;\n    grid-column: 2;\n}\n```\n![放置网格](https://download.chatchat.online/aiblogimgs/css_grid_06.png)\n\n甚至还可以 通过 span 关键字来设置覆盖多少列，看个例子\n\n```\n.item {\n    background-color: #999;\n    grid-column: 2 / span 2;\n}\n```\n![放置网格](https://download.chatchat.online/aiblogimgs/css_grid_07.png)\n\n这里注意 网格填充空间也会被一并填充进去。\n\n\n#### 末尾\n-----------------\n\n推荐  [Jen Simmon的实验室](http://labs.jensimmons.com/)\n","slug":"CSS_grid","published":1,"updated":"2018-06-29T09:23:36.281Z","comments":1,"photos":[],"link":"","_id":"cjkvxydw700015xfazzqld0p6","content":"<p>很久没有更新了，今天难得清闲，浏览了一些前端博客，发现了CSS grid布局，有点意思，记录下来。</p>\n<hr>\n<h4 id=\"CSS-Grid-的出现，网格变得更加简单\"><a href=\"#CSS-Grid-的出现，网格变得更加简单\" class=\"headerlink\" title=\"CSS Grid 的出现，网格变得更加简单\"></a>CSS Grid 的出现，网格变得更加简单</h4><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//先给定一个HTML结构</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;grid&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//来尝试一个最简单的grid布局</span><br><span class=\"line\">.grid &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    grid-template-columns: 100px 100px 100px 100px;</span><br><span class=\"line\">    grid-column-gap: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    background-color: #999;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果怎么样呢？</p>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_01.png\" alt=\"最简单的grid布局\"></p>\n<p>可以看到容器里面四个元素都具有了定宽，元素间距也设置好了。</p>\n<p>是不是很简单，效果也不错吧（现有的实现方式也可以用flex布局来完成，但不够灵活）</p>\n<p>也就是说，想要创建几个网格就给 grid-template-columns 添加多少值，同时支持每个网格不同的宽度设置。</p>\n<h4 id=\"让网格具有响应性\"><a href=\"#让网格具有响应性\" class=\"headerlink\" title=\"让网格具有响应性\"></a>让网格具有响应性</h4><hr>\n<p>划重点：这里引入一个单位：fr</p>\n<p>fr 是代表一个片段的灵活长度单位。当你使用 fr 单位时，浏览器会分割开放空间并根据 fr 倍数将区域分配给列。这意味着要创建四个相同大小的列，你需要写四次 1fr。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.grid &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    grid-template-columns: 1fr 1fr 1fr 1fr;</span><br><span class=\"line\">    grid-column-gap: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    background-color: #999;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_02.png\" alt=\"响应网格\"></p>\n<p>可以看到四个元素均匀充满了空间，间距依旧是设定好的20px，很不错。</p>\n<p>但是这种方式可以保证四个元素始终等宽么？？？</p>\n<p>no</p>\n<p>使用 fr 单元创建的网格并不总是相等的！</p>\n<p>当你使用 fr 时，你需要知道每个 fr 单位是可用（或剩余）空间的一个小片段。</p>\n<p>如果你的元素比使用 fr 单位创建的任何列都要宽，则需要以不同的方式进行计算。</p>\n<p>举个例子：</p>\n<p>我们在第一个元素里添加一个定宽的元素（一个200px的红色方块），再看看效果</p>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_03.png\" alt=\"特殊不均分网格\"></p>\n<p>see? 这样我们就明白了fr的工作原理： 按照权重分配剩余宽度</p>\n<p>（在这里，父元素宽700，正常情况下fr均分等宽为 (700-60)/4 ，可是不够200怎么办呢？那么第一个item宽度就是200，剩下三个均分 就是 (500-60)/3 ），GET！</p>\n<h6 id=\"关于不等宽网格\"><a href=\"#关于不等宽网格\" class=\"headerlink\" title=\"关于不等宽网格\"></a>关于不等宽网格</h6><hr>\n<p>只需更改 fr 倍数，就可以创建宽度不等的网格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.grid &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    grid-template-columns: 1fr 1.618fr 2.618fr;</span><br><span class=\"line\">    grid-column-gap: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    background-color: #999;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_04.png\" alt=\"不等宽网格\"></p>\n<p>这很好理解。</p>\n<h6 id=\"配合媒体查询\"><a href=\"#配合媒体查询\" class=\"headerlink\" title=\"配合媒体查询\"></a>配合媒体查询</h6><hr>\n<p>为了更灵活得网页设计，可以将grid与媒体查询结合起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.grid &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    grid-template-columns: 1fr 1.618fr 2.618fr;</span><br><span class=\"line\">    grid-column-gap: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@media (min-width: 30em) &#123;</span><br><span class=\"line\">    .grid &#123;</span><br><span class=\"line\">        grid-template-columns: 1fr 1fr 1fr 1fr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"根据高度来划分网格\"><a href=\"#根据高度来划分网格\" class=\"headerlink\" title=\"根据高度来划分网格\"></a>根据高度来划分网格</h4><hr>\n<p>这里就要用到 vh 这个单位，这个常用，不多介绍</p>\n<p>看个例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.grid &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    grid-template-rows: 1fr 1fr 1fr 1fr; </span><br><span class=\"line\">    grid-auto-columns: calc((100% - 3em) / 4);</span><br><span class=\"line\">    grid-auto-flow: column;</span><br><span class=\"line\">    grid-gap: 1em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_05.png\" alt=\"按高度划分的网格\"></p>\n<p>很简单吧。</p>\n<h4 id=\"灵活的防止网格\"><a href=\"#灵活的防止网格\" class=\"headerlink\" title=\"灵活的防止网格\"></a>灵活的防止网格</h4><hr>\n<p>那么再来看一个问题：</p>\n<p>加入我只有一个item，但是我希望父元素分成四个网格，我的item放在第二个里面，其余留空，如何处理？？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;grid&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.grid &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    grid-template-columns: 1fr 1fr 1fr 1fr;</span><br><span class=\"line\">    grid-column-gap: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    background-color: #999;</span><br><span class=\"line\">    grid-column: 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_06.png\" alt=\"放置网格\"></p>\n<p>甚至还可以 通过 span 关键字来设置覆盖多少列，看个例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.item &#123;</span><br><span class=\"line\">    background-color: #999;</span><br><span class=\"line\">    grid-column: 2 / span 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_07.png\" alt=\"放置网格\"></p>\n<p>这里注意 网格填充空间也会被一并填充进去。</p>\n<h4 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h4><hr>\n<p>推荐  <a href=\"http://labs.jensimmons.com/\" target=\"_blank\" rel=\"noopener\">Jen Simmon的实验室</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>很久没有更新了，今天难得清闲，浏览了一些前端博客，发现了CSS grid布局，有点意思，记录下来。</p>\n<hr>\n<h4 id=\"CSS-Grid-的出现，网格变得更加简单\"><a href=\"#CSS-Grid-的出现，网格变得更加简单\" class=\"headerlink\" title=\"CSS Grid 的出现，网格变得更加简单\"></a>CSS Grid 的出现，网格变得更加简单</h4><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//先给定一个HTML结构</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;grid&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//来尝试一个最简单的grid布局</span><br><span class=\"line\">.grid &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    grid-template-columns: 100px 100px 100px 100px;</span><br><span class=\"line\">    grid-column-gap: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    background-color: #999;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果怎么样呢？</p>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_01.png\" alt=\"最简单的grid布局\"></p>\n<p>可以看到容器里面四个元素都具有了定宽，元素间距也设置好了。</p>\n<p>是不是很简单，效果也不错吧（现有的实现方式也可以用flex布局来完成，但不够灵活）</p>\n<p>也就是说，想要创建几个网格就给 grid-template-columns 添加多少值，同时支持每个网格不同的宽度设置。</p>\n<h4 id=\"让网格具有响应性\"><a href=\"#让网格具有响应性\" class=\"headerlink\" title=\"让网格具有响应性\"></a>让网格具有响应性</h4><hr>\n<p>划重点：这里引入一个单位：fr</p>\n<p>fr 是代表一个片段的灵活长度单位。当你使用 fr 单位时，浏览器会分割开放空间并根据 fr 倍数将区域分配给列。这意味着要创建四个相同大小的列，你需要写四次 1fr。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.grid &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    grid-template-columns: 1fr 1fr 1fr 1fr;</span><br><span class=\"line\">    grid-column-gap: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    background-color: #999;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_02.png\" alt=\"响应网格\"></p>\n<p>可以看到四个元素均匀充满了空间，间距依旧是设定好的20px，很不错。</p>\n<p>但是这种方式可以保证四个元素始终等宽么？？？</p>\n<p>no</p>\n<p>使用 fr 单元创建的网格并不总是相等的！</p>\n<p>当你使用 fr 时，你需要知道每个 fr 单位是可用（或剩余）空间的一个小片段。</p>\n<p>如果你的元素比使用 fr 单位创建的任何列都要宽，则需要以不同的方式进行计算。</p>\n<p>举个例子：</p>\n<p>我们在第一个元素里添加一个定宽的元素（一个200px的红色方块），再看看效果</p>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_03.png\" alt=\"特殊不均分网格\"></p>\n<p>see? 这样我们就明白了fr的工作原理： 按照权重分配剩余宽度</p>\n<p>（在这里，父元素宽700，正常情况下fr均分等宽为 (700-60)/4 ，可是不够200怎么办呢？那么第一个item宽度就是200，剩下三个均分 就是 (500-60)/3 ），GET！</p>\n<h6 id=\"关于不等宽网格\"><a href=\"#关于不等宽网格\" class=\"headerlink\" title=\"关于不等宽网格\"></a>关于不等宽网格</h6><hr>\n<p>只需更改 fr 倍数，就可以创建宽度不等的网格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.grid &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    grid-template-columns: 1fr 1.618fr 2.618fr;</span><br><span class=\"line\">    grid-column-gap: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    background-color: #999;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_04.png\" alt=\"不等宽网格\"></p>\n<p>这很好理解。</p>\n<h6 id=\"配合媒体查询\"><a href=\"#配合媒体查询\" class=\"headerlink\" title=\"配合媒体查询\"></a>配合媒体查询</h6><hr>\n<p>为了更灵活得网页设计，可以将grid与媒体查询结合起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.grid &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    grid-template-columns: 1fr 1.618fr 2.618fr;</span><br><span class=\"line\">    grid-column-gap: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@media (min-width: 30em) &#123;</span><br><span class=\"line\">    .grid &#123;</span><br><span class=\"line\">        grid-template-columns: 1fr 1fr 1fr 1fr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"根据高度来划分网格\"><a href=\"#根据高度来划分网格\" class=\"headerlink\" title=\"根据高度来划分网格\"></a>根据高度来划分网格</h4><hr>\n<p>这里就要用到 vh 这个单位，这个常用，不多介绍</p>\n<p>看个例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.grid &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    grid-template-rows: 1fr 1fr 1fr 1fr; </span><br><span class=\"line\">    grid-auto-columns: calc((100% - 3em) / 4);</span><br><span class=\"line\">    grid-auto-flow: column;</span><br><span class=\"line\">    grid-gap: 1em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_05.png\" alt=\"按高度划分的网格\"></p>\n<p>很简单吧。</p>\n<h4 id=\"灵活的防止网格\"><a href=\"#灵活的防止网格\" class=\"headerlink\" title=\"灵活的防止网格\"></a>灵活的防止网格</h4><hr>\n<p>那么再来看一个问题：</p>\n<p>加入我只有一个item，但是我希望父元素分成四个网格，我的item放在第二个里面，其余留空，如何处理？？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;grid&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.grid &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    grid-template-columns: 1fr 1fr 1fr 1fr;</span><br><span class=\"line\">    grid-column-gap: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    background-color: #999;</span><br><span class=\"line\">    grid-column: 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_06.png\" alt=\"放置网格\"></p>\n<p>甚至还可以 通过 span 关键字来设置覆盖多少列，看个例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.item &#123;</span><br><span class=\"line\">    background-color: #999;</span><br><span class=\"line\">    grid-column: 2 / span 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://download.chatchat.online/aiblogimgs/css_grid_07.png\" alt=\"放置网格\"></p>\n<p>这里注意 网格填充空间也会被一并填充进去。</p>\n<h4 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h4><hr>\n<p>推荐  <a href=\"http://labs.jensimmons.com/\" target=\"_blank\" rel=\"noopener\">Jen Simmon的实验室</a></p>\n"},{"layout":"post","title":"常见的几种跨域方法","date":"2018-03-27T16:00:00.000Z","author":"Ai Shuangying","_content":"\n\n当发送网络请求时，如果同一协议、同一域名、同一端口三个条件有一个不满足，浏览器就会报错。\nNo 'Access-Control-Allow-Origin' header is present on the requested resource\n\n总结一下常见的几种跨域方法。\n\n----------\n\n\n#### JSONP跨域\n-------------\n\n原理：浏览器对于script，iframe等标签的src等属性，是没有同源策略限制的。\n\n看下面的代码：\n\n```\nfunction showJsonp(obj){\n  console.log(obj.message);\n}\nvar url = 'http://127.0.0.1:8787/?func=showJsonp'\nvar script = document.createElement('script');\nscript.setAttribute('src',url);\nscript.setAttribute('type','text/javascript');\ndocument.getElementsByTagName('head')[0].appendChild(script);\n```\n\n创建一个script标签，发起请求时，url后跟了一个名为func的参数，而这个参数就是之后需要用到的回调函数名称。\n\n后台对应的处理代码：\n\n```\napp.get('*', function(req, res) {\n  let callback = req.query.func;\n  let content = callback+\"({'message':'测试数据2'})\";\n  res.send(content);\n});\n```\n\n通过动态插入script标签的方式，利用script标签的src属性发起请求，来达到跨域的目的。\n\njsonp的方式兼容性非常好，即便是那些老古董浏览器，也可以用jsonp的方式解决跨域问题，但是它也有所限制，它只能使用get方式发起请求，并且对于不同域之间页面的js互相调用无能为力。\n\njQuery很早就支持了jsonp的语法糖\n\n```\n$.ajax({\n    url:'http://127.0.0.1:1234/',\n    dataType:\"jsonp\", //告知jQ我们走的JSONP形式\n    jsonpCallback:\"abc\", //callback名\n    success:function(data){\n        console.log(data)\n    }\n});\n```\n\n\n#### CORS\n-------------\n\n原理：要求当前域（常规为存放资源的服务器）在响应报头添加Access-Control-Allow-Origin标签，从而允许指定域的站点访问当前域上的资源。\n\nCORS主要是在服务端来实现跨域功能，客户端的实现跟常规的请求基本一致。\n\n```\nrequire(\"http\").createServer(function(req,res){\n  res.setHeader(\"Access-Control-Allow-Origin\",\"http://127.0.0.1\");\n  res.setHeader(\n    \"Access-Control-Allow-Methods\",\n    \"PUT, GET, POST, DELETE, HEAD, PATCH\"\n  );\n  res.end(req.method+\" \"+req.url);\n}).listen(1234);\n```\n\n不过CORS默认只支持GET/POST这两种http请求类型，如果要开启PUT/DELETE之类的方式，需要在服务端在添加一个\"Access-Control-Allow-Methods\"报头标签。\n\n\n#### Cross-document messaging\n-------------\n\n在 Cross-document messaging 中，我们可以使用 postMessage 方法和 onmessage 事件来实现不同域之间的通信\n\n其中postMessage用于实时向接收信息的页面发送消息 otherWindow.postMessage(message, targetOrigin);\n\n    otherWindow:            对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；\n    window.open的返回值；    通过name或下标从window.frames取到的值。\n    message:                所要发送的数据，string类型。\n    targetOrigin:           允许通信的域的url，*表示不作限制。\n\n可以在父页面中嵌入不同域的子页面（iframe实现，而且常规会把它隐藏掉），在子页面调用 postMessage 方法向父页面发送数据：\n\n```\n<iframe style=\"display:none;\" id=\"ifr\" src=\"http://127.0.0.1:10847/sop/b.html\"></iframe>\n<script type=\"text/javascript\">\n    window.addEventListener('message', function(event){\n        // 通过origin属性判断消息来源地址\n        if (event.origin == 'http://127.0.0.1:10847') {\n            alert(event.data);    // 弹出从子页面post过来的信息\n        }\n    }, false);\n</script>\n```\n\nhttp://127.0.0.1:10847/sop/b.html\n\n```\n<script type=\"text/javascript\">\n    var ifr = window.parent;  //获取父窗体\n    var targetOrigin = 'http://localhost:10847';  // 若写成 http://127.0.0.1:10847 则将无法执行postMessage\n    ifr.postMessage('这是传递给a.html的信息', targetOrigin);\n</script>\n```\n\n\n#### Websocket\n-------------\n\nWebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很棒的实现。\n\n```\nvar ws = new WebSocket('ws://127.0.0.1:8080/url'); \n    //新建一个WebSocket对象，注意服务器端的协议必须为“ws://”或“wss://”\n    //其中ws开头是普通的websocket连接，wss是安全的websocket连接，类似于https。\nws.onopen = function() {\n    // 连接被打开时调用\n};\nws.onerror = function(e) {\n    // 在出现错误时调用，例如在连接断掉时\n};\nws.onclose = function() {\n    // 在连接被关闭时调用\n};\nws.onmessage = function(msg) {\n    // 在服务器端向客户端发送消息时调用\n    // msg.data包含了消息\n};\n// 这里是如何给服务器端发送一些数据\nws.send('some data');\n// 关闭套接口\nws.close();\n```\n\n但是一般情况下使用 socket.io 来向下兼容\n\n\n#### document.domain\n-------------\n\n只适合主域相同但子域不同的情况，比如 a.com 和 www.a.com，我们只需要给这两个页面都加上一句 document.domain = 'a.com'，就可以在其中一个页面嵌套另一个页面，然后进行窗体间的交互。\n\n```\n<iframe src=\"http://www.a.com:8080/sop/b.html\"></iframe>\n<script>\n    document.domain = 'a.com';\n    $(\"iframe\").load(function(){\n        $(this).contents().find(\"div\").text(\"OK\")\n    })\n</script>\n```\n\n在b.html中只要也声明document.domain就可以了\n\n```\n<script>\n    document.domain = 'a.com';\n</script>\n```\n\n可以看到a.html中JS成功修改了b.html中的内容。\n\n\n#### location.hash\n\n#### window.name\n-------------------\n\n这两个东西用的很少，使用起来也很复杂，需要的话再自行查找。\n\n\n#### 服务器代理\n-------------------\n\n原理：页面直接向同域的服务端发请求，服务端进行跨域处理或爬虫后，再把数据返回给客户端页面。\n","source":"_posts/JS跨域笔记.md","raw":"---\nlayout: post\ntitle: \"常见的几种跨域方法\"\ndate: 2018-3-28\nauthor: \"Ai Shuangying\"\ntags:\n\t- JavaScript\n---\n\n\n当发送网络请求时，如果同一协议、同一域名、同一端口三个条件有一个不满足，浏览器就会报错。\nNo 'Access-Control-Allow-Origin' header is present on the requested resource\n\n总结一下常见的几种跨域方法。\n\n----------\n\n\n#### JSONP跨域\n-------------\n\n原理：浏览器对于script，iframe等标签的src等属性，是没有同源策略限制的。\n\n看下面的代码：\n\n```\nfunction showJsonp(obj){\n  console.log(obj.message);\n}\nvar url = 'http://127.0.0.1:8787/?func=showJsonp'\nvar script = document.createElement('script');\nscript.setAttribute('src',url);\nscript.setAttribute('type','text/javascript');\ndocument.getElementsByTagName('head')[0].appendChild(script);\n```\n\n创建一个script标签，发起请求时，url后跟了一个名为func的参数，而这个参数就是之后需要用到的回调函数名称。\n\n后台对应的处理代码：\n\n```\napp.get('*', function(req, res) {\n  let callback = req.query.func;\n  let content = callback+\"({'message':'测试数据2'})\";\n  res.send(content);\n});\n```\n\n通过动态插入script标签的方式，利用script标签的src属性发起请求，来达到跨域的目的。\n\njsonp的方式兼容性非常好，即便是那些老古董浏览器，也可以用jsonp的方式解决跨域问题，但是它也有所限制，它只能使用get方式发起请求，并且对于不同域之间页面的js互相调用无能为力。\n\njQuery很早就支持了jsonp的语法糖\n\n```\n$.ajax({\n    url:'http://127.0.0.1:1234/',\n    dataType:\"jsonp\", //告知jQ我们走的JSONP形式\n    jsonpCallback:\"abc\", //callback名\n    success:function(data){\n        console.log(data)\n    }\n});\n```\n\n\n#### CORS\n-------------\n\n原理：要求当前域（常规为存放资源的服务器）在响应报头添加Access-Control-Allow-Origin标签，从而允许指定域的站点访问当前域上的资源。\n\nCORS主要是在服务端来实现跨域功能，客户端的实现跟常规的请求基本一致。\n\n```\nrequire(\"http\").createServer(function(req,res){\n  res.setHeader(\"Access-Control-Allow-Origin\",\"http://127.0.0.1\");\n  res.setHeader(\n    \"Access-Control-Allow-Methods\",\n    \"PUT, GET, POST, DELETE, HEAD, PATCH\"\n  );\n  res.end(req.method+\" \"+req.url);\n}).listen(1234);\n```\n\n不过CORS默认只支持GET/POST这两种http请求类型，如果要开启PUT/DELETE之类的方式，需要在服务端在添加一个\"Access-Control-Allow-Methods\"报头标签。\n\n\n#### Cross-document messaging\n-------------\n\n在 Cross-document messaging 中，我们可以使用 postMessage 方法和 onmessage 事件来实现不同域之间的通信\n\n其中postMessage用于实时向接收信息的页面发送消息 otherWindow.postMessage(message, targetOrigin);\n\n    otherWindow:            对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；\n    window.open的返回值；    通过name或下标从window.frames取到的值。\n    message:                所要发送的数据，string类型。\n    targetOrigin:           允许通信的域的url，*表示不作限制。\n\n可以在父页面中嵌入不同域的子页面（iframe实现，而且常规会把它隐藏掉），在子页面调用 postMessage 方法向父页面发送数据：\n\n```\n<iframe style=\"display:none;\" id=\"ifr\" src=\"http://127.0.0.1:10847/sop/b.html\"></iframe>\n<script type=\"text/javascript\">\n    window.addEventListener('message', function(event){\n        // 通过origin属性判断消息来源地址\n        if (event.origin == 'http://127.0.0.1:10847') {\n            alert(event.data);    // 弹出从子页面post过来的信息\n        }\n    }, false);\n</script>\n```\n\nhttp://127.0.0.1:10847/sop/b.html\n\n```\n<script type=\"text/javascript\">\n    var ifr = window.parent;  //获取父窗体\n    var targetOrigin = 'http://localhost:10847';  // 若写成 http://127.0.0.1:10847 则将无法执行postMessage\n    ifr.postMessage('这是传递给a.html的信息', targetOrigin);\n</script>\n```\n\n\n#### Websocket\n-------------\n\nWebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很棒的实现。\n\n```\nvar ws = new WebSocket('ws://127.0.0.1:8080/url'); \n    //新建一个WebSocket对象，注意服务器端的协议必须为“ws://”或“wss://”\n    //其中ws开头是普通的websocket连接，wss是安全的websocket连接，类似于https。\nws.onopen = function() {\n    // 连接被打开时调用\n};\nws.onerror = function(e) {\n    // 在出现错误时调用，例如在连接断掉时\n};\nws.onclose = function() {\n    // 在连接被关闭时调用\n};\nws.onmessage = function(msg) {\n    // 在服务器端向客户端发送消息时调用\n    // msg.data包含了消息\n};\n// 这里是如何给服务器端发送一些数据\nws.send('some data');\n// 关闭套接口\nws.close();\n```\n\n但是一般情况下使用 socket.io 来向下兼容\n\n\n#### document.domain\n-------------\n\n只适合主域相同但子域不同的情况，比如 a.com 和 www.a.com，我们只需要给这两个页面都加上一句 document.domain = 'a.com'，就可以在其中一个页面嵌套另一个页面，然后进行窗体间的交互。\n\n```\n<iframe src=\"http://www.a.com:8080/sop/b.html\"></iframe>\n<script>\n    document.domain = 'a.com';\n    $(\"iframe\").load(function(){\n        $(this).contents().find(\"div\").text(\"OK\")\n    })\n</script>\n```\n\n在b.html中只要也声明document.domain就可以了\n\n```\n<script>\n    document.domain = 'a.com';\n</script>\n```\n\n可以看到a.html中JS成功修改了b.html中的内容。\n\n\n#### location.hash\n\n#### window.name\n-------------------\n\n这两个东西用的很少，使用起来也很复杂，需要的话再自行查找。\n\n\n#### 服务器代理\n-------------------\n\n原理：页面直接向同域的服务端发请求，服务端进行跨域处理或爬虫后，再把数据返回给客户端页面。\n","slug":"JS跨域笔记","published":1,"updated":"2018-04-14T13:16:40.175Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwb00035xfahsr2hdpz","content":"<p>当发送网络请求时，如果同一协议、同一域名、同一端口三个条件有一个不满足，浏览器就会报错。<br>No ‘Access-Control-Allow-Origin’ header is present on the requested resource</p>\n<p>总结一下常见的几种跨域方法。</p>\n<hr>\n<h4 id=\"JSONP跨域\"><a href=\"#JSONP跨域\" class=\"headerlink\" title=\"JSONP跨域\"></a>JSONP跨域</h4><hr>\n<p>原理：浏览器对于script，iframe等标签的src等属性，是没有同源策略限制的。</p>\n<p>看下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showJsonp(obj)&#123;</span><br><span class=\"line\">  console.log(obj.message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var url = &apos;http://127.0.0.1:8787/?func=showJsonp&apos;</span><br><span class=\"line\">var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">script.setAttribute(&apos;src&apos;,url);</span><br><span class=\"line\">script.setAttribute(&apos;type&apos;,&apos;text/javascript&apos;);</span><br><span class=\"line\">document.getElementsByTagName(&apos;head&apos;)[0].appendChild(script);</span><br></pre></td></tr></table></figure>\n<p>创建一个script标签，发起请求时，url后跟了一个名为func的参数，而这个参数就是之后需要用到的回调函数名称。</p>\n<p>后台对应的处理代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&apos;*&apos;, function(req, res) &#123;</span><br><span class=\"line\">  let callback = req.query.func;</span><br><span class=\"line\">  let content = callback+&quot;(&#123;&apos;message&apos;:&apos;测试数据2&apos;&#125;)&quot;;</span><br><span class=\"line\">  res.send(content);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>通过动态插入script标签的方式，利用script标签的src属性发起请求，来达到跨域的目的。</p>\n<p>jsonp的方式兼容性非常好，即便是那些老古董浏览器，也可以用jsonp的方式解决跨域问题，但是它也有所限制，它只能使用get方式发起请求，并且对于不同域之间页面的js互相调用无能为力。</p>\n<p>jQuery很早就支持了jsonp的语法糖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:&apos;http://127.0.0.1:1234/&apos;,</span><br><span class=\"line\">    dataType:&quot;jsonp&quot;, //告知jQ我们走的JSONP形式</span><br><span class=\"line\">    jsonpCallback:&quot;abc&quot;, //callback名</span><br><span class=\"line\">    success:function(data)&#123;</span><br><span class=\"line\">        console.log(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h4><hr>\n<p>原理：要求当前域（常规为存放资源的服务器）在响应报头添加Access-Control-Allow-Origin标签，从而允许指定域的站点访问当前域上的资源。</p>\n<p>CORS主要是在服务端来实现跨域功能，客户端的实现跟常规的请求基本一致。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(&quot;http&quot;).createServer(function(req,res)&#123;</span><br><span class=\"line\">  res.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;http://127.0.0.1&quot;);</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    &quot;Access-Control-Allow-Methods&quot;,</span><br><span class=\"line\">    &quot;PUT, GET, POST, DELETE, HEAD, PATCH&quot;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  res.end(req.method+&quot; &quot;+req.url);</span><br><span class=\"line\">&#125;).listen(1234);</span><br></pre></td></tr></table></figure>\n<p>不过CORS默认只支持GET/POST这两种http请求类型，如果要开启PUT/DELETE之类的方式，需要在服务端在添加一个”Access-Control-Allow-Methods”报头标签。</p>\n<h4 id=\"Cross-document-messaging\"><a href=\"#Cross-document-messaging\" class=\"headerlink\" title=\"Cross-document messaging\"></a>Cross-document messaging</h4><hr>\n<p>在 Cross-document messaging 中，我们可以使用 postMessage 方法和 onmessage 事件来实现不同域之间的通信</p>\n<p>其中postMessage用于实时向接收信息的页面发送消息 otherWindow.postMessage(message, targetOrigin);</p>\n<pre><code>otherWindow:            对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；\nwindow.open的返回值；    通过name或下标从window.frames取到的值。\nmessage:                所要发送的数据，string类型。\ntargetOrigin:           允许通信的域的url，*表示不作限制。\n</code></pre><p>可以在父页面中嵌入不同域的子页面（iframe实现，而且常规会把它隐藏掉），在子页面调用 postMessage 方法向父页面发送数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe style=&quot;display:none;&quot; id=&quot;ifr&quot; src=&quot;http://127.0.0.1:10847/sop/b.html&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    window.addEventListener(&apos;message&apos;, function(event)&#123;</span><br><span class=\"line\">        // 通过origin属性判断消息来源地址</span><br><span class=\"line\">        if (event.origin == &apos;http://127.0.0.1:10847&apos;) &#123;</span><br><span class=\"line\">            alert(event.data);    // 弹出从子页面post过来的信息</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://127.0.0.1:10847/sop/b.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:10847/sop/b.html</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var ifr = window.parent;  //获取父窗体</span><br><span class=\"line\">    var targetOrigin = &apos;http://localhost:10847&apos;;  // 若写成 http://127.0.0.1:10847 则将无法执行postMessage</span><br><span class=\"line\">    ifr.postMessage(&apos;这是传递给a.html的信息&apos;, targetOrigin);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h4><hr>\n<p>WebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很棒的实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var ws = new WebSocket(&apos;ws://127.0.0.1:8080/url&apos;); </span><br><span class=\"line\">    //新建一个WebSocket对象，注意服务器端的协议必须为“ws://”或“wss://”</span><br><span class=\"line\">    //其中ws开头是普通的websocket连接，wss是安全的websocket连接，类似于https。</span><br><span class=\"line\">ws.onopen = function() &#123;</span><br><span class=\"line\">    // 连接被打开时调用</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ws.onerror = function(e) &#123;</span><br><span class=\"line\">    // 在出现错误时调用，例如在连接断掉时</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ws.onclose = function() &#123;</span><br><span class=\"line\">    // 在连接被关闭时调用</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ws.onmessage = function(msg) &#123;</span><br><span class=\"line\">    // 在服务器端向客户端发送消息时调用</span><br><span class=\"line\">    // msg.data包含了消息</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 这里是如何给服务器端发送一些数据</span><br><span class=\"line\">ws.send(&apos;some data&apos;);</span><br><span class=\"line\">// 关闭套接口</span><br><span class=\"line\">ws.close();</span><br></pre></td></tr></table></figure>\n<p>但是一般情况下使用 socket.io 来向下兼容</p>\n<h4 id=\"document-domain\"><a href=\"#document-domain\" class=\"headerlink\" title=\"document.domain\"></a>document.domain</h4><hr>\n<p>只适合主域相同但子域不同的情况，比如 a.com 和 <a href=\"http://www.a.com，我们只需要给这两个页面都加上一句\" target=\"_blank\" rel=\"noopener\">www.a.com，我们只需要给这两个页面都加上一句</a> document.domain = ‘a.com’，就可以在其中一个页面嵌套另一个页面，然后进行窗体间的交互。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe src=&quot;http://www.a.com:8080/sop/b.html&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    document.domain = &apos;a.com&apos;;</span><br><span class=\"line\">    $(&quot;iframe&quot;).load(function()&#123;</span><br><span class=\"line\">        $(this).contents().find(&quot;div&quot;).text(&quot;OK&quot;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>在b.html中只要也声明document.domain就可以了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    document.domain = &apos;a.com&apos;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看到a.html中JS成功修改了b.html中的内容。</p>\n<h4 id=\"location-hash\"><a href=\"#location-hash\" class=\"headerlink\" title=\"location.hash\"></a>location.hash</h4><h4 id=\"window-name\"><a href=\"#window-name\" class=\"headerlink\" title=\"window.name\"></a>window.name</h4><hr>\n<p>这两个东西用的很少，使用起来也很复杂，需要的话再自行查找。</p>\n<h4 id=\"服务器代理\"><a href=\"#服务器代理\" class=\"headerlink\" title=\"服务器代理\"></a>服务器代理</h4><hr>\n<p>原理：页面直接向同域的服务端发请求，服务端进行跨域处理或爬虫后，再把数据返回给客户端页面。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当发送网络请求时，如果同一协议、同一域名、同一端口三个条件有一个不满足，浏览器就会报错。<br>No ‘Access-Control-Allow-Origin’ header is present on the requested resource</p>\n<p>总结一下常见的几种跨域方法。</p>\n<hr>\n<h4 id=\"JSONP跨域\"><a href=\"#JSONP跨域\" class=\"headerlink\" title=\"JSONP跨域\"></a>JSONP跨域</h4><hr>\n<p>原理：浏览器对于script，iframe等标签的src等属性，是没有同源策略限制的。</p>\n<p>看下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showJsonp(obj)&#123;</span><br><span class=\"line\">  console.log(obj.message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var url = &apos;http://127.0.0.1:8787/?func=showJsonp&apos;</span><br><span class=\"line\">var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">script.setAttribute(&apos;src&apos;,url);</span><br><span class=\"line\">script.setAttribute(&apos;type&apos;,&apos;text/javascript&apos;);</span><br><span class=\"line\">document.getElementsByTagName(&apos;head&apos;)[0].appendChild(script);</span><br></pre></td></tr></table></figure>\n<p>创建一个script标签，发起请求时，url后跟了一个名为func的参数，而这个参数就是之后需要用到的回调函数名称。</p>\n<p>后台对应的处理代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&apos;*&apos;, function(req, res) &#123;</span><br><span class=\"line\">  let callback = req.query.func;</span><br><span class=\"line\">  let content = callback+&quot;(&#123;&apos;message&apos;:&apos;测试数据2&apos;&#125;)&quot;;</span><br><span class=\"line\">  res.send(content);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>通过动态插入script标签的方式，利用script标签的src属性发起请求，来达到跨域的目的。</p>\n<p>jsonp的方式兼容性非常好，即便是那些老古董浏览器，也可以用jsonp的方式解决跨域问题，但是它也有所限制，它只能使用get方式发起请求，并且对于不同域之间页面的js互相调用无能为力。</p>\n<p>jQuery很早就支持了jsonp的语法糖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:&apos;http://127.0.0.1:1234/&apos;,</span><br><span class=\"line\">    dataType:&quot;jsonp&quot;, //告知jQ我们走的JSONP形式</span><br><span class=\"line\">    jsonpCallback:&quot;abc&quot;, //callback名</span><br><span class=\"line\">    success:function(data)&#123;</span><br><span class=\"line\">        console.log(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h4><hr>\n<p>原理：要求当前域（常规为存放资源的服务器）在响应报头添加Access-Control-Allow-Origin标签，从而允许指定域的站点访问当前域上的资源。</p>\n<p>CORS主要是在服务端来实现跨域功能，客户端的实现跟常规的请求基本一致。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(&quot;http&quot;).createServer(function(req,res)&#123;</span><br><span class=\"line\">  res.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;http://127.0.0.1&quot;);</span><br><span class=\"line\">  res.setHeader(</span><br><span class=\"line\">    &quot;Access-Control-Allow-Methods&quot;,</span><br><span class=\"line\">    &quot;PUT, GET, POST, DELETE, HEAD, PATCH&quot;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  res.end(req.method+&quot; &quot;+req.url);</span><br><span class=\"line\">&#125;).listen(1234);</span><br></pre></td></tr></table></figure>\n<p>不过CORS默认只支持GET/POST这两种http请求类型，如果要开启PUT/DELETE之类的方式，需要在服务端在添加一个”Access-Control-Allow-Methods”报头标签。</p>\n<h4 id=\"Cross-document-messaging\"><a href=\"#Cross-document-messaging\" class=\"headerlink\" title=\"Cross-document messaging\"></a>Cross-document messaging</h4><hr>\n<p>在 Cross-document messaging 中，我们可以使用 postMessage 方法和 onmessage 事件来实现不同域之间的通信</p>\n<p>其中postMessage用于实时向接收信息的页面发送消息 otherWindow.postMessage(message, targetOrigin);</p>\n<pre><code>otherWindow:            对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；\nwindow.open的返回值；    通过name或下标从window.frames取到的值。\nmessage:                所要发送的数据，string类型。\ntargetOrigin:           允许通信的域的url，*表示不作限制。\n</code></pre><p>可以在父页面中嵌入不同域的子页面（iframe实现，而且常规会把它隐藏掉），在子页面调用 postMessage 方法向父页面发送数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe style=&quot;display:none;&quot; id=&quot;ifr&quot; src=&quot;http://127.0.0.1:10847/sop/b.html&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    window.addEventListener(&apos;message&apos;, function(event)&#123;</span><br><span class=\"line\">        // 通过origin属性判断消息来源地址</span><br><span class=\"line\">        if (event.origin == &apos;http://127.0.0.1:10847&apos;) &#123;</span><br><span class=\"line\">            alert(event.data);    // 弹出从子页面post过来的信息</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://127.0.0.1:10847/sop/b.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:10847/sop/b.html</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var ifr = window.parent;  //获取父窗体</span><br><span class=\"line\">    var targetOrigin = &apos;http://localhost:10847&apos;;  // 若写成 http://127.0.0.1:10847 则将无法执行postMessage</span><br><span class=\"line\">    ifr.postMessage(&apos;这是传递给a.html的信息&apos;, targetOrigin);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h4><hr>\n<p>WebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很棒的实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var ws = new WebSocket(&apos;ws://127.0.0.1:8080/url&apos;); </span><br><span class=\"line\">    //新建一个WebSocket对象，注意服务器端的协议必须为“ws://”或“wss://”</span><br><span class=\"line\">    //其中ws开头是普通的websocket连接，wss是安全的websocket连接，类似于https。</span><br><span class=\"line\">ws.onopen = function() &#123;</span><br><span class=\"line\">    // 连接被打开时调用</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ws.onerror = function(e) &#123;</span><br><span class=\"line\">    // 在出现错误时调用，例如在连接断掉时</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ws.onclose = function() &#123;</span><br><span class=\"line\">    // 在连接被关闭时调用</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ws.onmessage = function(msg) &#123;</span><br><span class=\"line\">    // 在服务器端向客户端发送消息时调用</span><br><span class=\"line\">    // msg.data包含了消息</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 这里是如何给服务器端发送一些数据</span><br><span class=\"line\">ws.send(&apos;some data&apos;);</span><br><span class=\"line\">// 关闭套接口</span><br><span class=\"line\">ws.close();</span><br></pre></td></tr></table></figure>\n<p>但是一般情况下使用 socket.io 来向下兼容</p>\n<h4 id=\"document-domain\"><a href=\"#document-domain\" class=\"headerlink\" title=\"document.domain\"></a>document.domain</h4><hr>\n<p>只适合主域相同但子域不同的情况，比如 a.com 和 <a href=\"http://www.a.com，我们只需要给这两个页面都加上一句\" target=\"_blank\" rel=\"noopener\">www.a.com，我们只需要给这两个页面都加上一句</a> document.domain = ‘a.com’，就可以在其中一个页面嵌套另一个页面，然后进行窗体间的交互。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe src=&quot;http://www.a.com:8080/sop/b.html&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    document.domain = &apos;a.com&apos;;</span><br><span class=\"line\">    $(&quot;iframe&quot;).load(function()&#123;</span><br><span class=\"line\">        $(this).contents().find(&quot;div&quot;).text(&quot;OK&quot;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>在b.html中只要也声明document.domain就可以了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    document.domain = &apos;a.com&apos;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看到a.html中JS成功修改了b.html中的内容。</p>\n<h4 id=\"location-hash\"><a href=\"#location-hash\" class=\"headerlink\" title=\"location.hash\"></a>location.hash</h4><h4 id=\"window-name\"><a href=\"#window-name\" class=\"headerlink\" title=\"window.name\"></a>window.name</h4><hr>\n<p>这两个东西用的很少，使用起来也很复杂，需要的话再自行查找。</p>\n<h4 id=\"服务器代理\"><a href=\"#服务器代理\" class=\"headerlink\" title=\"服务器代理\"></a>服务器代理</h4><hr>\n<p>原理：页面直接向同域的服务端发请求，服务端进行跨域处理或爬虫后，再把数据返回给客户端页面。</p>\n"},{"layout":"post","title":"Nginx的安装及配置","date":"2018-01-27T16:00:00.000Z","author":"Ai Shuangying","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n使用服务器系统版本为CentOS 7\n\n----------\n\n\n### 安装及配置Nginx\n-------------\n\n```\nyum -y install nginx\n\n//安装成功后检查版本\nnginx -v\n\n//第一次启动Nginx\nsudo service nginx start\n\n//配置Nginx\ncd /etc/nginx\n\ncd conf.d\n\n//编辑配置文件\nsudo vi example-com-8888.conf\n//输入以下内容\n```\n\n```\nupstream test {\n    server 127.0.0.1:18080;\n}\n\nserver {\n    listen 80;\n    server_name /* 这里填自己的VPS外网地址 */;\n\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_pass http://test;\n        proxy_redirect off;\n    }\n}\n```\n\n```\n//配置好后返回上层目录即 /etc/nginx 目录\n//查看nginx配置文件\n\nsudo vi nginx.conf\n//主要是检查其中是否把自定的配置文件导入了进来\n//从此文件中找到下面这句看是否被注释了\n\n    include /etc/nginx/conf.d/*.conf\n    //这句命令的含义是将/etc/nginx/conf.d/目录下的所有.conf结尾的配置文件都导入进来\n\n    //同时在此文件的http部分取消注释或添加下句可隐藏掉服务器输出的nginx信息\n    server_tokens off;\n\n    //重启服务\n    sudo service nginx reload\n\n//检查配置文件\nsudo nginx -t\n\n//检查通过后重启nginx\nsudo nginx -s reload\n```\n\n\n### Nginx转发\n-------------\n\n配置Nginx根据子域名转发至不同端口\n\n```\nupstream wwwson {\n    server 127.0.0.1:18080;\n}\n\nserver {\n    listen 80;\n    server_name www.********.com;\n\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_pass http://wwwson;\n        proxy_redirect off;\n    }\n}\n```\n\n```\nupstream introson {\n    server 127.0.0.1:18081;\n}\n\nserver {\n    listen 80;\n    server_name intro.********.com;\n\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_pass http://introson;\n        proxy_redirect off;\n    }\n\n    //此处配置返回静态文件\n    location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){\n        root /www/path/to/project;   //配置静态文件的源地址\n    }\n}\n```\n\n只需要分别配置这些文件，根据不同的域名转发至不同的端口，然后重启Nginx即可。\n","source":"_posts/Nginx的安装及配置.md","raw":"---\nlayout: post\ntitle: \"Nginx的安装及配置\"\ndate: 2018-1-28\nauthor: \"Ai Shuangying\"\ntags:\n\t- Nginx\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n使用服务器系统版本为CentOS 7\n\n----------\n\n\n### 安装及配置Nginx\n-------------\n\n```\nyum -y install nginx\n\n//安装成功后检查版本\nnginx -v\n\n//第一次启动Nginx\nsudo service nginx start\n\n//配置Nginx\ncd /etc/nginx\n\ncd conf.d\n\n//编辑配置文件\nsudo vi example-com-8888.conf\n//输入以下内容\n```\n\n```\nupstream test {\n    server 127.0.0.1:18080;\n}\n\nserver {\n    listen 80;\n    server_name /* 这里填自己的VPS外网地址 */;\n\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_pass http://test;\n        proxy_redirect off;\n    }\n}\n```\n\n```\n//配置好后返回上层目录即 /etc/nginx 目录\n//查看nginx配置文件\n\nsudo vi nginx.conf\n//主要是检查其中是否把自定的配置文件导入了进来\n//从此文件中找到下面这句看是否被注释了\n\n    include /etc/nginx/conf.d/*.conf\n    //这句命令的含义是将/etc/nginx/conf.d/目录下的所有.conf结尾的配置文件都导入进来\n\n    //同时在此文件的http部分取消注释或添加下句可隐藏掉服务器输出的nginx信息\n    server_tokens off;\n\n    //重启服务\n    sudo service nginx reload\n\n//检查配置文件\nsudo nginx -t\n\n//检查通过后重启nginx\nsudo nginx -s reload\n```\n\n\n### Nginx转发\n-------------\n\n配置Nginx根据子域名转发至不同端口\n\n```\nupstream wwwson {\n    server 127.0.0.1:18080;\n}\n\nserver {\n    listen 80;\n    server_name www.********.com;\n\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_pass http://wwwson;\n        proxy_redirect off;\n    }\n}\n```\n\n```\nupstream introson {\n    server 127.0.0.1:18081;\n}\n\nserver {\n    listen 80;\n    server_name intro.********.com;\n\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_pass http://introson;\n        proxy_redirect off;\n    }\n\n    //此处配置返回静态文件\n    location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){\n        root /www/path/to/project;   //配置静态文件的源地址\n    }\n}\n```\n\n只需要分别配置这些文件，根据不同的域名转发至不同的端口，然后重启Nginx即可。\n","slug":"Nginx的安装及配置","published":1,"updated":"2018-04-14T06:30:44.227Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwc00045xfa5ile930o","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>使用服务器系统版本为CentOS 7</p>\n<hr>\n<h3 id=\"安装及配置Nginx\"><a href=\"#安装及配置Nginx\" class=\"headerlink\" title=\"安装及配置Nginx\"></a>安装及配置Nginx</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//安装成功后检查版本</span><br><span class=\"line\">nginx -v</span><br><span class=\"line\"></span><br><span class=\"line\">//第一次启动Nginx</span><br><span class=\"line\">sudo service nginx start</span><br><span class=\"line\"></span><br><span class=\"line\">//配置Nginx</span><br><span class=\"line\">cd /etc/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">cd conf.d</span><br><span class=\"line\"></span><br><span class=\"line\">//编辑配置文件</span><br><span class=\"line\">sudo vi example-com-8888.conf</span><br><span class=\"line\">//输入以下内容</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test &#123;</span><br><span class=\"line\">    server 127.0.0.1:18080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name /* 这里填自己的VPS外网地址 */;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http://test;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//配置好后返回上层目录即 /etc/nginx 目录</span><br><span class=\"line\">//查看nginx配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vi nginx.conf</span><br><span class=\"line\">//主要是检查其中是否把自定的配置文件导入了进来</span><br><span class=\"line\">//从此文件中找到下面这句看是否被注释了</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf</span><br><span class=\"line\">    //这句命令的含义是将/etc/nginx/conf.d/目录下的所有.conf结尾的配置文件都导入进来</span><br><span class=\"line\"></span><br><span class=\"line\">    //同时在此文件的http部分取消注释或添加下句可隐藏掉服务器输出的nginx信息</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\"></span><br><span class=\"line\">    //重启服务</span><br><span class=\"line\">    sudo service nginx reload</span><br><span class=\"line\"></span><br><span class=\"line\">//检查配置文件</span><br><span class=\"line\">sudo nginx -t</span><br><span class=\"line\"></span><br><span class=\"line\">//检查通过后重启nginx</span><br><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"Nginx转发\"><a href=\"#Nginx转发\" class=\"headerlink\" title=\"Nginx转发\"></a>Nginx转发</h3><hr>\n<p>配置Nginx根据子域名转发至不同端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream wwwson &#123;</span><br><span class=\"line\">    server 127.0.0.1:18080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.********.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http://wwwson;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream introson &#123;</span><br><span class=\"line\">    server 127.0.0.1:18081;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name intro.********.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http://introson;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //此处配置返回静态文件</span><br><span class=\"line\">    location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt)&#123;</span><br><span class=\"line\">        root /www/path/to/project;   //配置静态文件的源地址</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只需要分别配置这些文件，根据不同的域名转发至不同的端口，然后重启Nginx即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>使用服务器系统版本为CentOS 7</p>\n<hr>\n<h3 id=\"安装及配置Nginx\"><a href=\"#安装及配置Nginx\" class=\"headerlink\" title=\"安装及配置Nginx\"></a>安装及配置Nginx</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//安装成功后检查版本</span><br><span class=\"line\">nginx -v</span><br><span class=\"line\"></span><br><span class=\"line\">//第一次启动Nginx</span><br><span class=\"line\">sudo service nginx start</span><br><span class=\"line\"></span><br><span class=\"line\">//配置Nginx</span><br><span class=\"line\">cd /etc/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">cd conf.d</span><br><span class=\"line\"></span><br><span class=\"line\">//编辑配置文件</span><br><span class=\"line\">sudo vi example-com-8888.conf</span><br><span class=\"line\">//输入以下内容</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test &#123;</span><br><span class=\"line\">    server 127.0.0.1:18080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name /* 这里填自己的VPS外网地址 */;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http://test;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//配置好后返回上层目录即 /etc/nginx 目录</span><br><span class=\"line\">//查看nginx配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vi nginx.conf</span><br><span class=\"line\">//主要是检查其中是否把自定的配置文件导入了进来</span><br><span class=\"line\">//从此文件中找到下面这句看是否被注释了</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf</span><br><span class=\"line\">    //这句命令的含义是将/etc/nginx/conf.d/目录下的所有.conf结尾的配置文件都导入进来</span><br><span class=\"line\"></span><br><span class=\"line\">    //同时在此文件的http部分取消注释或添加下句可隐藏掉服务器输出的nginx信息</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\"></span><br><span class=\"line\">    //重启服务</span><br><span class=\"line\">    sudo service nginx reload</span><br><span class=\"line\"></span><br><span class=\"line\">//检查配置文件</span><br><span class=\"line\">sudo nginx -t</span><br><span class=\"line\"></span><br><span class=\"line\">//检查通过后重启nginx</span><br><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"Nginx转发\"><a href=\"#Nginx转发\" class=\"headerlink\" title=\"Nginx转发\"></a>Nginx转发</h3><hr>\n<p>配置Nginx根据子域名转发至不同端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream wwwson &#123;</span><br><span class=\"line\">    server 127.0.0.1:18080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.********.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http://wwwson;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream introson &#123;</span><br><span class=\"line\">    server 127.0.0.1:18081;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name intro.********.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http://introson;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //此处配置返回静态文件</span><br><span class=\"line\">    location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt)&#123;</span><br><span class=\"line\">        root /www/path/to/project;   //配置静态文件的源地址</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只需要分别配置这些文件，根据不同的域名转发至不同的端口，然后重启Nginx即可。</p>\n"},{"layout":"post","title":"Nginx部署静态网页","date":"2018-02-04T16:00:00.000Z","author":"Ai Shuangying","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n----------\n\n\n### 首先建立一个存放静态网页的文件夹\n-------------\n\n``` bash\npwd\n\n/root/static_html/resume\n//root文件夹下的static_html文件夹下创建resume文件夹，里面放置静态文件\n```\n\n### 配置Nginx\n-------------\n\n```\ncd /etc/nginx/conf.d/\n//创建新的 .conf 文件\n```\n\n```\nserver {\n  listen 80;\n  server_name resume.*******.com; //填写访问用的域名\n  root /root/static_html/resume;\n  index index.html;\n  location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){\n    root /root/static_html/resume;\n  }\n}\n```\n\n重启Nginx\n\n``` bash\nsudo nginx -s reload\n```\n\n域名解析好后访问resume.*******.com即可\n\n如果报错403，可能是Nginx权限问题\n\n打开Nginx配置文件\n\n``` bash\nvi /etc/nginx/nginx.conf\n\n//在这个文件中将\nuser nginx;\n//改成\nuser root;\n//重启Nginx即可\n```\n\n\n再次访问resume.*******.com可以了。","source":"_posts/Nginx部署静态网页.md","raw":"---\nlayout: post\ntitle: \"Nginx部署静态网页\"\ndate: 2018-2-5\nauthor: \"Ai Shuangying\"\ntags:\n\t- Nginx\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n----------\n\n\n### 首先建立一个存放静态网页的文件夹\n-------------\n\n``` bash\npwd\n\n/root/static_html/resume\n//root文件夹下的static_html文件夹下创建resume文件夹，里面放置静态文件\n```\n\n### 配置Nginx\n-------------\n\n```\ncd /etc/nginx/conf.d/\n//创建新的 .conf 文件\n```\n\n```\nserver {\n  listen 80;\n  server_name resume.*******.com; //填写访问用的域名\n  root /root/static_html/resume;\n  index index.html;\n  location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){\n    root /root/static_html/resume;\n  }\n}\n```\n\n重启Nginx\n\n``` bash\nsudo nginx -s reload\n```\n\n域名解析好后访问resume.*******.com即可\n\n如果报错403，可能是Nginx权限问题\n\n打开Nginx配置文件\n\n``` bash\nvi /etc/nginx/nginx.conf\n\n//在这个文件中将\nuser nginx;\n//改成\nuser root;\n//重启Nginx即可\n```\n\n\n再次访问resume.*******.com可以了。","slug":"Nginx部署静态网页","published":1,"updated":"2018-04-09T03:47:51.198Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwe00055xfavjmwnukp","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<hr>\n<h3 id=\"首先建立一个存放静态网页的文件夹\"><a href=\"#首先建立一个存放静态网页的文件夹\" class=\"headerlink\" title=\"首先建立一个存放静态网页的文件夹\"></a>首先建立一个存放静态网页的文件夹</h3><hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"></span><br><span class=\"line\">/root/static_html/resume</span><br><span class=\"line\">//root文件夹下的static_html文件夹下创建resume文件夹，里面放置静态文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/nginx/conf.d/</span><br><span class=\"line\">//创建新的 .conf 文件</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name resume.*******.com; //填写访问用的域名</span><br><span class=\"line\">  root /root/static_html/resume;</span><br><span class=\"line\">  index index.html;</span><br><span class=\"line\">  location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt)&#123;</span><br><span class=\"line\">    root /root/static_html/resume;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>域名解析好后访问resume.<strong>***</strong>.com即可</p>\n<p>如果报错403，可能是Nginx权限问题</p>\n<p>打开Nginx配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/nginx/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\">//在这个文件中将</span><br><span class=\"line\">user nginx;</span><br><span class=\"line\">//改成</span><br><span class=\"line\">user root;</span><br><span class=\"line\">//重启Nginx即可</span><br></pre></td></tr></table></figure>\n<p>再次访问resume.<strong>***</strong>.com可以了。</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<hr>\n<h3 id=\"首先建立一个存放静态网页的文件夹\"><a href=\"#首先建立一个存放静态网页的文件夹\" class=\"headerlink\" title=\"首先建立一个存放静态网页的文件夹\"></a>首先建立一个存放静态网页的文件夹</h3><hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"></span><br><span class=\"line\">/root/static_html/resume</span><br><span class=\"line\">//root文件夹下的static_html文件夹下创建resume文件夹，里面放置静态文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/nginx/conf.d/</span><br><span class=\"line\">//创建新的 .conf 文件</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name resume.*******.com; //填写访问用的域名</span><br><span class=\"line\">  root /root/static_html/resume;</span><br><span class=\"line\">  index index.html;</span><br><span class=\"line\">  location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt)&#123;</span><br><span class=\"line\">    root /root/static_html/resume;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>域名解析好后访问resume.<strong>***</strong>.com即可</p>\n<p>如果报错403，可能是Nginx权限问题</p>\n<p>打开Nginx配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/nginx/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\">//在这个文件中将</span><br><span class=\"line\">user nginx;</span><br><span class=\"line\">//改成</span><br><span class=\"line\">user root;</span><br><span class=\"line\">//重启Nginx即可</span><br></pre></td></tr></table></figure>\n<p>再次访问resume.<strong>***</strong>.com可以了。</p>\n"},{"layout":"post","title":"Nginx配置SSL证书","date":"2018-03-09T16:00:00.000Z","author":"Ai Shuangying","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n前些天记录了[Nginx的安装及配置](./Nginx的安装及配置.md)和[Nginx部署静态网页](./Nginx部署静态网页.md)两篇文章，后来白菜价入了一台国内的ECS，因为备案流程太长，如果想要将自己的博客放在国内服务器上怎么办呢？那么SSL证书就派上用场了。\n\nSSL 证书就是遵守 SSL协议，由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。\n\n在这里我用的免费SSL证书提供商是[FreeSSL](https://freessl.org/)\n\n----------\n\n\n#### 准备工作\n-------------\n\n首先域名要解析到所用服务器上，后面会介绍根据不同的子域名配置各自的SSL证书。\n\n然后服务器(尤其是ECS的安全组策略)要开放对80(http)和443(https)的端口访问权限，不然配置成功了也访问不了的。\n\n然后就是安装并配置Nginx，我的其他博客也有相关内容的介绍，请自行查阅。\n\n\n#### 申请证书\n-------------\n\n[FreeSSL](https://freessl.org/)的申请流程还是很简单的，推荐使用TrustAsia的服务，时长一年，需要用到哪个子域名的时候单独申请一下就可以了很方便。\n\n这里用到DNS验证，主要是为了验证此域名的所有权是否是本人，只需要根据它给出的TXT Record值在域名控制台中做个对应的解析就可以了，验证成功后就可以下载了。\n\n-------------\n\n#### 配置nginx.conf\n-------------\n\n默认安装的nginx是没有开放ssl配置的，我们手动来打开\n\n``` \n    # Settings for a TLS enabled server.\n    #\n    server {\n        listen       443 ssl http2 default_server;\n        listen       [::]:443 ssl http2 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        ssl                 on;\n        ssl_certificate     ***.pem;\n        ssl_certificate_key ***.key;\n\n        ssl_session_cache shared:SSL:1m;\n        ssl_session_timeout  10m;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers on;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n```\n\n这段默认是注释掉的，我们打开它，同时注意里面需要配置的就是ssl_certificate 和 ssl_certificate_key 两项，这里把申请好下载的证书传到服务器里并填写好访问路径就可以了。\n\n另外如果配置完成报403错误，应该是nginx的权限不足，在这个文件顶部的user nginx;改为user root;就可以了。\n\n这里放的证书可以是对主域名申请的证书 ****.com \n\n#### 配置子域名.conf\n-------------\n\n这里用一个静态文件服务来举例子\n\n```\n    server {\n        listen 443 ssl;\n        server_name resume.aishuangying.com;\n        root /root/static_html/resume;\n\n        ssl_certificate     cert/resume_chain.pem;\n        ssl_certificate_key cert/resume_private.key;\n\n        index index.html;\n        location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){\n            root /root/static_html/resume;\n        }\n    }\n```\n\n这里还是填好ssl_certificate 和 ssl_certificate_key 这是子域名用的证书。\n\n这里需要注意的就是监听的端口需要更改为443，因为现在的协议改为了https而这使用的是443端口。\n\n\n这里只是简单的配置SSL证书，当需求变复杂的时候配置也会相应得复杂，当我碰到这类问题的时候我会更新在这里。","source":"_posts/Nginx配置SSL证书.md","raw":"---\nlayout: post\ntitle: \"Nginx配置SSL证书\"\ndate: 2018-3-10\nauthor: \"Ai Shuangying\"\ntags:\n\t- Nginx\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n前些天记录了[Nginx的安装及配置](./Nginx的安装及配置.md)和[Nginx部署静态网页](./Nginx部署静态网页.md)两篇文章，后来白菜价入了一台国内的ECS，因为备案流程太长，如果想要将自己的博客放在国内服务器上怎么办呢？那么SSL证书就派上用场了。\n\nSSL 证书就是遵守 SSL协议，由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。\n\n在这里我用的免费SSL证书提供商是[FreeSSL](https://freessl.org/)\n\n----------\n\n\n#### 准备工作\n-------------\n\n首先域名要解析到所用服务器上，后面会介绍根据不同的子域名配置各自的SSL证书。\n\n然后服务器(尤其是ECS的安全组策略)要开放对80(http)和443(https)的端口访问权限，不然配置成功了也访问不了的。\n\n然后就是安装并配置Nginx，我的其他博客也有相关内容的介绍，请自行查阅。\n\n\n#### 申请证书\n-------------\n\n[FreeSSL](https://freessl.org/)的申请流程还是很简单的，推荐使用TrustAsia的服务，时长一年，需要用到哪个子域名的时候单独申请一下就可以了很方便。\n\n这里用到DNS验证，主要是为了验证此域名的所有权是否是本人，只需要根据它给出的TXT Record值在域名控制台中做个对应的解析就可以了，验证成功后就可以下载了。\n\n-------------\n\n#### 配置nginx.conf\n-------------\n\n默认安装的nginx是没有开放ssl配置的，我们手动来打开\n\n``` \n    # Settings for a TLS enabled server.\n    #\n    server {\n        listen       443 ssl http2 default_server;\n        listen       [::]:443 ssl http2 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        ssl                 on;\n        ssl_certificate     ***.pem;\n        ssl_certificate_key ***.key;\n\n        ssl_session_cache shared:SSL:1m;\n        ssl_session_timeout  10m;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers on;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n```\n\n这段默认是注释掉的，我们打开它，同时注意里面需要配置的就是ssl_certificate 和 ssl_certificate_key 两项，这里把申请好下载的证书传到服务器里并填写好访问路径就可以了。\n\n另外如果配置完成报403错误，应该是nginx的权限不足，在这个文件顶部的user nginx;改为user root;就可以了。\n\n这里放的证书可以是对主域名申请的证书 ****.com \n\n#### 配置子域名.conf\n-------------\n\n这里用一个静态文件服务来举例子\n\n```\n    server {\n        listen 443 ssl;\n        server_name resume.aishuangying.com;\n        root /root/static_html/resume;\n\n        ssl_certificate     cert/resume_chain.pem;\n        ssl_certificate_key cert/resume_private.key;\n\n        index index.html;\n        location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){\n            root /root/static_html/resume;\n        }\n    }\n```\n\n这里还是填好ssl_certificate 和 ssl_certificate_key 这是子域名用的证书。\n\n这里需要注意的就是监听的端口需要更改为443，因为现在的协议改为了https而这使用的是443端口。\n\n\n这里只是简单的配置SSL证书，当需求变复杂的时候配置也会相应得复杂，当我碰到这类问题的时候我会更新在这里。","slug":"Nginx配置SSL证书","published":1,"updated":"2018-04-09T03:47:03.261Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwf00085xfas0h733me","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>前些天记录了<a href=\"./Nginx的安装及配置.md\">Nginx的安装及配置</a>和<a href=\"./Nginx部署静态网页.md\">Nginx部署静态网页</a>两篇文章，后来白菜价入了一台国内的ECS，因为备案流程太长，如果想要将自己的博客放在国内服务器上怎么办呢？那么SSL证书就派上用场了。</p>\n<p>SSL 证书就是遵守 SSL协议，由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。</p>\n<p>在这里我用的免费SSL证书提供商是<a href=\"https://freessl.org/\" target=\"_blank\" rel=\"noopener\">FreeSSL</a></p>\n<hr>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><hr>\n<p>首先域名要解析到所用服务器上，后面会介绍根据不同的子域名配置各自的SSL证书。</p>\n<p>然后服务器(尤其是ECS的安全组策略)要开放对80(http)和443(https)的端口访问权限，不然配置成功了也访问不了的。</p>\n<p>然后就是安装并配置Nginx，我的其他博客也有相关内容的介绍，请自行查阅。</p>\n<h4 id=\"申请证书\"><a href=\"#申请证书\" class=\"headerlink\" title=\"申请证书\"></a>申请证书</h4><hr>\n<p><a href=\"https://freessl.org/\" target=\"_blank\" rel=\"noopener\">FreeSSL</a>的申请流程还是很简单的，推荐使用TrustAsia的服务，时长一年，需要用到哪个子域名的时候单独申请一下就可以了很方便。</p>\n<p>这里用到DNS验证，主要是为了验证此域名的所有权是否是本人，只需要根据它给出的TXT Record值在域名控制台中做个对应的解析就可以了，验证成功后就可以下载了。</p>\n<hr>\n<h4 id=\"配置nginx-conf\"><a href=\"#配置nginx-conf\" class=\"headerlink\" title=\"配置nginx.conf\"></a>配置nginx.conf</h4><hr>\n<p>默认安装的nginx是没有开放ssl配置的，我们手动来打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Settings for a TLS enabled server.</span><br><span class=\"line\">#</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443 ssl http2 default_server;</span><br><span class=\"line\">    listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\">    root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl                 on;</span><br><span class=\"line\">    ssl_certificate     ***.pem;</span><br><span class=\"line\">    ssl_certificate_key ***.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout  10m;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段默认是注释掉的，我们打开它，同时注意里面需要配置的就是ssl_certificate 和 ssl_certificate_key 两项，这里把申请好下载的证书传到服务器里并填写好访问路径就可以了。</p>\n<p>另外如果配置完成报403错误，应该是nginx的权限不足，在这个文件顶部的user nginx;改为user root;就可以了。</p>\n<p>这里放的证书可以是对主域名申请的证书 <em>**</em>.com </p>\n<h4 id=\"配置子域名-conf\"><a href=\"#配置子域名-conf\" class=\"headerlink\" title=\"配置子域名.conf\"></a>配置子域名.conf</h4><hr>\n<p>这里用一个静态文件服务来举例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name resume.aishuangying.com;</span><br><span class=\"line\">    root /root/static_html/resume;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate     cert/resume_chain.pem;</span><br><span class=\"line\">    ssl_certificate_key cert/resume_private.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">    location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt)&#123;</span><br><span class=\"line\">        root /root/static_html/resume;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里还是填好ssl_certificate 和 ssl_certificate_key 这是子域名用的证书。</p>\n<p>这里需要注意的就是监听的端口需要更改为443，因为现在的协议改为了https而这使用的是443端口。</p>\n<p>这里只是简单的配置SSL证书，当需求变复杂的时候配置也会相应得复杂，当我碰到这类问题的时候我会更新在这里。</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>前些天记录了<a href=\"./Nginx的安装及配置.md\">Nginx的安装及配置</a>和<a href=\"./Nginx部署静态网页.md\">Nginx部署静态网页</a>两篇文章，后来白菜价入了一台国内的ECS，因为备案流程太长，如果想要将自己的博客放在国内服务器上怎么办呢？那么SSL证书就派上用场了。</p>\n<p>SSL 证书就是遵守 SSL协议，由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。</p>\n<p>在这里我用的免费SSL证书提供商是<a href=\"https://freessl.org/\" target=\"_blank\" rel=\"noopener\">FreeSSL</a></p>\n<hr>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><hr>\n<p>首先域名要解析到所用服务器上，后面会介绍根据不同的子域名配置各自的SSL证书。</p>\n<p>然后服务器(尤其是ECS的安全组策略)要开放对80(http)和443(https)的端口访问权限，不然配置成功了也访问不了的。</p>\n<p>然后就是安装并配置Nginx，我的其他博客也有相关内容的介绍，请自行查阅。</p>\n<h4 id=\"申请证书\"><a href=\"#申请证书\" class=\"headerlink\" title=\"申请证书\"></a>申请证书</h4><hr>\n<p><a href=\"https://freessl.org/\" target=\"_blank\" rel=\"noopener\">FreeSSL</a>的申请流程还是很简单的，推荐使用TrustAsia的服务，时长一年，需要用到哪个子域名的时候单独申请一下就可以了很方便。</p>\n<p>这里用到DNS验证，主要是为了验证此域名的所有权是否是本人，只需要根据它给出的TXT Record值在域名控制台中做个对应的解析就可以了，验证成功后就可以下载了。</p>\n<hr>\n<h4 id=\"配置nginx-conf\"><a href=\"#配置nginx-conf\" class=\"headerlink\" title=\"配置nginx.conf\"></a>配置nginx.conf</h4><hr>\n<p>默认安装的nginx是没有开放ssl配置的，我们手动来打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Settings for a TLS enabled server.</span><br><span class=\"line\">#</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443 ssl http2 default_server;</span><br><span class=\"line\">    listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\">    root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl                 on;</span><br><span class=\"line\">    ssl_certificate     ***.pem;</span><br><span class=\"line\">    ssl_certificate_key ***.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout  10m;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段默认是注释掉的，我们打开它，同时注意里面需要配置的就是ssl_certificate 和 ssl_certificate_key 两项，这里把申请好下载的证书传到服务器里并填写好访问路径就可以了。</p>\n<p>另外如果配置完成报403错误，应该是nginx的权限不足，在这个文件顶部的user nginx;改为user root;就可以了。</p>\n<p>这里放的证书可以是对主域名申请的证书 <em>**</em>.com </p>\n<h4 id=\"配置子域名-conf\"><a href=\"#配置子域名-conf\" class=\"headerlink\" title=\"配置子域名.conf\"></a>配置子域名.conf</h4><hr>\n<p>这里用一个静态文件服务来举例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name resume.aishuangying.com;</span><br><span class=\"line\">    root /root/static_html/resume;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate     cert/resume_chain.pem;</span><br><span class=\"line\">    ssl_certificate_key cert/resume_private.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">    location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt)&#123;</span><br><span class=\"line\">        root /root/static_html/resume;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里还是填好ssl_certificate 和 ssl_certificate_key 这是子域名用的证书。</p>\n<p>这里需要注意的就是监听的端口需要更改为443，因为现在的协议改为了https而这使用的是443端口。</p>\n<p>这里只是简单的配置SSL证书，当需求变复杂的时候配置也会相应得复杂，当我碰到这类问题的时候我会更新在这里。</p>\n"},{"layout":"post","title":"Nginx配置跨域信息","date":"2018-08-15T16:00:00.000Z","author":"Ai Shuangying","_content":"\n----------\n\n今天在搭建Vue项目时用到了Axios，在添加自定义头信息的时候遇到了问题，options验证阶段报错\n\n'Request header field Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.'\n\n在Nginx配置中加入允许的头部信息，再请求就顺利通过了。\n\n\n### Nginx添加认证\n-------------\n\n```\n\tadd_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Headers Content-Type,Authorization;\n    add_header Access-Control-Allow-Methods POST;\n    add_header Access-Control-Allow-Methods GET;\n```\n\n添加了对自定义头 Content-Type 和 Authorization 的支持\n\n\n### Axios\n-------------\n\n```\n\taxios.get(Url,{\n\t    headers: { \n\t        'Content-Type': 'application/x-www-form-urlencoded',\n\t        'Authorization' : token\n\t    }\n\t}).then((response) => {\n\t    //处理成功回调\n\t}).catch((error) => {\n\t    //处理失败回调\n\t});\n```\n","source":"_posts/Nginx配置跨域信息.md","raw":"---\nlayout: post\ntitle: \"Nginx配置跨域信息\"\ndate: 2018-8-16\nauthor: \"Ai Shuangying\"\ntags:\n\t- Nginx\n---\n\n----------\n\n今天在搭建Vue项目时用到了Axios，在添加自定义头信息的时候遇到了问题，options验证阶段报错\n\n'Request header field Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.'\n\n在Nginx配置中加入允许的头部信息，再请求就顺利通过了。\n\n\n### Nginx添加认证\n-------------\n\n```\n\tadd_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Headers Content-Type,Authorization;\n    add_header Access-Control-Allow-Methods POST;\n    add_header Access-Control-Allow-Methods GET;\n```\n\n添加了对自定义头 Content-Type 和 Authorization 的支持\n\n\n### Axios\n-------------\n\n```\n\taxios.get(Url,{\n\t    headers: { \n\t        'Content-Type': 'application/x-www-form-urlencoded',\n\t        'Authorization' : token\n\t    }\n\t}).then((response) => {\n\t    //处理成功回调\n\t}).catch((error) => {\n\t    //处理失败回调\n\t});\n```\n","slug":"Nginx配置跨域信息","published":1,"updated":"2018-08-16T02:23:06.465Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwh00095xfaokb9hlu6","content":"<hr>\n<p>今天在搭建Vue项目时用到了Axios，在添加自定义头信息的时候遇到了问题，options验证阶段报错</p>\n<p>‘Request header field Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.’</p>\n<p>在Nginx配置中加入允许的头部信息，再请求就顺利通过了。</p>\n<h3 id=\"Nginx添加认证\"><a href=\"#Nginx添加认证\" class=\"headerlink\" title=\"Nginx添加认证\"></a>Nginx添加认证</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">   add_header Access-Control-Allow-Headers Content-Type,Authorization;</span><br><span class=\"line\">   add_header Access-Control-Allow-Methods POST;</span><br><span class=\"line\">   add_header Access-Control-Allow-Methods GET;</span><br></pre></td></tr></table></figure>\n<p>添加了对自定义头 Content-Type 和 Authorization 的支持</p>\n<h3 id=\"Axios\"><a href=\"#Axios\" class=\"headerlink\" title=\"Axios\"></a>Axios</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(Url,&#123;</span><br><span class=\"line\">    headers: &#123; </span><br><span class=\"line\">        &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;,</span><br><span class=\"line\">        &apos;Authorization&apos; : token</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).then((response) =&gt; &#123;</span><br><span class=\"line\">    //处理成功回调</span><br><span class=\"line\">&#125;).catch((error) =&gt; &#123;</span><br><span class=\"line\">    //处理失败回调</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>今天在搭建Vue项目时用到了Axios，在添加自定义头信息的时候遇到了问题，options验证阶段报错</p>\n<p>‘Request header field Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.’</p>\n<p>在Nginx配置中加入允许的头部信息，再请求就顺利通过了。</p>\n<h3 id=\"Nginx添加认证\"><a href=\"#Nginx添加认证\" class=\"headerlink\" title=\"Nginx添加认证\"></a>Nginx添加认证</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">   add_header Access-Control-Allow-Headers Content-Type,Authorization;</span><br><span class=\"line\">   add_header Access-Control-Allow-Methods POST;</span><br><span class=\"line\">   add_header Access-Control-Allow-Methods GET;</span><br></pre></td></tr></table></figure>\n<p>添加了对自定义头 Content-Type 和 Authorization 的支持</p>\n<h3 id=\"Axios\"><a href=\"#Axios\" class=\"headerlink\" title=\"Axios\"></a>Axios</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(Url,&#123;</span><br><span class=\"line\">    headers: &#123; </span><br><span class=\"line\">        &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;,</span><br><span class=\"line\">        &apos;Authorization&apos; : token</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).then((response) =&gt; &#123;</span><br><span class=\"line\">    //处理成功回调</span><br><span class=\"line\">&#125;).catch((error) =&gt; &#123;</span><br><span class=\"line\">    //处理失败回调</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"LeetCode刷题系列(1)(question 3)","subtitle":"Longest Substring Without Repeating Characters","date":"2017-12-19T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在[LeetCode](https://leetcode.com)上遇见的有意思、有难度或者有其他精彩答案的题目。\n所用语言为JavaScript。\n\n----------\n\n\n### 题目号码：3（medium）\n-------------\n\n\n> **Longest Substring Without Repeating Characters:**\n> Given a string, find the length of the longest substring without repeating characters.\n> \n> **Examples:**\n> - Given \"abcabcbb\", the answer is \"abc\", which the length is 3.\n> - Given \"bbbbb\", the answer is \"b\", with the length of 1.\n> - Given \"pwwkew\", the answer is \"wke\", with the length of 3.\n\n#### 题意\n返回给出字符串中最长且不含重复字母的子字符串的长度\n\n-------------\n\n#### 思路\n从字符串开头开始分析，依次找到最长的不重复字母的子字符串存储下来，遍历结束后输出其长度。\n\n#### 我的解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    var result = '';\n    var data = '';\n    for(let i=0; i<s.length; i++){\n        if(data.indexOf(s.substr(i,1)) == -1){\n            data += s.substr(i,1);\n        }else{\n            if(data.length > result.length){\n                result = data;\n            }\n            data = data.substr(data.indexOf(s.substr(i,1))+1);\n            data += s.substr(i,1);\n        }\n    }\n    if(data.length > result.length){\n        result = data;\n    }\n    return result.length;\n};\n```\n\n-------------\n\n#### 分析解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    let map = Array(256).fill(-1) ,cur = 0, len = 0;\n    for(let i=0;i<s.length;i++){\n        let at = s[i].charCodeAt();\n        let map_at = map[at];\n        if(map_at !== -1){cur = map_at>cur?map_at:cur;}\n        let tm_len = i-cur+1;\n        len = len>tm_len?len:tm_len;\n        map[at] = i+1;\n    }\n    return len;\n};\n```\n##### 分析如下：\n\n\t1. 变量设置\n\t\t* map：一个256长度的数组，为字母对应的Unicode编码长度，存放每个字母出现的次数\n\t\t* cur：一个遍历中的变量，存储上一个相同字母点的位置\n\t\t* len：存储每次遍历中的最长字符串长度\n\t\t* tm_len：记录实时不重复子字符串的长度\n\t2. 开始遍历给定字符串的每个字符，首先根据这个字母的Unicode编码找到这个字母在map中对应的位置的值，\n    如果这个值不为-1，说明这个字母不是第一次出现，去查找此字母的map位上的数值，\n    对应最近一次出现此字母的位置，做减法，得到此时的不重复子字符串的长度，与历史最高长度len取最大值，直至遍历结束。\n\t3. 既然不需要返回此字符串，那么就应该将逻辑聚焦在长度上，通过数组合理存储最近一次的同字母位置来完成统计。","source":"_posts/LeetCode_3.md","raw":"---\nlayout: post\ntitle: \"LeetCode刷题系列(1)(question 3)\"\nsubtitle: \"Longest Substring Without Repeating Characters\"\ndate: 2017-12-20\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- LeetCode\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在[LeetCode](https://leetcode.com)上遇见的有意思、有难度或者有其他精彩答案的题目。\n所用语言为JavaScript。\n\n----------\n\n\n### 题目号码：3（medium）\n-------------\n\n\n> **Longest Substring Without Repeating Characters:**\n> Given a string, find the length of the longest substring without repeating characters.\n> \n> **Examples:**\n> - Given \"abcabcbb\", the answer is \"abc\", which the length is 3.\n> - Given \"bbbbb\", the answer is \"b\", with the length of 1.\n> - Given \"pwwkew\", the answer is \"wke\", with the length of 3.\n\n#### 题意\n返回给出字符串中最长且不含重复字母的子字符串的长度\n\n-------------\n\n#### 思路\n从字符串开头开始分析，依次找到最长的不重复字母的子字符串存储下来，遍历结束后输出其长度。\n\n#### 我的解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    var result = '';\n    var data = '';\n    for(let i=0; i<s.length; i++){\n        if(data.indexOf(s.substr(i,1)) == -1){\n            data += s.substr(i,1);\n        }else{\n            if(data.length > result.length){\n                result = data;\n            }\n            data = data.substr(data.indexOf(s.substr(i,1))+1);\n            data += s.substr(i,1);\n        }\n    }\n    if(data.length > result.length){\n        result = data;\n    }\n    return result.length;\n};\n```\n\n-------------\n\n#### 分析解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    let map = Array(256).fill(-1) ,cur = 0, len = 0;\n    for(let i=0;i<s.length;i++){\n        let at = s[i].charCodeAt();\n        let map_at = map[at];\n        if(map_at !== -1){cur = map_at>cur?map_at:cur;}\n        let tm_len = i-cur+1;\n        len = len>tm_len?len:tm_len;\n        map[at] = i+1;\n    }\n    return len;\n};\n```\n##### 分析如下：\n\n\t1. 变量设置\n\t\t* map：一个256长度的数组，为字母对应的Unicode编码长度，存放每个字母出现的次数\n\t\t* cur：一个遍历中的变量，存储上一个相同字母点的位置\n\t\t* len：存储每次遍历中的最长字符串长度\n\t\t* tm_len：记录实时不重复子字符串的长度\n\t2. 开始遍历给定字符串的每个字符，首先根据这个字母的Unicode编码找到这个字母在map中对应的位置的值，\n    如果这个值不为-1，说明这个字母不是第一次出现，去查找此字母的map位上的数值，\n    对应最近一次出现此字母的位置，做减法，得到此时的不重复子字符串的长度，与历史最高长度len取最大值，直至遍历结束。\n\t3. 既然不需要返回此字符串，那么就应该将逻辑聚焦在长度上，通过数组合理存储最近一次的同字母位置来完成统计。","slug":"LeetCode_3","published":1,"updated":"2018-01-14T12:21:03.828Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwi000b5xfa847nichx","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上遇见的有意思、有难度或者有其他精彩答案的题目。<br>所用语言为JavaScript。</p>\n<hr>\n<h3 id=\"题目号码：3（medium）\"><a href=\"#题目号码：3（medium）\" class=\"headerlink\" title=\"题目号码：3（medium）\"></a>题目号码：3（medium）</h3><hr>\n<blockquote>\n<p><strong>Longest Substring Without Repeating Characters:</strong><br>Given a string, find the length of the longest substring without repeating characters.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>Given “abcabcbb”, the answer is “abc”, which the length is 3.</li>\n<li>Given “bbbbb”, the answer is “b”, with the length of 1.</li>\n<li>Given “pwwkew”, the answer is “wke”, with the length of 3.</li>\n</ul>\n</blockquote>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>返回给出字符串中最长且不含重复字母的子字符串的长度</p>\n<hr>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>从字符串开头开始分析，依次找到最长的不重复字母的子字符串存储下来，遍历结束后输出其长度。</p>\n<h4 id=\"我的解法\"><a href=\"#我的解法\" class=\"headerlink\" title=\"我的解法\"></a>我的解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class=\"line\">    var result = &apos;&apos;;</span><br><span class=\"line\">    var data = &apos;&apos;;</span><br><span class=\"line\">    for(let i=0; i&lt;s.length; i++)&#123;</span><br><span class=\"line\">        if(data.indexOf(s.substr(i,1)) == -1)&#123;</span><br><span class=\"line\">            data += s.substr(i,1);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            if(data.length &gt; result.length)&#123;</span><br><span class=\"line\">                result = data;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            data = data.substr(data.indexOf(s.substr(i,1))+1);</span><br><span class=\"line\">            data += s.substr(i,1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(data.length &gt; result.length)&#123;</span><br><span class=\"line\">        result = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result.length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"分析解法\"><a href=\"#分析解法\" class=\"headerlink\" title=\"分析解法\"></a>分析解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class=\"line\">    let map = Array(256).fill(-1) ,cur = 0, len = 0;</span><br><span class=\"line\">    for(let i=0;i&lt;s.length;i++)&#123;</span><br><span class=\"line\">        let at = s[i].charCodeAt();</span><br><span class=\"line\">        let map_at = map[at];</span><br><span class=\"line\">        if(map_at !== -1)&#123;cur = map_at&gt;cur?map_at:cur;&#125;</span><br><span class=\"line\">        let tm_len = i-cur+1;</span><br><span class=\"line\">        len = len&gt;tm_len?len:tm_len;</span><br><span class=\"line\">        map[at] = i+1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return len;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><pre><code>1. 变量设置\n    * map：一个256长度的数组，为字母对应的Unicode编码长度，存放每个字母出现的次数\n    * cur：一个遍历中的变量，存储上一个相同字母点的位置\n    * len：存储每次遍历中的最长字符串长度\n    * tm_len：记录实时不重复子字符串的长度\n2. 开始遍历给定字符串的每个字符，首先根据这个字母的Unicode编码找到这个字母在map中对应的位置的值，\n如果这个值不为-1，说明这个字母不是第一次出现，去查找此字母的map位上的数值，\n对应最近一次出现此字母的位置，做减法，得到此时的不重复子字符串的长度，与历史最高长度len取最大值，直至遍历结束。\n3. 既然不需要返回此字符串，那么就应该将逻辑聚焦在长度上，通过数组合理存储最近一次的同字母位置来完成统计。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上遇见的有意思、有难度或者有其他精彩答案的题目。<br>所用语言为JavaScript。</p>\n<hr>\n<h3 id=\"题目号码：3（medium）\"><a href=\"#题目号码：3（medium）\" class=\"headerlink\" title=\"题目号码：3（medium）\"></a>题目号码：3（medium）</h3><hr>\n<blockquote>\n<p><strong>Longest Substring Without Repeating Characters:</strong><br>Given a string, find the length of the longest substring without repeating characters.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>Given “abcabcbb”, the answer is “abc”, which the length is 3.</li>\n<li>Given “bbbbb”, the answer is “b”, with the length of 1.</li>\n<li>Given “pwwkew”, the answer is “wke”, with the length of 3.</li>\n</ul>\n</blockquote>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>返回给出字符串中最长且不含重复字母的子字符串的长度</p>\n<hr>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>从字符串开头开始分析，依次找到最长的不重复字母的子字符串存储下来，遍历结束后输出其长度。</p>\n<h4 id=\"我的解法\"><a href=\"#我的解法\" class=\"headerlink\" title=\"我的解法\"></a>我的解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class=\"line\">    var result = &apos;&apos;;</span><br><span class=\"line\">    var data = &apos;&apos;;</span><br><span class=\"line\">    for(let i=0; i&lt;s.length; i++)&#123;</span><br><span class=\"line\">        if(data.indexOf(s.substr(i,1)) == -1)&#123;</span><br><span class=\"line\">            data += s.substr(i,1);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            if(data.length &gt; result.length)&#123;</span><br><span class=\"line\">                result = data;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            data = data.substr(data.indexOf(s.substr(i,1))+1);</span><br><span class=\"line\">            data += s.substr(i,1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(data.length &gt; result.length)&#123;</span><br><span class=\"line\">        result = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result.length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"分析解法\"><a href=\"#分析解法\" class=\"headerlink\" title=\"分析解法\"></a>分析解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class=\"line\">    let map = Array(256).fill(-1) ,cur = 0, len = 0;</span><br><span class=\"line\">    for(let i=0;i&lt;s.length;i++)&#123;</span><br><span class=\"line\">        let at = s[i].charCodeAt();</span><br><span class=\"line\">        let map_at = map[at];</span><br><span class=\"line\">        if(map_at !== -1)&#123;cur = map_at&gt;cur?map_at:cur;&#125;</span><br><span class=\"line\">        let tm_len = i-cur+1;</span><br><span class=\"line\">        len = len&gt;tm_len?len:tm_len;</span><br><span class=\"line\">        map[at] = i+1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return len;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><pre><code>1. 变量设置\n    * map：一个256长度的数组，为字母对应的Unicode编码长度，存放每个字母出现的次数\n    * cur：一个遍历中的变量，存储上一个相同字母点的位置\n    * len：存储每次遍历中的最长字符串长度\n    * tm_len：记录实时不重复子字符串的长度\n2. 开始遍历给定字符串的每个字符，首先根据这个字母的Unicode编码找到这个字母在map中对应的位置的值，\n如果这个值不为-1，说明这个字母不是第一次出现，去查找此字母的map位上的数值，\n对应最近一次出现此字母的位置，做减法，得到此时的不重复子字符串的长度，与历史最高长度len取最大值，直至遍历结束。\n3. 既然不需要返回此字符串，那么就应该将逻辑聚焦在长度上，通过数组合理存储最近一次的同字母位置来完成统计。\n</code></pre>"},{"layout":"post","title":"浅谈Promise","date":"2018-03-24T16:00:00.000Z","author":"Ai Shuangying","_content":"\n----------\n\n最近看到一个问题，如下：\n\n```\nfor (var i = 0; i < 5; i++) {\n    setTimeout(function() {\n        console.log(i);\n    }, 1000);\n}\n\nconsole.log(i);\n```\n\n这个很简单，输出是 5 -> 5 5 5 5 5\n\n这里主要涉及到 JS 中同步和异步代码的区别、变量作用域和定时器工作机制的内容。\n\n-------------------------\n\n那么如果我想要的输出是 5 -> 0 1 2 3 4呢？\n\n第一个想法就是需要闭包，那么用箭头函数来处理\n\n```\nfor (var i = 0; i < 5; i++) {\n    ((i) => {\n        setTimeout(function() {\n            console.log(i);\n        }, 1000);\n    })(i) //声明立刻执行\n}\n\nconsole.log(i);\n```\n\n输出是 5 -> 0 1 2 3 4 没有问题\n\n那么如果借助 JS 中基本类型的参数传递是按值传递的特征，就可以对上面的函数做个更优雅的处理\n\n```\nvar output = function (i) {\n    setTimeout(function() {\n        console.log(i);\n    }, 1000);\n};\nfor (var i = 0; i < 5; i++) {\n    output(i);  //传入当时的值\n}\n\nconsole.log(i);\n```\n\n没有问题。\n\n----------\n\n那么如果我想要的输出是 0 -> 1 -> 2 -> 3 -> 4 -> 5 呢？\n\n这个问题并不是单纯的想要隔一秒输出一个数，那样的话用粗暴的 1000 * i 的延迟也可以做到\n\n这个问题其实可以理解为 几个任务按顺序做，一个做完做下一个，直至全部完成再执行循环外的函数\n\n引入[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n```\nnew Promise( function(resolve, reject) {...} /* executor */  );\n```\nexecutor是带有 resolve 和 reject 两个参数的函数 。\n\nPromise构造函数执行时立即调用executor 函数， resolve 和 reject 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回新建对象前被调用）。\n\nresolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled（完成）或rejected（失败）。\n\nexecutor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled，或者在发生错误时将它的状态改为rejected。\n\n如果在executor函数中抛出一个错误，那么该promise 状态为rejected。executor函数的返回值被忽略。\n\n\n\n相关方法：\n\nPromise.all(iterable)\n\n    这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。\n\n    这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。\n\n    Promise.all方法常被用于处理多个promise对象的状态集合。\n\nPromise.race(iterable)\n\n    当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。\n\nPromise.reject(reason)\n    \n    返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法\n\nPromise.resolve(value)\n\n    返回一个状态由给定value决定的Promise对象。\n\n    如果该值是一个Promise对象，则直接返回该对象；\n\n    如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；否则的话(该value为空，基本类型或者不带then方法的对象),返回的Promise对象状态为fulfilled，并且将该value传递给对应的then方法。\n\n    通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。\n\n了解了这些，就可以着手改写上面的代码\n\n```\nconst tasks = []; // 这里存放异步操作的 Promise\nconst output = (i) => new Promise((resolve) => {\n    setTimeout(() => {\n        console.log(i);\n        resolve();\n    }, 1000 * i);\n});\n\n// 生成全部的异步操作\nfor (var i = 0; i < 5; i++) {\n    tasks.push(output(i));\n}\n\n// 异步操作完成之后，输出最后的 i\nPromise.all(tasks).then(() => {\n    setTimeout(() => {\n        console.log(i);\n    }, 1000);\n});\n```\n\n完美。（当然这里没有处理 Promise 的 reject）\n\n-----------------------------\n\n尝试ES7 [async function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function)\n```\nasync function name([param[, param[, ... param]]]) { statements }\n```\nname            函数名称。\nparam           要传递给函数的参数的名称。\nstatements      函数体语句。\n\n当调用一个 async 函数时，会返回一个 Promise 对象。\n\n当这个 async 函数返回一个值时，Promise 的 resolve 方法会负责传递这个值；当 async 函数抛出异常时，Promise 的 reject 方法也会传递这个异常值。\n\nasync 函数中可能会有 await 表达式，这会使 async 函数暂停执行，等待表达式中的 Promise 解析完成后继续执行 async 函数并返回解决结果。\n\n改写上面的代码\n\n```\nconst sleep = (timeountMS) => new Promise((resolve) => {\n    setTimeout(resolve, timeountMS);\n});\n\n(async () => {  // 声明即执行的 async 函数表达式\n    for (var i = 0; i < 5; i++) {\n        await sleep(1000);\n        console.log(i);\n    }\n\n    await sleep(1000);\n    console.log(i);\n})();\n```\n\n问题解决。","source":"_posts/Promise.md","raw":"---\nlayout: post\ntitle: \"浅谈Promise\"\ndate: 2018-3-25\nauthor: \"Ai Shuangying\"\ntags:\n\t- ES6\n---\n\n----------\n\n最近看到一个问题，如下：\n\n```\nfor (var i = 0; i < 5; i++) {\n    setTimeout(function() {\n        console.log(i);\n    }, 1000);\n}\n\nconsole.log(i);\n```\n\n这个很简单，输出是 5 -> 5 5 5 5 5\n\n这里主要涉及到 JS 中同步和异步代码的区别、变量作用域和定时器工作机制的内容。\n\n-------------------------\n\n那么如果我想要的输出是 5 -> 0 1 2 3 4呢？\n\n第一个想法就是需要闭包，那么用箭头函数来处理\n\n```\nfor (var i = 0; i < 5; i++) {\n    ((i) => {\n        setTimeout(function() {\n            console.log(i);\n        }, 1000);\n    })(i) //声明立刻执行\n}\n\nconsole.log(i);\n```\n\n输出是 5 -> 0 1 2 3 4 没有问题\n\n那么如果借助 JS 中基本类型的参数传递是按值传递的特征，就可以对上面的函数做个更优雅的处理\n\n```\nvar output = function (i) {\n    setTimeout(function() {\n        console.log(i);\n    }, 1000);\n};\nfor (var i = 0; i < 5; i++) {\n    output(i);  //传入当时的值\n}\n\nconsole.log(i);\n```\n\n没有问题。\n\n----------\n\n那么如果我想要的输出是 0 -> 1 -> 2 -> 3 -> 4 -> 5 呢？\n\n这个问题并不是单纯的想要隔一秒输出一个数，那样的话用粗暴的 1000 * i 的延迟也可以做到\n\n这个问题其实可以理解为 几个任务按顺序做，一个做完做下一个，直至全部完成再执行循环外的函数\n\n引入[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n```\nnew Promise( function(resolve, reject) {...} /* executor */  );\n```\nexecutor是带有 resolve 和 reject 两个参数的函数 。\n\nPromise构造函数执行时立即调用executor 函数， resolve 和 reject 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回新建对象前被调用）。\n\nresolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled（完成）或rejected（失败）。\n\nexecutor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled，或者在发生错误时将它的状态改为rejected。\n\n如果在executor函数中抛出一个错误，那么该promise 状态为rejected。executor函数的返回值被忽略。\n\n\n\n相关方法：\n\nPromise.all(iterable)\n\n    这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。\n\n    这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。\n\n    Promise.all方法常被用于处理多个promise对象的状态集合。\n\nPromise.race(iterable)\n\n    当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。\n\nPromise.reject(reason)\n    \n    返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法\n\nPromise.resolve(value)\n\n    返回一个状态由给定value决定的Promise对象。\n\n    如果该值是一个Promise对象，则直接返回该对象；\n\n    如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；否则的话(该value为空，基本类型或者不带then方法的对象),返回的Promise对象状态为fulfilled，并且将该value传递给对应的then方法。\n\n    通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。\n\n了解了这些，就可以着手改写上面的代码\n\n```\nconst tasks = []; // 这里存放异步操作的 Promise\nconst output = (i) => new Promise((resolve) => {\n    setTimeout(() => {\n        console.log(i);\n        resolve();\n    }, 1000 * i);\n});\n\n// 生成全部的异步操作\nfor (var i = 0; i < 5; i++) {\n    tasks.push(output(i));\n}\n\n// 异步操作完成之后，输出最后的 i\nPromise.all(tasks).then(() => {\n    setTimeout(() => {\n        console.log(i);\n    }, 1000);\n});\n```\n\n完美。（当然这里没有处理 Promise 的 reject）\n\n-----------------------------\n\n尝试ES7 [async function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function)\n```\nasync function name([param[, param[, ... param]]]) { statements }\n```\nname            函数名称。\nparam           要传递给函数的参数的名称。\nstatements      函数体语句。\n\n当调用一个 async 函数时，会返回一个 Promise 对象。\n\n当这个 async 函数返回一个值时，Promise 的 resolve 方法会负责传递这个值；当 async 函数抛出异常时，Promise 的 reject 方法也会传递这个异常值。\n\nasync 函数中可能会有 await 表达式，这会使 async 函数暂停执行，等待表达式中的 Promise 解析完成后继续执行 async 函数并返回解决结果。\n\n改写上面的代码\n\n```\nconst sleep = (timeountMS) => new Promise((resolve) => {\n    setTimeout(resolve, timeountMS);\n});\n\n(async () => {  // 声明即执行的 async 函数表达式\n    for (var i = 0; i < 5; i++) {\n        await sleep(1000);\n        console.log(i);\n    }\n\n    await sleep(1000);\n    console.log(i);\n})();\n```\n\n问题解决。","slug":"Promise","published":1,"updated":"2018-04-14T01:41:51.301Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwj000d5xfaf99iaofi","content":"<hr>\n<p>最近看到一个问题，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">    setTimeout(function() &#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(i);</span><br></pre></td></tr></table></figure>\n<p>这个很简单，输出是 5 -&gt; 5 5 5 5 5</p>\n<p>这里主要涉及到 JS 中同步和异步代码的区别、变量作用域和定时器工作机制的内容。</p>\n<hr>\n<p>那么如果我想要的输出是 5 -&gt; 0 1 2 3 4呢？</p>\n<p>第一个想法就是需要闭包，那么用箭头函数来处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">    ((i) =&gt; &#123;</span><br><span class=\"line\">        setTimeout(function() &#123;</span><br><span class=\"line\">            console.log(i);</span><br><span class=\"line\">        &#125;, 1000);</span><br><span class=\"line\">    &#125;)(i) //声明立刻执行</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(i);</span><br></pre></td></tr></table></figure>\n<p>输出是 5 -&gt; 0 1 2 3 4 没有问题</p>\n<p>那么如果借助 JS 中基本类型的参数传递是按值传递的特征，就可以对上面的函数做个更优雅的处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var output = function (i) &#123;</span><br><span class=\"line\">    setTimeout(function() &#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">    output(i);  //传入当时的值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(i);</span><br></pre></td></tr></table></figure>\n<p>没有问题。</p>\n<hr>\n<p>那么如果我想要的输出是 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 呢？</p>\n<p>这个问题并不是单纯的想要隔一秒输出一个数，那样的话用粗暴的 1000 * i 的延迟也可以做到</p>\n<p>这个问题其实可以理解为 几个任务按顺序做，一个做完做下一个，直至全部完成再执行循环外的函数</p>\n<p>引入<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">Promise</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise( function(resolve, reject) &#123;...&#125; /* executor */  );</span><br></pre></td></tr></table></figure>\n<p>executor是带有 resolve 和 reject 两个参数的函数 。</p>\n<p>Promise构造函数执行时立即调用executor 函数， resolve 和 reject 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回新建对象前被调用）。</p>\n<p>resolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled（完成）或rejected（失败）。</p>\n<p>executor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled，或者在发生错误时将它的状态改为rejected。</p>\n<p>如果在executor函数中抛出一个错误，那么该promise 状态为rejected。executor函数的返回值被忽略。</p>\n<p>相关方法：</p>\n<p>Promise.all(iterable)</p>\n<pre><code>这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。\n\n这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。\n\nPromise.all方法常被用于处理多个promise对象的状态集合。\n</code></pre><p>Promise.race(iterable)</p>\n<pre><code>当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。\n</code></pre><p>Promise.reject(reason)</p>\n<pre><code>返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法\n</code></pre><p>Promise.resolve(value)</p>\n<pre><code>返回一个状态由给定value决定的Promise对象。\n\n如果该值是一个Promise对象，则直接返回该对象；\n\n如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；否则的话(该value为空，基本类型或者不带then方法的对象),返回的Promise对象状态为fulfilled，并且将该value传递给对应的then方法。\n\n通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。\n</code></pre><p>了解了这些，就可以着手改写上面的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const tasks = []; // 这里存放异步操作的 Promise</span><br><span class=\"line\">const output = (i) =&gt; new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;, 1000 * i);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成全部的异步操作</span><br><span class=\"line\">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">    tasks.push(output(i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 异步操作完成之后，输出最后的 i</span><br><span class=\"line\">Promise.all(tasks).then(() =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>完美。（当然这里没有处理 Promise 的 reject）</p>\n<hr>\n<p>尝试ES7 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function\" target=\"_blank\" rel=\"noopener\">async function</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function name([param[, param[, ... param]]]) &#123; statements &#125;</span><br></pre></td></tr></table></figure></p>\n<p>name            函数名称。<br>param           要传递给函数的参数的名称。<br>statements      函数体语句。</p>\n<p>当调用一个 async 函数时，会返回一个 Promise 对象。</p>\n<p>当这个 async 函数返回一个值时，Promise 的 resolve 方法会负责传递这个值；当 async 函数抛出异常时，Promise 的 reject 方法也会传递这个异常值。</p>\n<p>async 函数中可能会有 await 表达式，这会使 async 函数暂停执行，等待表达式中的 Promise 解析完成后继续执行 async 函数并返回解决结果。</p>\n<p>改写上面的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const sleep = (timeountMS) =&gt; new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(resolve, timeountMS);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(async () =&gt; &#123;  // 声明即执行的 async 函数表达式</span><br><span class=\"line\">    for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">        await sleep(1000);</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    await sleep(1000);</span><br><span class=\"line\">    console.log(i);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>问题解决。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>最近看到一个问题，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">    setTimeout(function() &#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(i);</span><br></pre></td></tr></table></figure>\n<p>这个很简单，输出是 5 -&gt; 5 5 5 5 5</p>\n<p>这里主要涉及到 JS 中同步和异步代码的区别、变量作用域和定时器工作机制的内容。</p>\n<hr>\n<p>那么如果我想要的输出是 5 -&gt; 0 1 2 3 4呢？</p>\n<p>第一个想法就是需要闭包，那么用箭头函数来处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">    ((i) =&gt; &#123;</span><br><span class=\"line\">        setTimeout(function() &#123;</span><br><span class=\"line\">            console.log(i);</span><br><span class=\"line\">        &#125;, 1000);</span><br><span class=\"line\">    &#125;)(i) //声明立刻执行</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(i);</span><br></pre></td></tr></table></figure>\n<p>输出是 5 -&gt; 0 1 2 3 4 没有问题</p>\n<p>那么如果借助 JS 中基本类型的参数传递是按值传递的特征，就可以对上面的函数做个更优雅的处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var output = function (i) &#123;</span><br><span class=\"line\">    setTimeout(function() &#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">    output(i);  //传入当时的值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(i);</span><br></pre></td></tr></table></figure>\n<p>没有问题。</p>\n<hr>\n<p>那么如果我想要的输出是 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 呢？</p>\n<p>这个问题并不是单纯的想要隔一秒输出一个数，那样的话用粗暴的 1000 * i 的延迟也可以做到</p>\n<p>这个问题其实可以理解为 几个任务按顺序做，一个做完做下一个，直至全部完成再执行循环外的函数</p>\n<p>引入<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">Promise</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise( function(resolve, reject) &#123;...&#125; /* executor */  );</span><br></pre></td></tr></table></figure>\n<p>executor是带有 resolve 和 reject 两个参数的函数 。</p>\n<p>Promise构造函数执行时立即调用executor 函数， resolve 和 reject 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回新建对象前被调用）。</p>\n<p>resolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled（完成）或rejected（失败）。</p>\n<p>executor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled，或者在发生错误时将它的状态改为rejected。</p>\n<p>如果在executor函数中抛出一个错误，那么该promise 状态为rejected。executor函数的返回值被忽略。</p>\n<p>相关方法：</p>\n<p>Promise.all(iterable)</p>\n<pre><code>这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。\n\n这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。\n\nPromise.all方法常被用于处理多个promise对象的状态集合。\n</code></pre><p>Promise.race(iterable)</p>\n<pre><code>当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。\n</code></pre><p>Promise.reject(reason)</p>\n<pre><code>返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法\n</code></pre><p>Promise.resolve(value)</p>\n<pre><code>返回一个状态由给定value决定的Promise对象。\n\n如果该值是一个Promise对象，则直接返回该对象；\n\n如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；否则的话(该value为空，基本类型或者不带then方法的对象),返回的Promise对象状态为fulfilled，并且将该value传递给对应的then方法。\n\n通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。\n</code></pre><p>了解了这些，就可以着手改写上面的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const tasks = []; // 这里存放异步操作的 Promise</span><br><span class=\"line\">const output = (i) =&gt; new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;, 1000 * i);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成全部的异步操作</span><br><span class=\"line\">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">    tasks.push(output(i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 异步操作完成之后，输出最后的 i</span><br><span class=\"line\">Promise.all(tasks).then(() =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>完美。（当然这里没有处理 Promise 的 reject）</p>\n<hr>\n<p>尝试ES7 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function\" target=\"_blank\" rel=\"noopener\">async function</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function name([param[, param[, ... param]]]) &#123; statements &#125;</span><br></pre></td></tr></table></figure></p>\n<p>name            函数名称。<br>param           要传递给函数的参数的名称。<br>statements      函数体语句。</p>\n<p>当调用一个 async 函数时，会返回一个 Promise 对象。</p>\n<p>当这个 async 函数返回一个值时，Promise 的 resolve 方法会负责传递这个值；当 async 函数抛出异常时，Promise 的 reject 方法也会传递这个异常值。</p>\n<p>async 函数中可能会有 await 表达式，这会使 async 函数暂停执行，等待表达式中的 Promise 解析完成后继续执行 async 函数并返回解决结果。</p>\n<p>改写上面的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const sleep = (timeountMS) =&gt; new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(resolve, timeountMS);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(async () =&gt; &#123;  // 声明即执行的 async 函数表达式</span><br><span class=\"line\">    for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class=\"line\">        await sleep(1000);</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    await sleep(1000);</span><br><span class=\"line\">    console.log(i);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>问题解决。</p>\n"},{"layout":"post","title":"react-native-echarts在安卓下可滑动的问题","date":"2018-03-15T16:00:00.000Z","author":"Ai Shuangying","_content":"\n----------\n\n在最近的项目里简单使用了[react-native-echarts](https://github.com/somonus/react-native-echarts)，引入和配置都很简单，但是做出的表格在安卓下却存在一个很大的容器使之可以滑动从而导致大片的空白，在IOS下则没有这个现象，这里记录下解决办法。\n\n\n打开源码node_modules\\native-echarts\\src\\components\\Echarts\\index.js里面\n\n```\n<WebView\n  ref=\"chart\"\n  scrollEnabled = {false}\n  injectedJavaScript = {renderChart(this.props)}\n  style={{\n    height: this.props.height || 400,\n    backgroundColor: this.props.backgroundColor || 'transparent'\n  }}\n  scalesPageToFit={false}          \n  source={require('./tpl.html')}\n  onMessage={event => this.props.onPress ? this.props.onPress(JSON.parse(event.nativeEvent.data)) : null}\n/>\n```\n\n里面scalesPageToFit={false}就是导致这个问题的原因。\n\n但是安卓和IOS对这个属性的处理是不一致的，或者说是相反的，所以我们需要针对系统来做判断。\n\n修改后的版本：\n\nscalesPageToFit={Platform.OS === 'ios' ? false : true}\n\n不要忘了从react-native 中引入Platform\n\ndone()","source":"_posts/React-native-echarts在安卓下可滑动的问题.md","raw":"---\nlayout: post\ntitle: \"react-native-echarts在安卓下可滑动的问题\"\ndate: 2018-3-16\nauthor: \"Ai Shuangying\"\ntags:\n\t- ReactNative\n---\n\n----------\n\n在最近的项目里简单使用了[react-native-echarts](https://github.com/somonus/react-native-echarts)，引入和配置都很简单，但是做出的表格在安卓下却存在一个很大的容器使之可以滑动从而导致大片的空白，在IOS下则没有这个现象，这里记录下解决办法。\n\n\n打开源码node_modules\\native-echarts\\src\\components\\Echarts\\index.js里面\n\n```\n<WebView\n  ref=\"chart\"\n  scrollEnabled = {false}\n  injectedJavaScript = {renderChart(this.props)}\n  style={{\n    height: this.props.height || 400,\n    backgroundColor: this.props.backgroundColor || 'transparent'\n  }}\n  scalesPageToFit={false}          \n  source={require('./tpl.html')}\n  onMessage={event => this.props.onPress ? this.props.onPress(JSON.parse(event.nativeEvent.data)) : null}\n/>\n```\n\n里面scalesPageToFit={false}就是导致这个问题的原因。\n\n但是安卓和IOS对这个属性的处理是不一致的，或者说是相反的，所以我们需要针对系统来做判断。\n\n修改后的版本：\n\nscalesPageToFit={Platform.OS === 'ios' ? false : true}\n\n不要忘了从react-native 中引入Platform\n\ndone()","slug":"React-native-echarts在安卓下可滑动的问题","published":1,"updated":"2018-04-10T06:27:12.794Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwl000f5xfauh46hh5b","content":"<hr>\n<p>在最近的项目里简单使用了<a href=\"https://github.com/somonus/react-native-echarts\" target=\"_blank\" rel=\"noopener\">react-native-echarts</a>，引入和配置都很简单，但是做出的表格在安卓下却存在一个很大的容器使之可以滑动从而导致大片的空白，在IOS下则没有这个现象，这里记录下解决办法。</p>\n<p>打开源码node_modules\\native-echarts\\src\\components\\Echarts\\index.js里面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;WebView</span><br><span class=\"line\">  ref=&quot;chart&quot;</span><br><span class=\"line\">  scrollEnabled = &#123;false&#125;</span><br><span class=\"line\">  injectedJavaScript = &#123;renderChart(this.props)&#125;</span><br><span class=\"line\">  style=&#123;&#123;</span><br><span class=\"line\">    height: this.props.height || 400,</span><br><span class=\"line\">    backgroundColor: this.props.backgroundColor || &apos;transparent&apos;</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">  scalesPageToFit=&#123;false&#125;          </span><br><span class=\"line\">  source=&#123;require(&apos;./tpl.html&apos;)&#125;</span><br><span class=\"line\">  onMessage=&#123;event =&gt; this.props.onPress ? this.props.onPress(JSON.parse(event.nativeEvent.data)) : null&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>里面scalesPageToFit={false}就是导致这个问题的原因。</p>\n<p>但是安卓和IOS对这个属性的处理是不一致的，或者说是相反的，所以我们需要针对系统来做判断。</p>\n<p>修改后的版本：</p>\n<p>scalesPageToFit={Platform.OS === ‘ios’ ? false : true}</p>\n<p>不要忘了从react-native 中引入Platform</p>\n<p>done()</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>在最近的项目里简单使用了<a href=\"https://github.com/somonus/react-native-echarts\" target=\"_blank\" rel=\"noopener\">react-native-echarts</a>，引入和配置都很简单，但是做出的表格在安卓下却存在一个很大的容器使之可以滑动从而导致大片的空白，在IOS下则没有这个现象，这里记录下解决办法。</p>\n<p>打开源码node_modules\\native-echarts\\src\\components\\Echarts\\index.js里面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;WebView</span><br><span class=\"line\">  ref=&quot;chart&quot;</span><br><span class=\"line\">  scrollEnabled = &#123;false&#125;</span><br><span class=\"line\">  injectedJavaScript = &#123;renderChart(this.props)&#125;</span><br><span class=\"line\">  style=&#123;&#123;</span><br><span class=\"line\">    height: this.props.height || 400,</span><br><span class=\"line\">    backgroundColor: this.props.backgroundColor || &apos;transparent&apos;</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">  scalesPageToFit=&#123;false&#125;          </span><br><span class=\"line\">  source=&#123;require(&apos;./tpl.html&apos;)&#125;</span><br><span class=\"line\">  onMessage=&#123;event =&gt; this.props.onPress ? this.props.onPress(JSON.parse(event.nativeEvent.data)) : null&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>里面scalesPageToFit={false}就是导致这个问题的原因。</p>\n<p>但是安卓和IOS对这个属性的处理是不一致的，或者说是相反的，所以我们需要针对系统来做判断。</p>\n<p>修改后的版本：</p>\n<p>scalesPageToFit={Platform.OS === ‘ios’ ? false : true}</p>\n<p>不要忘了从react-native 中引入Platform</p>\n<p>done()</p>\n"},{"layout":"post","title":"Sublime使用SFTP上传文件","date":"2018-03-12T16:00:00.000Z","author":"Ai Shuangying","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n----------\n\n鉴于我用的hexo来搭建博客，generate之后需要把静态文件上传到服务器上，然后才能在线上预览，但是每次都要打开FileZilla来上传很麻烦，所以这次我记录下来在Sublime里直接上传文件到服务器，其实很简单。\n\n\n### 安装SFTP插件\n-------------\n\n``` bash\ncommand + shift + p 打开 Package Control\n输入install来查询 install Package\n输入SFTP安装即可\n```\n\n### 配置SFTP\n-------------\n\n```\nSublime中左侧目录上选择需要存放待上传文件的本地文件夹右键，SFTP选项 Map to Remote...\n如果已经配置了要修改就选择Edit Remote Mapping\n在打开的配置信息里将下面五项修改好\n\n\t\"host\": \"example.com\",  \n    \"user\": \"username\",  \n    \"password\": \"password\",  \n    \"port\": \"22\",  \n      \n    \"remote_path\": \"/example/path/\",\n\n填入自己服务器对应的配置信息保存即可。\n\n然后就可以使用 Upload folder来将本地文件上传至设定好的服务器路径文件夹下啦，是不是很简单。\n```\n\n如果不太清楚Sublime的基础使用，可以参考[Sulime安装插件](https://www.cnblogs.com/shiy/p/6507354.html)\n\n另外如果提示需要注册，可以参考[SFTP注册码](https://blog.csdn.net/together_cz/article/details/74763474)来配置。\n\n### 报错处理\n-------------\n\n上传过程中亲测可能会遇到Encoding problem的报错，其实就是你的文件及文件夹命名使用了非UTF-8编码导致的错误\n\n比如我的文件有的使用了中文命名，那么上传过程中就会触发报错，如何解决呢？\n\n[Encoding problem with SFTP](https://forum.sublimetext.com/t/encoding-problem-with-sftp-and-syncing-folder/13301)\n\n既然我使用了中文，那么我就查一下看中文如何编码，参考\n\n[编码格式介绍](http://www.cnblogs.com/lizhenghn/p/3690406.html)\n\n可以看到我需要的是GBK编码格式，再次打开配置文件，里面有一行，默认是注释的，修改过来\n\n```\n\t\"remote_encoding\": \"GBK\",\n```\n\n如果是其他语言引起的报错请自行查阅。\n\n这下就好了，每次generate完直接右键Upload，网页刷新就可以看到啦！\n\n\n------------\n\n哇哇哇\n\n这里除了一点问题，以上是在Windows系统下设置并成功的，但是今天在Mac下试了下，必须使用UTF-8才能上传成功，这是为什么呢？？\n\n搜索了一下也没找到什么头绪，先留个坑，有同学知道的话欢迎联系我 aishuangying@gmail.com\n\n","source":"_posts/Sublime使用SFTP上传文件.md","raw":"---\nlayout: post\ntitle: \"Sublime使用SFTP上传文件\"\ndate: 2018-3-13\nauthor: \"Ai Shuangying\"\ntags:\n\t- Sublime\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n----------\n\n鉴于我用的hexo来搭建博客，generate之后需要把静态文件上传到服务器上，然后才能在线上预览，但是每次都要打开FileZilla来上传很麻烦，所以这次我记录下来在Sublime里直接上传文件到服务器，其实很简单。\n\n\n### 安装SFTP插件\n-------------\n\n``` bash\ncommand + shift + p 打开 Package Control\n输入install来查询 install Package\n输入SFTP安装即可\n```\n\n### 配置SFTP\n-------------\n\n```\nSublime中左侧目录上选择需要存放待上传文件的本地文件夹右键，SFTP选项 Map to Remote...\n如果已经配置了要修改就选择Edit Remote Mapping\n在打开的配置信息里将下面五项修改好\n\n\t\"host\": \"example.com\",  \n    \"user\": \"username\",  \n    \"password\": \"password\",  \n    \"port\": \"22\",  \n      \n    \"remote_path\": \"/example/path/\",\n\n填入自己服务器对应的配置信息保存即可。\n\n然后就可以使用 Upload folder来将本地文件上传至设定好的服务器路径文件夹下啦，是不是很简单。\n```\n\n如果不太清楚Sublime的基础使用，可以参考[Sulime安装插件](https://www.cnblogs.com/shiy/p/6507354.html)\n\n另外如果提示需要注册，可以参考[SFTP注册码](https://blog.csdn.net/together_cz/article/details/74763474)来配置。\n\n### 报错处理\n-------------\n\n上传过程中亲测可能会遇到Encoding problem的报错，其实就是你的文件及文件夹命名使用了非UTF-8编码导致的错误\n\n比如我的文件有的使用了中文命名，那么上传过程中就会触发报错，如何解决呢？\n\n[Encoding problem with SFTP](https://forum.sublimetext.com/t/encoding-problem-with-sftp-and-syncing-folder/13301)\n\n既然我使用了中文，那么我就查一下看中文如何编码，参考\n\n[编码格式介绍](http://www.cnblogs.com/lizhenghn/p/3690406.html)\n\n可以看到我需要的是GBK编码格式，再次打开配置文件，里面有一行，默认是注释的，修改过来\n\n```\n\t\"remote_encoding\": \"GBK\",\n```\n\n如果是其他语言引起的报错请自行查阅。\n\n这下就好了，每次generate完直接右键Upload，网页刷新就可以看到啦！\n\n\n------------\n\n哇哇哇\n\n这里除了一点问题，以上是在Windows系统下设置并成功的，但是今天在Mac下试了下，必须使用UTF-8才能上传成功，这是为什么呢？？\n\n搜索了一下也没找到什么头绪，先留个坑，有同学知道的话欢迎联系我 aishuangying@gmail.com\n\n","slug":"Sublime使用SFTP上传文件","published":1,"updated":"2018-04-10T02:53:36.375Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwn000h5xfaqjl5g6pw","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<hr>\n<p>鉴于我用的hexo来搭建博客，generate之后需要把静态文件上传到服务器上，然后才能在线上预览，但是每次都要打开FileZilla来上传很麻烦，所以这次我记录下来在Sublime里直接上传文件到服务器，其实很简单。</p>\n<h3 id=\"安装SFTP插件\"><a href=\"#安装SFTP插件\" class=\"headerlink\" title=\"安装SFTP插件\"></a>安装SFTP插件</h3><hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">command</span> + <span class=\"built_in\">shift</span> + p 打开 Package Control</span><br><span class=\"line\">输入install来查询 install Package</span><br><span class=\"line\">输入SFTP安装即可</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置SFTP\"><a href=\"#配置SFTP\" class=\"headerlink\" title=\"配置SFTP\"></a>配置SFTP</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sublime中左侧目录上选择需要存放待上传文件的本地文件夹右键，SFTP选项 Map to Remote...</span><br><span class=\"line\">如果已经配置了要修改就选择Edit Remote Mapping</span><br><span class=\"line\">在打开的配置信息里将下面五项修改好</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;host&quot;: &quot;example.com&quot;,  </span><br><span class=\"line\">    &quot;user&quot;: &quot;username&quot;,  </span><br><span class=\"line\">    &quot;password&quot;: &quot;password&quot;,  </span><br><span class=\"line\">    &quot;port&quot;: &quot;22&quot;,  </span><br><span class=\"line\">      </span><br><span class=\"line\">    &quot;remote_path&quot;: &quot;/example/path/&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">填入自己服务器对应的配置信息保存即可。</span><br><span class=\"line\"></span><br><span class=\"line\">然后就可以使用 Upload folder来将本地文件上传至设定好的服务器路径文件夹下啦，是不是很简单。</span><br></pre></td></tr></table></figure>\n<p>如果不太清楚Sublime的基础使用，可以参考<a href=\"https://www.cnblogs.com/shiy/p/6507354.html\" target=\"_blank\" rel=\"noopener\">Sulime安装插件</a></p>\n<p>另外如果提示需要注册，可以参考<a href=\"https://blog.csdn.net/together_cz/article/details/74763474\" target=\"_blank\" rel=\"noopener\">SFTP注册码</a>来配置。</p>\n<h3 id=\"报错处理\"><a href=\"#报错处理\" class=\"headerlink\" title=\"报错处理\"></a>报错处理</h3><hr>\n<p>上传过程中亲测可能会遇到Encoding problem的报错，其实就是你的文件及文件夹命名使用了非UTF-8编码导致的错误</p>\n<p>比如我的文件有的使用了中文命名，那么上传过程中就会触发报错，如何解决呢？</p>\n<p><a href=\"https://forum.sublimetext.com/t/encoding-problem-with-sftp-and-syncing-folder/13301\" target=\"_blank\" rel=\"noopener\">Encoding problem with SFTP</a></p>\n<p>既然我使用了中文，那么我就查一下看中文如何编码，参考</p>\n<p><a href=\"http://www.cnblogs.com/lizhenghn/p/3690406.html\" target=\"_blank\" rel=\"noopener\">编码格式介绍</a></p>\n<p>可以看到我需要的是GBK编码格式，再次打开配置文件，里面有一行，默认是注释的，修改过来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;remote_encoding&quot;: &quot;GBK&quot;,</span><br></pre></td></tr></table></figure>\n<p>如果是其他语言引起的报错请自行查阅。</p>\n<p>这下就好了，每次generate完直接右键Upload，网页刷新就可以看到啦！</p>\n<hr>\n<p>哇哇哇</p>\n<p>这里除了一点问题，以上是在Windows系统下设置并成功的，但是今天在Mac下试了下，必须使用UTF-8才能上传成功，这是为什么呢？？</p>\n<p>搜索了一下也没找到什么头绪，先留个坑，有同学知道的话欢迎联系我 <a href=\"mailto:aishuangying@gmail.com\" target=\"_blank\" rel=\"noopener\">aishuangying@gmail.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<hr>\n<p>鉴于我用的hexo来搭建博客，generate之后需要把静态文件上传到服务器上，然后才能在线上预览，但是每次都要打开FileZilla来上传很麻烦，所以这次我记录下来在Sublime里直接上传文件到服务器，其实很简单。</p>\n<h3 id=\"安装SFTP插件\"><a href=\"#安装SFTP插件\" class=\"headerlink\" title=\"安装SFTP插件\"></a>安装SFTP插件</h3><hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">command</span> + <span class=\"built_in\">shift</span> + p 打开 Package Control</span><br><span class=\"line\">输入install来查询 install Package</span><br><span class=\"line\">输入SFTP安装即可</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置SFTP\"><a href=\"#配置SFTP\" class=\"headerlink\" title=\"配置SFTP\"></a>配置SFTP</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sublime中左侧目录上选择需要存放待上传文件的本地文件夹右键，SFTP选项 Map to Remote...</span><br><span class=\"line\">如果已经配置了要修改就选择Edit Remote Mapping</span><br><span class=\"line\">在打开的配置信息里将下面五项修改好</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;host&quot;: &quot;example.com&quot;,  </span><br><span class=\"line\">    &quot;user&quot;: &quot;username&quot;,  </span><br><span class=\"line\">    &quot;password&quot;: &quot;password&quot;,  </span><br><span class=\"line\">    &quot;port&quot;: &quot;22&quot;,  </span><br><span class=\"line\">      </span><br><span class=\"line\">    &quot;remote_path&quot;: &quot;/example/path/&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">填入自己服务器对应的配置信息保存即可。</span><br><span class=\"line\"></span><br><span class=\"line\">然后就可以使用 Upload folder来将本地文件上传至设定好的服务器路径文件夹下啦，是不是很简单。</span><br></pre></td></tr></table></figure>\n<p>如果不太清楚Sublime的基础使用，可以参考<a href=\"https://www.cnblogs.com/shiy/p/6507354.html\" target=\"_blank\" rel=\"noopener\">Sulime安装插件</a></p>\n<p>另外如果提示需要注册，可以参考<a href=\"https://blog.csdn.net/together_cz/article/details/74763474\" target=\"_blank\" rel=\"noopener\">SFTP注册码</a>来配置。</p>\n<h3 id=\"报错处理\"><a href=\"#报错处理\" class=\"headerlink\" title=\"报错处理\"></a>报错处理</h3><hr>\n<p>上传过程中亲测可能会遇到Encoding problem的报错，其实就是你的文件及文件夹命名使用了非UTF-8编码导致的错误</p>\n<p>比如我的文件有的使用了中文命名，那么上传过程中就会触发报错，如何解决呢？</p>\n<p><a href=\"https://forum.sublimetext.com/t/encoding-problem-with-sftp-and-syncing-folder/13301\" target=\"_blank\" rel=\"noopener\">Encoding problem with SFTP</a></p>\n<p>既然我使用了中文，那么我就查一下看中文如何编码，参考</p>\n<p><a href=\"http://www.cnblogs.com/lizhenghn/p/3690406.html\" target=\"_blank\" rel=\"noopener\">编码格式介绍</a></p>\n<p>可以看到我需要的是GBK编码格式，再次打开配置文件，里面有一行，默认是注释的，修改过来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;remote_encoding&quot;: &quot;GBK&quot;,</span><br></pre></td></tr></table></figure>\n<p>如果是其他语言引起的报错请自行查阅。</p>\n<p>这下就好了，每次generate完直接右键Upload，网页刷新就可以看到啦！</p>\n<hr>\n<p>哇哇哇</p>\n<p>这里除了一点问题，以上是在Windows系统下设置并成功的，但是今天在Mac下试了下，必须使用UTF-8才能上传成功，这是为什么呢？？</p>\n<p>搜索了一下也没找到什么头绪，先留个坑，有同学知道的话欢迎联系我 <a href=\"mailto:aishuangying@gmail.com\" target=\"_blank\" rel=\"noopener\">aishuangying@gmail.com</a></p>\n"},{"layout":"post","title":"ReactNative路由回调","date":"2018-02-27T16:00:00.000Z","author":"Ai Shuangying","_content":"\n\n所遇问题：希望采用goBack进行页面回退，但需要回退页面触发重绘\n\n解决方法：路由跳转时传参回调函数，重绘页面\n\n----------\n\n因为在页面里使用了react-native-I18n来做国际化，页面内修改语言后需要回退到上个页面，同时期望此页面已经修改了语言，也就是要触发重绘，原有的做法是，通过\n```\nnavigate('****')\n```\n直接跳转到上个页面的路由，但是这样做导致的结果是上一页面从屏幕右侧划出，虽然页面确实重新加载了，但是给用户的回馈很奇怪，所以我决定修正过来，采用\n```\ngoBack()\n```\n方式来回退到上一页面，但这样会发现回退的页面并没有发生变化，也就是没有触发重绘。\n\n考虑到这个问题，我就需要一个函数来确保重绘页面，也就是\n```\n\tforceUpdate(){\n\t    this.setState({I18n: 1});\n\t}\n```\n通过setState来触发重绘，传入的I18n是个无意义的值即可，如果需要重新加载这个页面的数据，也可以放在这个函数里，这样在子页面返回的时候，这个页面就会更新成最新的数据了。\n\n函数有了，下一步就是将这个函数随路由传递到下个页面去\n```\n\tthis.props.navigation.navigate('testChildScreen', { onGoBack: () => this.forceUpdate() }); }\n```\n这里注意通过ES6的写法来绑定this，用bind(this)也可以。\n\n这样参数函数就传递过去了，下面进入子页面\n```\n\tthis.props.navigation.state.params.onGoBack();\n    Alert.alert(null,'success',[{ text: 'OK', onPress: () => this.props.navigation.goBack() }]);\n```\n这里的逻辑是用户修改语言后给一个反馈，点击OK后自动返回上一页面，在goBack之前先调用一下回调函数\n\n好了，这样返回页面后就看到新语言的页面了，但是会发现页面标题并没有变化，也就是说并没有触发navigation的重绘\n```\n\tstatic navigationOptions = ({ navigation }) => {\n    \treturn {\n      \t\theaderTitle: I18n.t('me_title'),\n    \t}\n  \t}\n```\n\n.\n.\n.\n通过查询Stack Overflow后发现navigation的一个类似setState的方法可以触发重绘，修改forceUpdate\n```\n\tforceUpdate(){\n    \tthis.setState({I18n: 1});\n    \tthis.props.navigation.setParams({editState:true });\n  \t}\n```\n这里的setParams就可以触发navigation重绘，传递的editState也是一个无意义的值，同时这个方法也可用于动态修改标题的目的。\n\n问题解决。","source":"_posts/ReactNative路由回调.md","raw":"---\nlayout: post\ntitle: \"ReactNative路由回调\"\ndate: 2018-2-28\nauthor: \"Ai Shuangying\"\ntags:\n\t- ReactNative\n---\n\n\n所遇问题：希望采用goBack进行页面回退，但需要回退页面触发重绘\n\n解决方法：路由跳转时传参回调函数，重绘页面\n\n----------\n\n因为在页面里使用了react-native-I18n来做国际化，页面内修改语言后需要回退到上个页面，同时期望此页面已经修改了语言，也就是要触发重绘，原有的做法是，通过\n```\nnavigate('****')\n```\n直接跳转到上个页面的路由，但是这样做导致的结果是上一页面从屏幕右侧划出，虽然页面确实重新加载了，但是给用户的回馈很奇怪，所以我决定修正过来，采用\n```\ngoBack()\n```\n方式来回退到上一页面，但这样会发现回退的页面并没有发生变化，也就是没有触发重绘。\n\n考虑到这个问题，我就需要一个函数来确保重绘页面，也就是\n```\n\tforceUpdate(){\n\t    this.setState({I18n: 1});\n\t}\n```\n通过setState来触发重绘，传入的I18n是个无意义的值即可，如果需要重新加载这个页面的数据，也可以放在这个函数里，这样在子页面返回的时候，这个页面就会更新成最新的数据了。\n\n函数有了，下一步就是将这个函数随路由传递到下个页面去\n```\n\tthis.props.navigation.navigate('testChildScreen', { onGoBack: () => this.forceUpdate() }); }\n```\n这里注意通过ES6的写法来绑定this，用bind(this)也可以。\n\n这样参数函数就传递过去了，下面进入子页面\n```\n\tthis.props.navigation.state.params.onGoBack();\n    Alert.alert(null,'success',[{ text: 'OK', onPress: () => this.props.navigation.goBack() }]);\n```\n这里的逻辑是用户修改语言后给一个反馈，点击OK后自动返回上一页面，在goBack之前先调用一下回调函数\n\n好了，这样返回页面后就看到新语言的页面了，但是会发现页面标题并没有变化，也就是说并没有触发navigation的重绘\n```\n\tstatic navigationOptions = ({ navigation }) => {\n    \treturn {\n      \t\theaderTitle: I18n.t('me_title'),\n    \t}\n  \t}\n```\n\n.\n.\n.\n通过查询Stack Overflow后发现navigation的一个类似setState的方法可以触发重绘，修改forceUpdate\n```\n\tforceUpdate(){\n    \tthis.setState({I18n: 1});\n    \tthis.props.navigation.setParams({editState:true });\n  \t}\n```\n这里的setParams就可以触发navigation重绘，传递的editState也是一个无意义的值，同时这个方法也可用于动态修改标题的目的。\n\n问题解决。","slug":"ReactNative路由回调","published":1,"updated":"2018-04-10T06:28:41.480Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwp000j5xfazzd20rmg","content":"<p>所遇问题：希望采用goBack进行页面回退，但需要回退页面触发重绘</p>\n<p>解决方法：路由跳转时传参回调函数，重绘页面</p>\n<hr>\n<p>因为在页面里使用了react-native-I18n来做国际化，页面内修改语言后需要回退到上个页面，同时期望此页面已经修改了语言，也就是要触发重绘，原有的做法是，通过<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigate(&apos;****&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>直接跳转到上个页面的路由，但是这样做导致的结果是上一页面从屏幕右侧划出，虽然页面确实重新加载了，但是给用户的回馈很奇怪，所以我决定修正过来，采用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goBack()</span><br></pre></td></tr></table></figure></p>\n<p>方式来回退到上一页面，但这样会发现回退的页面并没有发生变化，也就是没有触发重绘。</p>\n<p>考虑到这个问题，我就需要一个函数来确保重绘页面，也就是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forceUpdate()&#123;</span><br><span class=\"line\">    this.setState(&#123;I18n: 1&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过setState来触发重绘，传入的I18n是个无意义的值即可，如果需要重新加载这个页面的数据，也可以放在这个函数里，这样在子页面返回的时候，这个页面就会更新成最新的数据了。</p>\n<p>函数有了，下一步就是将这个函数随路由传递到下个页面去<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.props.navigation.navigate(&apos;testChildScreen&apos;, &#123; onGoBack: () =&gt; this.forceUpdate() &#125;); &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里注意通过ES6的写法来绑定this，用bind(this)也可以。</p>\n<p>这样参数函数就传递过去了，下面进入子页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.props.navigation.state.params.onGoBack();</span><br><span class=\"line\">   Alert.alert(null,&apos;success&apos;,[&#123; text: &apos;OK&apos;, onPress: () =&gt; this.props.navigation.goBack() &#125;]);</span><br></pre></td></tr></table></figure></p>\n<p>这里的逻辑是用户修改语言后给一个反馈，点击OK后自动返回上一页面，在goBack之前先调用一下回调函数</p>\n<p>好了，这样返回页面后就看到新语言的页面了，但是会发现页面标题并没有变化，也就是说并没有触发navigation的重绘<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static navigationOptions = (&#123; navigation &#125;) =&gt; &#123;</span><br><span class=\"line\">   \treturn &#123;</span><br><span class=\"line\">     \t\theaderTitle: I18n.t(&apos;me_title&apos;),</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"> \t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>.<br>.<br>.<br>通过查询Stack Overflow后发现navigation的一个类似setState的方法可以触发重绘，修改forceUpdate<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forceUpdate()&#123;</span><br><span class=\"line\">   \tthis.setState(&#123;I18n: 1&#125;);</span><br><span class=\"line\">   \tthis.props.navigation.setParams(&#123;editState:true &#125;);</span><br><span class=\"line\"> \t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里的setParams就可以触发navigation重绘，传递的editState也是一个无意义的值，同时这个方法也可用于动态修改标题的目的。</p>\n<p>问题解决。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>所遇问题：希望采用goBack进行页面回退，但需要回退页面触发重绘</p>\n<p>解决方法：路由跳转时传参回调函数，重绘页面</p>\n<hr>\n<p>因为在页面里使用了react-native-I18n来做国际化，页面内修改语言后需要回退到上个页面，同时期望此页面已经修改了语言，也就是要触发重绘，原有的做法是，通过<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigate(&apos;****&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>直接跳转到上个页面的路由，但是这样做导致的结果是上一页面从屏幕右侧划出，虽然页面确实重新加载了，但是给用户的回馈很奇怪，所以我决定修正过来，采用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goBack()</span><br></pre></td></tr></table></figure></p>\n<p>方式来回退到上一页面，但这样会发现回退的页面并没有发生变化，也就是没有触发重绘。</p>\n<p>考虑到这个问题，我就需要一个函数来确保重绘页面，也就是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forceUpdate()&#123;</span><br><span class=\"line\">    this.setState(&#123;I18n: 1&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过setState来触发重绘，传入的I18n是个无意义的值即可，如果需要重新加载这个页面的数据，也可以放在这个函数里，这样在子页面返回的时候，这个页面就会更新成最新的数据了。</p>\n<p>函数有了，下一步就是将这个函数随路由传递到下个页面去<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.props.navigation.navigate(&apos;testChildScreen&apos;, &#123; onGoBack: () =&gt; this.forceUpdate() &#125;); &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里注意通过ES6的写法来绑定this，用bind(this)也可以。</p>\n<p>这样参数函数就传递过去了，下面进入子页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.props.navigation.state.params.onGoBack();</span><br><span class=\"line\">   Alert.alert(null,&apos;success&apos;,[&#123; text: &apos;OK&apos;, onPress: () =&gt; this.props.navigation.goBack() &#125;]);</span><br></pre></td></tr></table></figure></p>\n<p>这里的逻辑是用户修改语言后给一个反馈，点击OK后自动返回上一页面，在goBack之前先调用一下回调函数</p>\n<p>好了，这样返回页面后就看到新语言的页面了，但是会发现页面标题并没有变化，也就是说并没有触发navigation的重绘<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static navigationOptions = (&#123; navigation &#125;) =&gt; &#123;</span><br><span class=\"line\">   \treturn &#123;</span><br><span class=\"line\">     \t\theaderTitle: I18n.t(&apos;me_title&apos;),</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"> \t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>.<br>.<br>.<br>通过查询Stack Overflow后发现navigation的一个类似setState的方法可以触发重绘，修改forceUpdate<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forceUpdate()&#123;</span><br><span class=\"line\">   \tthis.setState(&#123;I18n: 1&#125;);</span><br><span class=\"line\">   \tthis.props.navigation.setParams(&#123;editState:true &#125;);</span><br><span class=\"line\"> \t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里的setParams就可以触发navigation重绘，传递的editState也是一个无意义的值，同时这个方法也可用于动态修改标题的目的。</p>\n<p>问题解决。</p>\n"},{"layout":"post","title":"LeetCode刷题系列(3)(question 65)","subtitle":"Valid Number","date":"2018-01-24T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在[LeetCode](https://leetcode.com)上遇见的有意思、有难度或者有其他精彩答案的题目。\n所用语言为JavaScript。\n\n----------\n\n\n### 题目号码：65（hard）\n-------------\n\n\n> **Validate if a given string is numeric.**\n> It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.\n> \n> **Examples:**\n> - \"0\" => true\n> - \" 0.1 \" => true\n> - \"abc\" => false\n> - \"1 a\" => false\n> - \"2e10\" => true\n\n#### 题意\n判断给出的字符串是否可以转成合法数字\n\n-------------\n\n#### 思路\n从题目看来，切入点应该就在对给定字符串的筛选上，同时考虑有科学计数法的提现\n\n-------------\n\n#### 分析解法\n```\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isNumber = function(s) {\n    if (s === \"\") return false;\n    for (var i = 0; i < s.length; i++) {\n        if (s.charAt(i) != \" \") break;\n    }\n    if (i == s.length) return false;\n    return !isNaN(Number(s.substring(i)));\n};\n```\n\n##### 分析如下：\n\n\t1. 首先，判断是空字符串，直接返回false，避免影响后面的判断。\n\t2. 通过逐字判断，若是字符串中全是空格符，返回false。\n\t3. 既然不全是空格，那就截取第一个非空格到结尾的字符串然后通过Number()函数转化成数字，如果不是NaN就返回true。\n    解决。\n\n","source":"_posts/LeetCode_65.md","raw":"---\nlayout: post\ntitle: \"LeetCode刷题系列(3)(question 65)\"\nsubtitle: \"Valid Number\"\ndate: 2018-1-25\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- LeetCode\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在[LeetCode](https://leetcode.com)上遇见的有意思、有难度或者有其他精彩答案的题目。\n所用语言为JavaScript。\n\n----------\n\n\n### 题目号码：65（hard）\n-------------\n\n\n> **Validate if a given string is numeric.**\n> It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.\n> \n> **Examples:**\n> - \"0\" => true\n> - \" 0.1 \" => true\n> - \"abc\" => false\n> - \"1 a\" => false\n> - \"2e10\" => true\n\n#### 题意\n判断给出的字符串是否可以转成合法数字\n\n-------------\n\n#### 思路\n从题目看来，切入点应该就在对给定字符串的筛选上，同时考虑有科学计数法的提现\n\n-------------\n\n#### 分析解法\n```\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isNumber = function(s) {\n    if (s === \"\") return false;\n    for (var i = 0; i < s.length; i++) {\n        if (s.charAt(i) != \" \") break;\n    }\n    if (i == s.length) return false;\n    return !isNaN(Number(s.substring(i)));\n};\n```\n\n##### 分析如下：\n\n\t1. 首先，判断是空字符串，直接返回false，避免影响后面的判断。\n\t2. 通过逐字判断，若是字符串中全是空格符，返回false。\n\t3. 既然不全是空格，那就截取第一个非空格到结尾的字符串然后通过Number()函数转化成数字，如果不是NaN就返回true。\n    解决。\n\n","slug":"LeetCode_65","published":1,"updated":"2018-03-09T08:15:44.365Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwr000l5xfahjy4utou","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上遇见的有意思、有难度或者有其他精彩答案的题目。<br>所用语言为JavaScript。</p>\n<hr>\n<h3 id=\"题目号码：65（hard）\"><a href=\"#题目号码：65（hard）\" class=\"headerlink\" title=\"题目号码：65（hard）\"></a>题目号码：65（hard）</h3><hr>\n<blockquote>\n<p><strong>Validate if a given string is numeric.</strong><br>It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>“0” =&gt; true</li>\n<li>“ 0.1 “ =&gt; true</li>\n<li>“abc” =&gt; false</li>\n<li>“1 a” =&gt; false</li>\n<li>“2e10” =&gt; true</li>\n</ul>\n</blockquote>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>判断给出的字符串是否可以转成合法数字</p>\n<hr>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>从题目看来，切入点应该就在对给定字符串的筛选上，同时考虑有科学计数法的提现</p>\n<hr>\n<h4 id=\"分析解法\"><a href=\"#分析解法\" class=\"headerlink\" title=\"分析解法\"></a>分析解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var isNumber = function(s) &#123;</span><br><span class=\"line\">    if (s === &quot;&quot;) return false;</span><br><span class=\"line\">    for (var i = 0; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        if (s.charAt(i) != &quot; &quot;) break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (i == s.length) return false;</span><br><span class=\"line\">    return !isNaN(Number(s.substring(i)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><pre><code>1. 首先，判断是空字符串，直接返回false，避免影响后面的判断。\n2. 通过逐字判断，若是字符串中全是空格符，返回false。\n3. 既然不全是空格，那就截取第一个非空格到结尾的字符串然后通过Number()函数转化成数字，如果不是NaN就返回true。\n解决。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上遇见的有意思、有难度或者有其他精彩答案的题目。<br>所用语言为JavaScript。</p>\n<hr>\n<h3 id=\"题目号码：65（hard）\"><a href=\"#题目号码：65（hard）\" class=\"headerlink\" title=\"题目号码：65（hard）\"></a>题目号码：65（hard）</h3><hr>\n<blockquote>\n<p><strong>Validate if a given string is numeric.</strong><br>It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>“0” =&gt; true</li>\n<li>“ 0.1 “ =&gt; true</li>\n<li>“abc” =&gt; false</li>\n<li>“1 a” =&gt; false</li>\n<li>“2e10” =&gt; true</li>\n</ul>\n</blockquote>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>判断给出的字符串是否可以转成合法数字</p>\n<hr>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>从题目看来，切入点应该就在对给定字符串的筛选上，同时考虑有科学计数法的提现</p>\n<hr>\n<h4 id=\"分析解法\"><a href=\"#分析解法\" class=\"headerlink\" title=\"分析解法\"></a>分析解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var isNumber = function(s) &#123;</span><br><span class=\"line\">    if (s === &quot;&quot;) return false;</span><br><span class=\"line\">    for (var i = 0; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        if (s.charAt(i) != &quot; &quot;) break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (i == s.length) return false;</span><br><span class=\"line\">    return !isNaN(Number(s.substring(i)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><pre><code>1. 首先，判断是空字符串，直接返回false，避免影响后面的判断。\n2. 通过逐字判断，若是字符串中全是空格符，返回false。\n3. 既然不全是空格，那就截取第一个非空格到结尾的字符串然后通过Number()函数转化成数字，如果不是NaN就返回true。\n解决。\n</code></pre>"},{"layout":"post","title":"ES6复习笔记(二)","date":"2018-08-02T16:00:00.000Z","author":"Ai Shuangying","_content":"\n\n最近不太忙，把阮一峰老师的[ES6入门](http://es6.ruanyifeng.com/)再看一遍，这次做些笔记。\n\n看到哪里就把记不清的点记录下来，所以不会很连贯，初学者还是通读一遍比较好，欢迎购买实体书支持作者。\n\n----------\n\n\n### 字符串的扩展\n-------------\n\n字符串匹配方法扩展\n\n* indexOf：确定一个字符串是否包含在另一个字符串中\n* includes：返回布尔值，表示是否找到了参数字符串\n* startsWith：返回布尔值，表示参数字符串是否在原字符串的头部\n* endsWith：返回布尔值，表示参数字符串是否在原字符串尾部\n\n后三个新方法均支持第二个参数，表示搜索开始的位置。\nendsWith的第二个参数意义不同，表示只针对前n个字符。\n```\n    let s = 'Hello world!';\n    s.endsWith('Hello', 5) // true\n```\n\nrepeat()方法\n    返回一个新的字符串，表示将原字符串重复N次\n```\n    'hello'.repeat(2) // \"hellohello\"\n```\n\n字符串补全长度\n    padStart()：头部补全\n    padEnd()：尾部补全\n```\n    'x'.padStart(4, 'ab') // 'abax'\n    'x'.padEnd(5, 'ab') // 'xabab'\n```\n    如果省略第二个参数则默认用空格补全\n\n模板字符串\n```\n    let msg = `Hello, ${place}`;\n```\n\n### 数值的扩展\n-------------\n\n二进制和八进制数值的新的写法\n```\n    0b111110111 === 503 // true\n    0o767 === 503 // true\n\n    //转化为十进制\n    Number('0o10')  // 8\n```\n\n新方法\n\n* Number.isFinite()：用来检查一个数值是否为有限的（finite）\n* Number.isNaN()：用来检查一个值是否为NaN\n* Number.isInteger()：用来判断一个数值是否为整数\n* 指数运算符 **  // 2 ** 2 === 4\n    方法变动\n\n    全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。\n    ```\n        Number.parseInt('12.34') // 12\n        Number.parseFloat('123.45#') // 123.45\n    ```\n    通过这种方式减少全局方法，逐步模块化\n\n新的常量\n\n    Number.EPSILON：实质是一个可以接受的最小误差范围\n        解决： 0.1+0.2 === 0.3 // false的问题\n```\n    function withinErrorMargin (left, right) {\n        return Math.abs(left - right) < Number.EPSILON * Math.pow(2, 2);\n    }\n\n    0.1 + 0.2 === 0.3 // false\n    withinErrorMargin(0.1 + 0.2, 0.3) // true\n\n    1.1 + 1.3 === 2.4 // false\n    withinErrorMargin(1.1 + 1.3, 2.4) // true\n```\n\n    Number.MAX_SAFE_INTEGER 、 Number.MIN_SAFE_INTEGER：规定能够准确表示的整数范围\n```\n    Number.MAX_SAFE_INTEGER === Math.pow(2, 53) - 1     // true\n    Number.MAX_SAFE_INTEGER === 9007199254740991        // true\n\n    Number.MIN_SAFE_INTEGER === -Number.MAX_SAFE_INTEGER    // true\n    Number.MIN_SAFE_INTEGER === -9007199254740991           // true\n```\n    Number.isSafeInteger():用来判断一个整数是否落在这个范围之内\n\nMath 对象的扩展\n\n* Math.trunc()：用于去除一个数的小数部分，返回整数部分。\n* Math.sign()：用来判断一个数到底是正数、负数、还是零。返回值有5个：+1,-1,0,-0,NaN\n* Math.cbrt()：用于计算一个数的立方根。\n* Math.clz32()：返回一个数的 32 位无符号整数形式有多少个前导 0\n* Math.imul()：返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数\n* Math.fround()：返回一个数的32位单精度浮点数形式\n* Math.hypot()：返回所有参数的平方和的平方根。\n* Math.expm1(x)：返回 ex - 1，即Math.exp(x) - 1\n* Math.log1p(x)：方法返回1 + x的自然对数，即Math.log(1 + x)\n* Math.log10(x)：返回以 10 为底的x的对数\n* Math.log2(x)：返回以 2 为底的x的对数\n* Math.sinh(x)：返回x的双曲正弦（hyperbolic sine）\n* Math.cosh(x)：返回x的双曲余弦（hyperbolic cosine）\n* Math.tanh(x)：返回x的双曲正切（hyperbolic tangent）\n* Math.asinh(x)：返回x的反双曲正弦（inverse hyperbolic sine）\n* Math.acosh(x)：返回x的反双曲余弦（inverse hyperbolic cosine）\n* Math.atanh(x)：返回x的反双曲正切（inverse hyperbolic tangent）","source":"_posts/es6-notebook02.md","raw":"---\nlayout: post\ntitle: \"ES6复习笔记(二)\"\ndate: 2018-8-3\nauthor: \"Ai Shuangying\"\ntags:\n\t- ES6\n---\n\n\n最近不太忙，把阮一峰老师的[ES6入门](http://es6.ruanyifeng.com/)再看一遍，这次做些笔记。\n\n看到哪里就把记不清的点记录下来，所以不会很连贯，初学者还是通读一遍比较好，欢迎购买实体书支持作者。\n\n----------\n\n\n### 字符串的扩展\n-------------\n\n字符串匹配方法扩展\n\n* indexOf：确定一个字符串是否包含在另一个字符串中\n* includes：返回布尔值，表示是否找到了参数字符串\n* startsWith：返回布尔值，表示参数字符串是否在原字符串的头部\n* endsWith：返回布尔值，表示参数字符串是否在原字符串尾部\n\n后三个新方法均支持第二个参数，表示搜索开始的位置。\nendsWith的第二个参数意义不同，表示只针对前n个字符。\n```\n    let s = 'Hello world!';\n    s.endsWith('Hello', 5) // true\n```\n\nrepeat()方法\n    返回一个新的字符串，表示将原字符串重复N次\n```\n    'hello'.repeat(2) // \"hellohello\"\n```\n\n字符串补全长度\n    padStart()：头部补全\n    padEnd()：尾部补全\n```\n    'x'.padStart(4, 'ab') // 'abax'\n    'x'.padEnd(5, 'ab') // 'xabab'\n```\n    如果省略第二个参数则默认用空格补全\n\n模板字符串\n```\n    let msg = `Hello, ${place}`;\n```\n\n### 数值的扩展\n-------------\n\n二进制和八进制数值的新的写法\n```\n    0b111110111 === 503 // true\n    0o767 === 503 // true\n\n    //转化为十进制\n    Number('0o10')  // 8\n```\n\n新方法\n\n* Number.isFinite()：用来检查一个数值是否为有限的（finite）\n* Number.isNaN()：用来检查一个值是否为NaN\n* Number.isInteger()：用来判断一个数值是否为整数\n* 指数运算符 **  // 2 ** 2 === 4\n    方法变动\n\n    全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。\n    ```\n        Number.parseInt('12.34') // 12\n        Number.parseFloat('123.45#') // 123.45\n    ```\n    通过这种方式减少全局方法，逐步模块化\n\n新的常量\n\n    Number.EPSILON：实质是一个可以接受的最小误差范围\n        解决： 0.1+0.2 === 0.3 // false的问题\n```\n    function withinErrorMargin (left, right) {\n        return Math.abs(left - right) < Number.EPSILON * Math.pow(2, 2);\n    }\n\n    0.1 + 0.2 === 0.3 // false\n    withinErrorMargin(0.1 + 0.2, 0.3) // true\n\n    1.1 + 1.3 === 2.4 // false\n    withinErrorMargin(1.1 + 1.3, 2.4) // true\n```\n\n    Number.MAX_SAFE_INTEGER 、 Number.MIN_SAFE_INTEGER：规定能够准确表示的整数范围\n```\n    Number.MAX_SAFE_INTEGER === Math.pow(2, 53) - 1     // true\n    Number.MAX_SAFE_INTEGER === 9007199254740991        // true\n\n    Number.MIN_SAFE_INTEGER === -Number.MAX_SAFE_INTEGER    // true\n    Number.MIN_SAFE_INTEGER === -9007199254740991           // true\n```\n    Number.isSafeInteger():用来判断一个整数是否落在这个范围之内\n\nMath 对象的扩展\n\n* Math.trunc()：用于去除一个数的小数部分，返回整数部分。\n* Math.sign()：用来判断一个数到底是正数、负数、还是零。返回值有5个：+1,-1,0,-0,NaN\n* Math.cbrt()：用于计算一个数的立方根。\n* Math.clz32()：返回一个数的 32 位无符号整数形式有多少个前导 0\n* Math.imul()：返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数\n* Math.fround()：返回一个数的32位单精度浮点数形式\n* Math.hypot()：返回所有参数的平方和的平方根。\n* Math.expm1(x)：返回 ex - 1，即Math.exp(x) - 1\n* Math.log1p(x)：方法返回1 + x的自然对数，即Math.log(1 + x)\n* Math.log10(x)：返回以 10 为底的x的对数\n* Math.log2(x)：返回以 2 为底的x的对数\n* Math.sinh(x)：返回x的双曲正弦（hyperbolic sine）\n* Math.cosh(x)：返回x的双曲余弦（hyperbolic cosine）\n* Math.tanh(x)：返回x的双曲正切（hyperbolic tangent）\n* Math.asinh(x)：返回x的反双曲正弦（inverse hyperbolic sine）\n* Math.acosh(x)：返回x的反双曲余弦（inverse hyperbolic cosine）\n* Math.atanh(x)：返回x的反双曲正切（inverse hyperbolic tangent）","slug":"es6-notebook02","published":1,"updated":"2018-08-03T08:27:03.208Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwt000n5xfag51itw5h","content":"<p>最近不太忙，把阮一峰老师的<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ES6入门</a>再看一遍，这次做些笔记。</p>\n<p>看到哪里就把记不清的点记录下来，所以不会很连贯，初学者还是通读一遍比较好，欢迎购买实体书支持作者。</p>\n<hr>\n<h3 id=\"字符串的扩展\"><a href=\"#字符串的扩展\" class=\"headerlink\" title=\"字符串的扩展\"></a>字符串的扩展</h3><hr>\n<p>字符串匹配方法扩展</p>\n<ul>\n<li>indexOf：确定一个字符串是否包含在另一个字符串中</li>\n<li>includes：返回布尔值，表示是否找到了参数字符串</li>\n<li>startsWith：返回布尔值，表示参数字符串是否在原字符串的头部</li>\n<li>endsWith：返回布尔值，表示参数字符串是否在原字符串尾部</li>\n</ul>\n<p>后三个新方法均支持第二个参数，表示搜索开始的位置。<br>endsWith的第二个参数意义不同，表示只针对前n个字符。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let s = &apos;Hello world!&apos;;</span><br><span class=\"line\">s.endsWith(&apos;Hello&apos;, 5) // true</span><br></pre></td></tr></table></figure></p>\n<p>repeat()方法<br>    返回一个新的字符串，表示将原字符串重复N次<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;hello&apos;.repeat(2) // &quot;hellohello&quot;</span><br></pre></td></tr></table></figure></p>\n<p>字符串补全长度<br>    padStart()：头部补全<br>    padEnd()：尾部补全<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;x&apos;.padStart(4, &apos;ab&apos;) // &apos;abax&apos;</span><br><span class=\"line\">&apos;x&apos;.padEnd(5, &apos;ab&apos;) // &apos;xabab&apos;</span><br></pre></td></tr></table></figure></p>\n<pre><code>如果省略第二个参数则默认用空格补全\n</code></pre><p>模板字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let msg = `Hello, $&#123;place&#125;`;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数值的扩展\"><a href=\"#数值的扩展\" class=\"headerlink\" title=\"数值的扩展\"></a>数值的扩展</h3><hr>\n<p>二进制和八进制数值的新的写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0b111110111 === 503 // true</span><br><span class=\"line\">0o767 === 503 // true</span><br><span class=\"line\"></span><br><span class=\"line\">//转化为十进制</span><br><span class=\"line\">Number(&apos;0o10&apos;)  // 8</span><br></pre></td></tr></table></figure></p>\n<p>新方法</p>\n<ul>\n<li>Number.isFinite()：用来检查一个数值是否为有限的（finite）</li>\n<li>Number.isNaN()：用来检查一个值是否为NaN</li>\n<li>Number.isInteger()：用来判断一个数值是否为整数</li>\n<li><p>指数运算符 <strong>  // 2 </strong> 2 === 4<br>  方法变动</p>\n<p>  全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.parseInt(&apos;12.34&apos;) // 12</span><br><span class=\"line\">Number.parseFloat(&apos;123.45#&apos;) // 123.45</span><br></pre></td></tr></table></figure>\n<p>  通过这种方式减少全局方法，逐步模块化</p>\n</li>\n</ul>\n<p>新的常量</p>\n<pre><code>Number.EPSILON：实质是一个可以接受的最小误差范围\n    解决： 0.1+0.2 === 0.3 // false的问题\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function withinErrorMargin (left, right) &#123;</span><br><span class=\"line\">    return Math.abs(left - right) &lt; Number.EPSILON * Math.pow(2, 2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">0.1 + 0.2 === 0.3 // false</span><br><span class=\"line\">withinErrorMargin(0.1 + 0.2, 0.3) // true</span><br><span class=\"line\"></span><br><span class=\"line\">1.1 + 1.3 === 2.4 // false</span><br><span class=\"line\">withinErrorMargin(1.1 + 1.3, 2.4) // true</span><br></pre></td></tr></table></figure>\n<pre><code>Number.MAX_SAFE_INTEGER 、 Number.MIN_SAFE_INTEGER：规定能够准确表示的整数范围\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.MAX_SAFE_INTEGER === Math.pow(2, 53) - 1     // true</span><br><span class=\"line\">Number.MAX_SAFE_INTEGER === 9007199254740991        // true</span><br><span class=\"line\"></span><br><span class=\"line\">Number.MIN_SAFE_INTEGER === -Number.MAX_SAFE_INTEGER    // true</span><br><span class=\"line\">Number.MIN_SAFE_INTEGER === -9007199254740991           // true</span><br></pre></td></tr></table></figure>\n<pre><code>Number.isSafeInteger():用来判断一个整数是否落在这个范围之内\n</code></pre><p>Math 对象的扩展</p>\n<ul>\n<li>Math.trunc()：用于去除一个数的小数部分，返回整数部分。</li>\n<li>Math.sign()：用来判断一个数到底是正数、负数、还是零。返回值有5个：+1,-1,0,-0,NaN</li>\n<li>Math.cbrt()：用于计算一个数的立方根。</li>\n<li>Math.clz32()：返回一个数的 32 位无符号整数形式有多少个前导 0</li>\n<li>Math.imul()：返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数</li>\n<li>Math.fround()：返回一个数的32位单精度浮点数形式</li>\n<li>Math.hypot()：返回所有参数的平方和的平方根。</li>\n<li>Math.expm1(x)：返回 ex - 1，即Math.exp(x) - 1</li>\n<li>Math.log1p(x)：方法返回1 + x的自然对数，即Math.log(1 + x)</li>\n<li>Math.log10(x)：返回以 10 为底的x的对数</li>\n<li>Math.log2(x)：返回以 2 为底的x的对数</li>\n<li>Math.sinh(x)：返回x的双曲正弦（hyperbolic sine）</li>\n<li>Math.cosh(x)：返回x的双曲余弦（hyperbolic cosine）</li>\n<li>Math.tanh(x)：返回x的双曲正切（hyperbolic tangent）</li>\n<li>Math.asinh(x)：返回x的反双曲正弦（inverse hyperbolic sine）</li>\n<li>Math.acosh(x)：返回x的反双曲余弦（inverse hyperbolic cosine）</li>\n<li>Math.atanh(x)：返回x的反双曲正切（inverse hyperbolic tangent）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>最近不太忙，把阮一峰老师的<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ES6入门</a>再看一遍，这次做些笔记。</p>\n<p>看到哪里就把记不清的点记录下来，所以不会很连贯，初学者还是通读一遍比较好，欢迎购买实体书支持作者。</p>\n<hr>\n<h3 id=\"字符串的扩展\"><a href=\"#字符串的扩展\" class=\"headerlink\" title=\"字符串的扩展\"></a>字符串的扩展</h3><hr>\n<p>字符串匹配方法扩展</p>\n<ul>\n<li>indexOf：确定一个字符串是否包含在另一个字符串中</li>\n<li>includes：返回布尔值，表示是否找到了参数字符串</li>\n<li>startsWith：返回布尔值，表示参数字符串是否在原字符串的头部</li>\n<li>endsWith：返回布尔值，表示参数字符串是否在原字符串尾部</li>\n</ul>\n<p>后三个新方法均支持第二个参数，表示搜索开始的位置。<br>endsWith的第二个参数意义不同，表示只针对前n个字符。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let s = &apos;Hello world!&apos;;</span><br><span class=\"line\">s.endsWith(&apos;Hello&apos;, 5) // true</span><br></pre></td></tr></table></figure></p>\n<p>repeat()方法<br>    返回一个新的字符串，表示将原字符串重复N次<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;hello&apos;.repeat(2) // &quot;hellohello&quot;</span><br></pre></td></tr></table></figure></p>\n<p>字符串补全长度<br>    padStart()：头部补全<br>    padEnd()：尾部补全<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;x&apos;.padStart(4, &apos;ab&apos;) // &apos;abax&apos;</span><br><span class=\"line\">&apos;x&apos;.padEnd(5, &apos;ab&apos;) // &apos;xabab&apos;</span><br></pre></td></tr></table></figure></p>\n<pre><code>如果省略第二个参数则默认用空格补全\n</code></pre><p>模板字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let msg = `Hello, $&#123;place&#125;`;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数值的扩展\"><a href=\"#数值的扩展\" class=\"headerlink\" title=\"数值的扩展\"></a>数值的扩展</h3><hr>\n<p>二进制和八进制数值的新的写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0b111110111 === 503 // true</span><br><span class=\"line\">0o767 === 503 // true</span><br><span class=\"line\"></span><br><span class=\"line\">//转化为十进制</span><br><span class=\"line\">Number(&apos;0o10&apos;)  // 8</span><br></pre></td></tr></table></figure></p>\n<p>新方法</p>\n<ul>\n<li>Number.isFinite()：用来检查一个数值是否为有限的（finite）</li>\n<li>Number.isNaN()：用来检查一个值是否为NaN</li>\n<li>Number.isInteger()：用来判断一个数值是否为整数</li>\n<li><p>指数运算符 <strong>  // 2 </strong> 2 === 4<br>  方法变动</p>\n<p>  全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.parseInt(&apos;12.34&apos;) // 12</span><br><span class=\"line\">Number.parseFloat(&apos;123.45#&apos;) // 123.45</span><br></pre></td></tr></table></figure>\n<p>  通过这种方式减少全局方法，逐步模块化</p>\n</li>\n</ul>\n<p>新的常量</p>\n<pre><code>Number.EPSILON：实质是一个可以接受的最小误差范围\n    解决： 0.1+0.2 === 0.3 // false的问题\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function withinErrorMargin (left, right) &#123;</span><br><span class=\"line\">    return Math.abs(left - right) &lt; Number.EPSILON * Math.pow(2, 2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">0.1 + 0.2 === 0.3 // false</span><br><span class=\"line\">withinErrorMargin(0.1 + 0.2, 0.3) // true</span><br><span class=\"line\"></span><br><span class=\"line\">1.1 + 1.3 === 2.4 // false</span><br><span class=\"line\">withinErrorMargin(1.1 + 1.3, 2.4) // true</span><br></pre></td></tr></table></figure>\n<pre><code>Number.MAX_SAFE_INTEGER 、 Number.MIN_SAFE_INTEGER：规定能够准确表示的整数范围\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.MAX_SAFE_INTEGER === Math.pow(2, 53) - 1     // true</span><br><span class=\"line\">Number.MAX_SAFE_INTEGER === 9007199254740991        // true</span><br><span class=\"line\"></span><br><span class=\"line\">Number.MIN_SAFE_INTEGER === -Number.MAX_SAFE_INTEGER    // true</span><br><span class=\"line\">Number.MIN_SAFE_INTEGER === -9007199254740991           // true</span><br></pre></td></tr></table></figure>\n<pre><code>Number.isSafeInteger():用来判断一个整数是否落在这个范围之内\n</code></pre><p>Math 对象的扩展</p>\n<ul>\n<li>Math.trunc()：用于去除一个数的小数部分，返回整数部分。</li>\n<li>Math.sign()：用来判断一个数到底是正数、负数、还是零。返回值有5个：+1,-1,0,-0,NaN</li>\n<li>Math.cbrt()：用于计算一个数的立方根。</li>\n<li>Math.clz32()：返回一个数的 32 位无符号整数形式有多少个前导 0</li>\n<li>Math.imul()：返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数</li>\n<li>Math.fround()：返回一个数的32位单精度浮点数形式</li>\n<li>Math.hypot()：返回所有参数的平方和的平方根。</li>\n<li>Math.expm1(x)：返回 ex - 1，即Math.exp(x) - 1</li>\n<li>Math.log1p(x)：方法返回1 + x的自然对数，即Math.log(1 + x)</li>\n<li>Math.log10(x)：返回以 10 为底的x的对数</li>\n<li>Math.log2(x)：返回以 2 为底的x的对数</li>\n<li>Math.sinh(x)：返回x的双曲正弦（hyperbolic sine）</li>\n<li>Math.cosh(x)：返回x的双曲余弦（hyperbolic cosine）</li>\n<li>Math.tanh(x)：返回x的双曲正切（hyperbolic tangent）</li>\n<li>Math.asinh(x)：返回x的反双曲正弦（inverse hyperbolic sine）</li>\n<li>Math.acosh(x)：返回x的反双曲余弦（inverse hyperbolic cosine）</li>\n<li>Math.atanh(x)：返回x的反双曲正切（inverse hyperbolic tangent）</li>\n</ul>\n"},{"layout":"post","title":"使用VPS搭建VPN","subtitle":"没错，小梯子","date":"2018-01-19T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n最近公司的服务器出了点小问题，梯子用不了了，考虑到自己还有一台服务器闲置，所以拿出来搭个梯子自用。\n\n----------\n\n\n#### 准备工作\n-------------\n\n\n首先要有一台VPS，推荐购买美国的，自用的是洛杉矶服务器，最低配即可。\n\n-------------\n\n#### 一键部署\n\n服务器系统为CentOS 7，其余系统可参照官网采用不同的包。\n\n\n```\nwget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh\n//回车\n\nchmod +x shadowsocks.sh\n//回车\n\n./shadowsocks.sh 2>&1 | tee shadowsocks.log\n//回车\n\n//安装过程中会有两三次提示，分别要求设置 端口、密码及加密方式，直接回车会使用默认设置\n\n//程序执行完成后需要到/etc/shadowsocks.json文件中将server 0.0.0.0改成自己vps的ip\n\n//多用户配置\n{\n    \"server\":\"0.0.0.0\",\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{\n         \"8989\":\"password0\",\n         \"9001\":\"password1\",\n         \"9002\":\"password2\"\n    },\n    \"timeout\":300,\n    \"method\":\"your_encryption_method\",\n    \"fast_open\": false\n}\n启动：/etc/init.d/shadowsocks start\n停止：/etc/init.d/shadowsocks stop\n重启：/etc/init.d/shadowsocks restart\n状态：/etc/init.d/shadowsocks status\n\n//结束\n//自己电脑上下载Shadowsocks客户端（Mac OS上为ShadowsocksX-NG）输入自己的配置即可\n```\n\n","source":"_posts/VPS.md","raw":"---\nlayout: post\ntitle: \"使用VPS搭建VPN\"\nsubtitle: \"没错，小梯子\"\ndate: 2018-1-20\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- VPS\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n最近公司的服务器出了点小问题，梯子用不了了，考虑到自己还有一台服务器闲置，所以拿出来搭个梯子自用。\n\n----------\n\n\n#### 准备工作\n-------------\n\n\n首先要有一台VPS，推荐购买美国的，自用的是洛杉矶服务器，最低配即可。\n\n-------------\n\n#### 一键部署\n\n服务器系统为CentOS 7，其余系统可参照官网采用不同的包。\n\n\n```\nwget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh\n//回车\n\nchmod +x shadowsocks.sh\n//回车\n\n./shadowsocks.sh 2>&1 | tee shadowsocks.log\n//回车\n\n//安装过程中会有两三次提示，分别要求设置 端口、密码及加密方式，直接回车会使用默认设置\n\n//程序执行完成后需要到/etc/shadowsocks.json文件中将server 0.0.0.0改成自己vps的ip\n\n//多用户配置\n{\n    \"server\":\"0.0.0.0\",\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{\n         \"8989\":\"password0\",\n         \"9001\":\"password1\",\n         \"9002\":\"password2\"\n    },\n    \"timeout\":300,\n    \"method\":\"your_encryption_method\",\n    \"fast_open\": false\n}\n启动：/etc/init.d/shadowsocks start\n停止：/etc/init.d/shadowsocks stop\n重启：/etc/init.d/shadowsocks restart\n状态：/etc/init.d/shadowsocks status\n\n//结束\n//自己电脑上下载Shadowsocks客户端（Mac OS上为ShadowsocksX-NG）输入自己的配置即可\n```\n\n","slug":"VPS","published":1,"updated":"2018-04-02T08:41:44.601Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwu000p5xfaiz4rv0oi","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>最近公司的服务器出了点小问题，梯子用不了了，考虑到自己还有一台服务器闲置，所以拿出来搭个梯子自用。</p>\n<hr>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><hr>\n<p>首先要有一台VPS，推荐购买美国的，自用的是洛杉矶服务器，最低配即可。</p>\n<hr>\n<h4 id=\"一键部署\"><a href=\"#一键部署\" class=\"headerlink\" title=\"一键部署\"></a>一键部署</h4><p>服务器系统为CentOS 7，其余系统可参照官网采用不同的包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class=\"line\">//回车</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x shadowsocks.sh</span><br><span class=\"line\">//回车</span><br><span class=\"line\"></span><br><span class=\"line\">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br><span class=\"line\">//回车</span><br><span class=\"line\"></span><br><span class=\"line\">//安装过程中会有两三次提示，分别要求设置 端口、密码及加密方式，直接回车会使用默认设置</span><br><span class=\"line\"></span><br><span class=\"line\">//程序执行完成后需要到/etc/shadowsocks.json文件中将server 0.0.0.0改成自己vps的ip</span><br><span class=\"line\"></span><br><span class=\"line\">//多用户配置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;port_password&quot;:&#123;</span><br><span class=\"line\">         &quot;8989&quot;:&quot;password0&quot;,</span><br><span class=\"line\">         &quot;9001&quot;:&quot;password1&quot;,</span><br><span class=\"line\">         &quot;9002&quot;:&quot;password2&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">启动：/etc/init.d/shadowsocks start</span><br><span class=\"line\">停止：/etc/init.d/shadowsocks stop</span><br><span class=\"line\">重启：/etc/init.d/shadowsocks restart</span><br><span class=\"line\">状态：/etc/init.d/shadowsocks status</span><br><span class=\"line\"></span><br><span class=\"line\">//结束</span><br><span class=\"line\">//自己电脑上下载Shadowsocks客户端（Mac OS上为ShadowsocksX-NG）输入自己的配置即可</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>最近公司的服务器出了点小问题，梯子用不了了，考虑到自己还有一台服务器闲置，所以拿出来搭个梯子自用。</p>\n<hr>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><hr>\n<p>首先要有一台VPS，推荐购买美国的，自用的是洛杉矶服务器，最低配即可。</p>\n<hr>\n<h4 id=\"一键部署\"><a href=\"#一键部署\" class=\"headerlink\" title=\"一键部署\"></a>一键部署</h4><p>服务器系统为CentOS 7，其余系统可参照官网采用不同的包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class=\"line\">//回车</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x shadowsocks.sh</span><br><span class=\"line\">//回车</span><br><span class=\"line\"></span><br><span class=\"line\">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br><span class=\"line\">//回车</span><br><span class=\"line\"></span><br><span class=\"line\">//安装过程中会有两三次提示，分别要求设置 端口、密码及加密方式，直接回车会使用默认设置</span><br><span class=\"line\"></span><br><span class=\"line\">//程序执行完成后需要到/etc/shadowsocks.json文件中将server 0.0.0.0改成自己vps的ip</span><br><span class=\"line\"></span><br><span class=\"line\">//多用户配置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;port_password&quot;:&#123;</span><br><span class=\"line\">         &quot;8989&quot;:&quot;password0&quot;,</span><br><span class=\"line\">         &quot;9001&quot;:&quot;password1&quot;,</span><br><span class=\"line\">         &quot;9002&quot;:&quot;password2&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">启动：/etc/init.d/shadowsocks start</span><br><span class=\"line\">停止：/etc/init.d/shadowsocks stop</span><br><span class=\"line\">重启：/etc/init.d/shadowsocks restart</span><br><span class=\"line\">状态：/etc/init.d/shadowsocks status</span><br><span class=\"line\"></span><br><span class=\"line\">//结束</span><br><span class=\"line\">//自己电脑上下载Shadowsocks客户端（Mac OS上为ShadowsocksX-NG）输入自己的配置即可</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"LeetCode刷题系列(2)(question 214)","subtitle":"Shortest Palindrome","date":"2017-12-25T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在[LeetCode](https://leetcode.com)上遇见的有意思、有难度或者有其他精彩答案的题目。\n所用语言为JavaScript。\n\n----------\n\n\n### 题目号码：214（hard）\n-------------\n\n\n> **Shortest Palindrome:**\n> Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it. \n> Find and return the shortest palindrome you can find by performing this transformation.\n> \n> **Examples:**\n> - Given \"aacecaaa\", return \"aaacecaaa\".\n> - Given \"abcd\", return \"dcbabcd\".\n\n#### 题意\n给定一个字符串S，可以通过在它前面添加字符将其转换为回文。通过执行这个转换，找到并返回最短的回文。\n\n-------------\n\n#### 思路\n从字符串结尾开始遍历，与字符串开头对应位置的字母进行比较，如果不一致则插入一个相同的字母来形成回文\n\n#### 我的解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    for(var i=s.length-1; i>=0; i--){\n        if(s[i] !== s[s.length-1-i]){\n            var s1 = s.substr(0,s.length-1-i);\n            var s2 = s.substring(s.length-1-i);\n            var ss = s[i];\n            s = ''+s1+ss+s2;\n            i++;\n        }\n    }\n    return s;\n};\n```\n##### 分析如下：\n\n但是这种解法却没有通过测试，具体情况是：\n    - 给出字符串 \"aabba\"\n    - 我的输出结果为 \"abbabba\"\n    - 期望输出结果为 \"abbaabba\"\n\n乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\n-------------\n\n#### 思路\n既然只能在给定字符串开头插入，那么就是说我需要找到给出字符串中自开头最大的回文子串，然后把剩下的字符串颠倒顺序插入即可。\n\n#### 我的解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar findMaxIndex = function(s){\n    for(var i=s.length-1; i>=0; i--){\n        if(s[i] != s[s.length-1-i]){\n            return false;\n        }else{\n            continue;\n        }\n    }\n    return true;\n}\nvar shortestPalindrome = function(s) {\n    var index;\n    if(s.length == 1){ return s; }\n    for(var i=s.length; i>0; i--){\n        var s0 = s.substring(0,i);\n        if(!findMaxIndex(s0)){\n            continue;\n        }else{\n            index = i;\n            break;\n        }\n    }\n    var s1 = s.substr(0,index);\n    var s2 = s.substring(index);\n    var ss = s2.split(\"\").reverse().join(\"\");\n    return ss + s1 + s2;\n};\n```\n##### 分析如下：\n\n但是这种解法却没有通过测试，具体情况是：\n    - 超时，给出一个超长的\"aaaaaaa...aaa\"字符串\n这就要求我找到一个效率更高的解法。\n\n#### 分析解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar shortestPalindrome = function(s) {\n    var prefix = \"\";\n    var pos, head, tail;\n\n    for(pos = head = tail = parseInt(s.length / 2); pos > 0; head = tail = --pos){\n        while(head !== 0 && s[head - 1] === s[head]){\n            head--; pos--;\n        }\n        while(tail != s.length - 1 && s[tail + 1] === s[tail]){\n            tail++;\n        }\n        var isSame = true;\n        while(head >= 0){\n            if(s[head] !== s[tail]){\n                isSame = false;\n                break;\n            }\n            head--; tail++;\n        }\n        if(isSame){\n            break;\n        }\n    }\n\n    for(var k = s.length - 1; k >= tail && k !== 0; k--){\n        prefix += s[k];\n    }\n    return prefix + s;\n}\n```\n##### 分析如下：\n\n\t1. 思路：\n        * 取一个点，也就是期望的回文中心，把head和tail都指向它，先找前后相同的数，调整指针位置，然后head--, tail++这样找回文。\n        * 如果head等于0，说明找到了，倒着输出tail后面的字符加上input的字符串就是答案。\n        * 字符串中间和中间之前的点才有可能是回文的中心，后一半可以排除。\n        * 回文中心可能是单个或多个字母，如果是多个字母，他们肯定都是相同的。\n    2. 变量设置\n\t\t* prefix：用来存储原字符串中非回文部分的倒序\n\t\t* pos：回文中心点\n\t\t* head：回文头位置\n\t\t* tail：回文尾位置","source":"_posts/LeetCode_214.md","raw":"---\nlayout: post\ntitle: \"LeetCode刷题系列(2)(question 214)\"\nsubtitle: \"Shortest Palindrome\"\ndate: 2017-12-26\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- LeetCode\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在[LeetCode](https://leetcode.com)上遇见的有意思、有难度或者有其他精彩答案的题目。\n所用语言为JavaScript。\n\n----------\n\n\n### 题目号码：214（hard）\n-------------\n\n\n> **Shortest Palindrome:**\n> Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it. \n> Find and return the shortest palindrome you can find by performing this transformation.\n> \n> **Examples:**\n> - Given \"aacecaaa\", return \"aaacecaaa\".\n> - Given \"abcd\", return \"dcbabcd\".\n\n#### 题意\n给定一个字符串S，可以通过在它前面添加字符将其转换为回文。通过执行这个转换，找到并返回最短的回文。\n\n-------------\n\n#### 思路\n从字符串结尾开始遍历，与字符串开头对应位置的字母进行比较，如果不一致则插入一个相同的字母来形成回文\n\n#### 我的解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    for(var i=s.length-1; i>=0; i--){\n        if(s[i] !== s[s.length-1-i]){\n            var s1 = s.substr(0,s.length-1-i);\n            var s2 = s.substring(s.length-1-i);\n            var ss = s[i];\n            s = ''+s1+ss+s2;\n            i++;\n        }\n    }\n    return s;\n};\n```\n##### 分析如下：\n\n但是这种解法却没有通过测试，具体情况是：\n    - 给出字符串 \"aabba\"\n    - 我的输出结果为 \"abbabba\"\n    - 期望输出结果为 \"abbaabba\"\n\n乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\n-------------\n\n#### 思路\n既然只能在给定字符串开头插入，那么就是说我需要找到给出字符串中自开头最大的回文子串，然后把剩下的字符串颠倒顺序插入即可。\n\n#### 我的解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar findMaxIndex = function(s){\n    for(var i=s.length-1; i>=0; i--){\n        if(s[i] != s[s.length-1-i]){\n            return false;\n        }else{\n            continue;\n        }\n    }\n    return true;\n}\nvar shortestPalindrome = function(s) {\n    var index;\n    if(s.length == 1){ return s; }\n    for(var i=s.length; i>0; i--){\n        var s0 = s.substring(0,i);\n        if(!findMaxIndex(s0)){\n            continue;\n        }else{\n            index = i;\n            break;\n        }\n    }\n    var s1 = s.substr(0,index);\n    var s2 = s.substring(index);\n    var ss = s2.split(\"\").reverse().join(\"\");\n    return ss + s1 + s2;\n};\n```\n##### 分析如下：\n\n但是这种解法却没有通过测试，具体情况是：\n    - 超时，给出一个超长的\"aaaaaaa...aaa\"字符串\n这就要求我找到一个效率更高的解法。\n\n#### 分析解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar shortestPalindrome = function(s) {\n    var prefix = \"\";\n    var pos, head, tail;\n\n    for(pos = head = tail = parseInt(s.length / 2); pos > 0; head = tail = --pos){\n        while(head !== 0 && s[head - 1] === s[head]){\n            head--; pos--;\n        }\n        while(tail != s.length - 1 && s[tail + 1] === s[tail]){\n            tail++;\n        }\n        var isSame = true;\n        while(head >= 0){\n            if(s[head] !== s[tail]){\n                isSame = false;\n                break;\n            }\n            head--; tail++;\n        }\n        if(isSame){\n            break;\n        }\n    }\n\n    for(var k = s.length - 1; k >= tail && k !== 0; k--){\n        prefix += s[k];\n    }\n    return prefix + s;\n}\n```\n##### 分析如下：\n\n\t1. 思路：\n        * 取一个点，也就是期望的回文中心，把head和tail都指向它，先找前后相同的数，调整指针位置，然后head--, tail++这样找回文。\n        * 如果head等于0，说明找到了，倒着输出tail后面的字符加上input的字符串就是答案。\n        * 字符串中间和中间之前的点才有可能是回文的中心，后一半可以排除。\n        * 回文中心可能是单个或多个字母，如果是多个字母，他们肯定都是相同的。\n    2. 变量设置\n\t\t* prefix：用来存储原字符串中非回文部分的倒序\n\t\t* pos：回文中心点\n\t\t* head：回文头位置\n\t\t* tail：回文尾位置","slug":"LeetCode_214","published":1,"updated":"2018-01-14T12:20:58.360Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwv000r5xfa5k1sxp5t","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上遇见的有意思、有难度或者有其他精彩答案的题目。<br>所用语言为JavaScript。</p>\n<hr>\n<h3 id=\"题目号码：214（hard）\"><a href=\"#题目号码：214（hard）\" class=\"headerlink\" title=\"题目号码：214（hard）\"></a>题目号码：214（hard）</h3><hr>\n<blockquote>\n<p><strong>Shortest Palindrome:</strong><br>Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it.<br>Find and return the shortest palindrome you can find by performing this transformation.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>Given “aacecaaa”, return “aaacecaaa”.</li>\n<li>Given “abcd”, return “dcbabcd”.</li>\n</ul>\n</blockquote>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>给定一个字符串S，可以通过在它前面添加字符将其转换为回文。通过执行这个转换，找到并返回最短的回文。</p>\n<hr>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>从字符串结尾开始遍历，与字符串开头对应位置的字母进行比较，如果不一致则插入一个相同的字母来形成回文</p>\n<h4 id=\"我的解法\"><a href=\"#我的解法\" class=\"headerlink\" title=\"我的解法\"></a>我的解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class=\"line\">    for(var i=s.length-1; i&gt;=0; i--)&#123;</span><br><span class=\"line\">        if(s[i] !== s[s.length-1-i])&#123;</span><br><span class=\"line\">            var s1 = s.substr(0,s.length-1-i);</span><br><span class=\"line\">            var s2 = s.substring(s.length-1-i);</span><br><span class=\"line\">            var ss = s[i];</span><br><span class=\"line\">            s = &apos;&apos;+s1+ss+s2;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><p>但是这种解法却没有通过测试，具体情况是：</p>\n<pre><code>- 给出字符串 &quot;aabba&quot;\n- 我的输出结果为 &quot;abbabba&quot;\n- 期望输出结果为 &quot;abbaabba&quot;\n</code></pre><h2 id=\"乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\"><a href=\"#乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\" class=\"headerlink\" title=\"乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\"></a>乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。</h2><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>既然只能在给定字符串开头插入，那么就是说我需要找到给出字符串中自开头最大的回文子串，然后把剩下的字符串颠倒顺序插入即可。</p>\n<h4 id=\"我的解法-1\"><a href=\"#我的解法-1\" class=\"headerlink\" title=\"我的解法\"></a>我的解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var findMaxIndex = function(s)&#123;</span><br><span class=\"line\">    for(var i=s.length-1; i&gt;=0; i--)&#123;</span><br><span class=\"line\">        if(s[i] != s[s.length-1-i])&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var shortestPalindrome = function(s) &#123;</span><br><span class=\"line\">    var index;</span><br><span class=\"line\">    if(s.length == 1)&#123; return s; &#125;</span><br><span class=\"line\">    for(var i=s.length; i&gt;0; i--)&#123;</span><br><span class=\"line\">        var s0 = s.substring(0,i);</span><br><span class=\"line\">        if(!findMaxIndex(s0))&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            index = i;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var s1 = s.substr(0,index);</span><br><span class=\"line\">    var s2 = s.substring(index);</span><br><span class=\"line\">    var ss = s2.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class=\"line\">    return ss + s1 + s2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：-1\"><a href=\"#分析如下：-1\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><p>但是这种解法却没有通过测试，具体情况是：</p>\n<pre><code>- 超时，给出一个超长的&quot;aaaaaaa...aaa&quot;字符串\n</code></pre><p>这就要求我找到一个效率更高的解法。</p>\n<h4 id=\"分析解法\"><a href=\"#分析解法\" class=\"headerlink\" title=\"分析解法\"></a>分析解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var shortestPalindrome = function(s) &#123;</span><br><span class=\"line\">    var prefix = &quot;&quot;;</span><br><span class=\"line\">    var pos, head, tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    for(pos = head = tail = parseInt(s.length / 2); pos &gt; 0; head = tail = --pos)&#123;</span><br><span class=\"line\">        while(head !== 0 &amp;&amp; s[head - 1] === s[head])&#123;</span><br><span class=\"line\">            head--; pos--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(tail != s.length - 1 &amp;&amp; s[tail + 1] === s[tail])&#123;</span><br><span class=\"line\">            tail++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var isSame = true;</span><br><span class=\"line\">        while(head &gt;= 0)&#123;</span><br><span class=\"line\">            if(s[head] !== s[tail])&#123;</span><br><span class=\"line\">                isSame = false;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            head--; tail++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(isSame)&#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for(var k = s.length - 1; k &gt;= tail &amp;&amp; k !== 0; k--)&#123;</span><br><span class=\"line\">        prefix += s[k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return prefix + s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：-2\"><a href=\"#分析如下：-2\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><pre><code>1. 思路：\n    * 取一个点，也就是期望的回文中心，把head和tail都指向它，先找前后相同的数，调整指针位置，然后head--, tail++这样找回文。\n    * 如果head等于0，说明找到了，倒着输出tail后面的字符加上input的字符串就是答案。\n    * 字符串中间和中间之前的点才有可能是回文的中心，后一半可以排除。\n    * 回文中心可能是单个或多个字母，如果是多个字母，他们肯定都是相同的。\n2. 变量设置\n    * prefix：用来存储原字符串中非回文部分的倒序\n    * pos：回文中心点\n    * head：回文头位置\n    * tail：回文尾位置\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上遇见的有意思、有难度或者有其他精彩答案的题目。<br>所用语言为JavaScript。</p>\n<hr>\n<h3 id=\"题目号码：214（hard）\"><a href=\"#题目号码：214（hard）\" class=\"headerlink\" title=\"题目号码：214（hard）\"></a>题目号码：214（hard）</h3><hr>\n<blockquote>\n<p><strong>Shortest Palindrome:</strong><br>Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it.<br>Find and return the shortest palindrome you can find by performing this transformation.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>Given “aacecaaa”, return “aaacecaaa”.</li>\n<li>Given “abcd”, return “dcbabcd”.</li>\n</ul>\n</blockquote>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>给定一个字符串S，可以通过在它前面添加字符将其转换为回文。通过执行这个转换，找到并返回最短的回文。</p>\n<hr>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>从字符串结尾开始遍历，与字符串开头对应位置的字母进行比较，如果不一致则插入一个相同的字母来形成回文</p>\n<h4 id=\"我的解法\"><a href=\"#我的解法\" class=\"headerlink\" title=\"我的解法\"></a>我的解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class=\"line\">    for(var i=s.length-1; i&gt;=0; i--)&#123;</span><br><span class=\"line\">        if(s[i] !== s[s.length-1-i])&#123;</span><br><span class=\"line\">            var s1 = s.substr(0,s.length-1-i);</span><br><span class=\"line\">            var s2 = s.substring(s.length-1-i);</span><br><span class=\"line\">            var ss = s[i];</span><br><span class=\"line\">            s = &apos;&apos;+s1+ss+s2;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><p>但是这种解法却没有通过测试，具体情况是：</p>\n<pre><code>- 给出字符串 &quot;aabba&quot;\n- 我的输出结果为 &quot;abbabba&quot;\n- 期望输出结果为 &quot;abbaabba&quot;\n</code></pre><h2 id=\"乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\"><a href=\"#乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\" class=\"headerlink\" title=\"乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\"></a>乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。</h2><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>既然只能在给定字符串开头插入，那么就是说我需要找到给出字符串中自开头最大的回文子串，然后把剩下的字符串颠倒顺序插入即可。</p>\n<h4 id=\"我的解法-1\"><a href=\"#我的解法-1\" class=\"headerlink\" title=\"我的解法\"></a>我的解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var findMaxIndex = function(s)&#123;</span><br><span class=\"line\">    for(var i=s.length-1; i&gt;=0; i--)&#123;</span><br><span class=\"line\">        if(s[i] != s[s.length-1-i])&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var shortestPalindrome = function(s) &#123;</span><br><span class=\"line\">    var index;</span><br><span class=\"line\">    if(s.length == 1)&#123; return s; &#125;</span><br><span class=\"line\">    for(var i=s.length; i&gt;0; i--)&#123;</span><br><span class=\"line\">        var s0 = s.substring(0,i);</span><br><span class=\"line\">        if(!findMaxIndex(s0))&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            index = i;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var s1 = s.substr(0,index);</span><br><span class=\"line\">    var s2 = s.substring(index);</span><br><span class=\"line\">    var ss = s2.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class=\"line\">    return ss + s1 + s2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：-1\"><a href=\"#分析如下：-1\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><p>但是这种解法却没有通过测试，具体情况是：</p>\n<pre><code>- 超时，给出一个超长的&quot;aaaaaaa...aaa&quot;字符串\n</code></pre><p>这就要求我找到一个效率更高的解法。</p>\n<h4 id=\"分析解法\"><a href=\"#分析解法\" class=\"headerlink\" title=\"分析解法\"></a>分析解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var shortestPalindrome = function(s) &#123;</span><br><span class=\"line\">    var prefix = &quot;&quot;;</span><br><span class=\"line\">    var pos, head, tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    for(pos = head = tail = parseInt(s.length / 2); pos &gt; 0; head = tail = --pos)&#123;</span><br><span class=\"line\">        while(head !== 0 &amp;&amp; s[head - 1] === s[head])&#123;</span><br><span class=\"line\">            head--; pos--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(tail != s.length - 1 &amp;&amp; s[tail + 1] === s[tail])&#123;</span><br><span class=\"line\">            tail++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var isSame = true;</span><br><span class=\"line\">        while(head &gt;= 0)&#123;</span><br><span class=\"line\">            if(s[head] !== s[tail])&#123;</span><br><span class=\"line\">                isSame = false;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            head--; tail++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(isSame)&#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for(var k = s.length - 1; k &gt;= tail &amp;&amp; k !== 0; k--)&#123;</span><br><span class=\"line\">        prefix += s[k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return prefix + s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：-2\"><a href=\"#分析如下：-2\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><pre><code>1. 思路：\n    * 取一个点，也就是期望的回文中心，把head和tail都指向它，先找前后相同的数，调整指针位置，然后head--, tail++这样找回文。\n    * 如果head等于0，说明找到了，倒着输出tail后面的字符加上input的字符串就是答案。\n    * 字符串中间和中间之前的点才有可能是回文的中心，后一半可以排除。\n    * 回文中心可能是单个或多个字母，如果是多个字母，他们肯定都是相同的。\n2. 变量设置\n    * prefix：用来存储原字符串中非回文部分的倒序\n    * pos：回文中心点\n    * head：回文头位置\n    * tail：回文尾位置\n</code></pre>"},{"layout":"post","title":"ES6复习笔记(一)","date":"2018-07-26T16:00:00.000Z","author":"Ai Shuangying","_content":"\n\n最近不太忙，把阮一峰老师的[ES6入门](http://es6.ruanyifeng.com/)再看一遍，这次做些笔记。\n\n看到哪里就把记不清的点记录下来，所以不会很连贯，初学者还是通读一遍比较好，欢迎购买实体书支持作者。\n\n----------\n\n\n### let 和 const\n-------------\n\nlet 其实是ES6很重要的一个点，在于它引入了块的概念，在块级作用域中let和const声明的变量有一下几个点：\n\n* 不存在变量提示，及声明之前调用会报错\n* 同一个块级作用域内不能重复声明\n* 声明的变量只在块级作用域内有效，不会污染外部变量\n* 存在暂时性死区，及存在let的块级作用域在变量声明之前使用变量就会报错\n* const保证的是变量指向的内存地址保存的数据不得变动，例外的是对象数组这类复合型数据，内存地址保存的是指针，所以这里变量不可赋值，但可以修改\n* 声明的全局对象不再是顶层对象的属性\n\n关于const\n\n```\n//可修改的对象属性\n    const foo = {};\n    // 为 foo 添加一个属性，可以成功\n    foo.prop = 123;\n    foo.prop // 得到123\n\n    const a = [];\n    a.push('Hello'); // 可执行\n    a.length = 0;    // 可执行\n    a = ['Dave'];    // 报错\n```\n真实的对象冻结\n```\n    const foo = Object.freeze({});\n\n    // 常规模式时，下面一行不起作用；\n    // 严格模式时，该行会报错\n    foo.prop = 123;\n\n    //将对象以及对象的属性彻底冻结的函数\n    var constantize = (obj) => {\n        Object.freeze(obj);\n        Object.keys(obj).forEach( (key, i) => {\n            if ( typeof obj[key] === 'object' ) {\n                constantize( obj[key] );\n            }\n        });\n    };\n```\n\n### 解构赋值\n-------------\n\n按照一定模式，从数组和对象中提取值，对变量进行赋值。其实就是一种模式匹配，等号两边模式相同则对位赋值\n\n\n#### 数组的解构赋值\n```\n    let [foo, [[bar], baz]] = [1, [[2], 3]];\n\n    let [head, ...tail] = [1, 2, 3, 4];\n\n    //指定默认值的解构赋值\n    let [x, y = 'b'] = ['a']; // x='a', y='b'\n    //默认值只有在赋值对象严格等于undefined的情况下才会生效\n    let [x = 1] = [undefined];  // x = 1\n    let [x = 1] = [null];       // x = null\n\n    function f() { console.log('aaa'); }\n    let [x = f()] = [1];        // f() 不会执行\n\n    let arr = [1, 2, 3];\n    let {0 : first, [arr.length - 1] : last} = arr;     //方括号这种写法，属于“属性名表达式”\n    first // 1\n    last // 3\n```\n\n#### 对象的解构赋值\n```\n    let { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\n    foo // \"aaa\"\n    bar // \"bbb\"\n\n    //如果变量名和属性名不一致，那么就要写成完整版的才能生效\n    let obj = { first: 'hello', last: 'world' };\n    let { first: f, last: l } = obj;\n    f // 'hello'\n    l // 'world'\n\n    //也就是说第一种写法只是let { foo:foo, bar:bar } = { foo: \"aaa\", bar: \"bbb\" }的简写形式\n\n    //嵌套结构\n    const node = {\n        loc: {\n            start: {\n                line: 1,\n                column: 5\n            }\n        }\n    };\n    let { loc, loc: { start }, loc: { start: { line }} } = node;\n    line // 1\n    loc  // Object {start: Object}\n    start // Object {line: 1, column: 5}\n\n    //嵌套赋值\n    let obj = {};\n    let arr = [];\n    ({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true });\n\n    obj // {prop:123}\n    arr // [true]\n```\n对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n//给已经声明的变量进行赋值要小心，不然会出现以下错误\n```\n    // 错误的写法\n    let x;\n    {x} = {x: 1};   // SyntaxError: syntax error\n    //报错原因：JavaScript 引擎会将{x}理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。\n\n    // 正确的写法\n    let x;\n    ({x} = {x: 1});\n```\n\n#### 字符串的解构赋值\n```\n    const [a, b, c, d, e] = 'hello';    //此时字符串被转换成了一个类似数组的对象\n    a // \"h\"\n    b // \"e\"\n    c // \"l\"\n    d // \"l\"\n    e // \"o\"\n\n    let {length : len} = 'hello';\n    len // 5\n```\n\n#### 解构赋值的用途\n```\n    //交换变量的值\n    let x = 1;\n    let y = 2;\n    [x, y] = [y, x];\n\n    //从函数返回多个值\n    // 返回一个数组\n    function example() {\n        return [1, 2, 3];\n    }\n    let [a, b, c] = example();\n    // 返回一个对象\n    function example() {\n        return {\n            foo: 1,\n            bar: 2\n        };\n    }\n    let { foo, bar } = example();\n\n    //提取JSON中的值\n    let jsonData = {\n        id: 42,\n        status: \"OK\",\n        data: [867, 5309]\n    };\n    let { id, status, data: number } = jsonData;\n\n    //函数参数的默认值\n    jQuery.ajax = function (url, {\n        async = true,\n        beforeSend = function () {},\n        cache = true,\n        complete = function () {},\n        crossDomain = false,\n        global = true\n    } = {}) {\n        // ... do stuff\n    };\n```\n","source":"_posts/es6-notebook01.md","raw":"---\nlayout: post\ntitle: \"ES6复习笔记(一)\"\ndate: 2018-7-27\nauthor: \"Ai Shuangying\"\ntags:\n\t- ES6\n---\n\n\n最近不太忙，把阮一峰老师的[ES6入门](http://es6.ruanyifeng.com/)再看一遍，这次做些笔记。\n\n看到哪里就把记不清的点记录下来，所以不会很连贯，初学者还是通读一遍比较好，欢迎购买实体书支持作者。\n\n----------\n\n\n### let 和 const\n-------------\n\nlet 其实是ES6很重要的一个点，在于它引入了块的概念，在块级作用域中let和const声明的变量有一下几个点：\n\n* 不存在变量提示，及声明之前调用会报错\n* 同一个块级作用域内不能重复声明\n* 声明的变量只在块级作用域内有效，不会污染外部变量\n* 存在暂时性死区，及存在let的块级作用域在变量声明之前使用变量就会报错\n* const保证的是变量指向的内存地址保存的数据不得变动，例外的是对象数组这类复合型数据，内存地址保存的是指针，所以这里变量不可赋值，但可以修改\n* 声明的全局对象不再是顶层对象的属性\n\n关于const\n\n```\n//可修改的对象属性\n    const foo = {};\n    // 为 foo 添加一个属性，可以成功\n    foo.prop = 123;\n    foo.prop // 得到123\n\n    const a = [];\n    a.push('Hello'); // 可执行\n    a.length = 0;    // 可执行\n    a = ['Dave'];    // 报错\n```\n真实的对象冻结\n```\n    const foo = Object.freeze({});\n\n    // 常规模式时，下面一行不起作用；\n    // 严格模式时，该行会报错\n    foo.prop = 123;\n\n    //将对象以及对象的属性彻底冻结的函数\n    var constantize = (obj) => {\n        Object.freeze(obj);\n        Object.keys(obj).forEach( (key, i) => {\n            if ( typeof obj[key] === 'object' ) {\n                constantize( obj[key] );\n            }\n        });\n    };\n```\n\n### 解构赋值\n-------------\n\n按照一定模式，从数组和对象中提取值，对变量进行赋值。其实就是一种模式匹配，等号两边模式相同则对位赋值\n\n\n#### 数组的解构赋值\n```\n    let [foo, [[bar], baz]] = [1, [[2], 3]];\n\n    let [head, ...tail] = [1, 2, 3, 4];\n\n    //指定默认值的解构赋值\n    let [x, y = 'b'] = ['a']; // x='a', y='b'\n    //默认值只有在赋值对象严格等于undefined的情况下才会生效\n    let [x = 1] = [undefined];  // x = 1\n    let [x = 1] = [null];       // x = null\n\n    function f() { console.log('aaa'); }\n    let [x = f()] = [1];        // f() 不会执行\n\n    let arr = [1, 2, 3];\n    let {0 : first, [arr.length - 1] : last} = arr;     //方括号这种写法，属于“属性名表达式”\n    first // 1\n    last // 3\n```\n\n#### 对象的解构赋值\n```\n    let { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\n    foo // \"aaa\"\n    bar // \"bbb\"\n\n    //如果变量名和属性名不一致，那么就要写成完整版的才能生效\n    let obj = { first: 'hello', last: 'world' };\n    let { first: f, last: l } = obj;\n    f // 'hello'\n    l // 'world'\n\n    //也就是说第一种写法只是let { foo:foo, bar:bar } = { foo: \"aaa\", bar: \"bbb\" }的简写形式\n\n    //嵌套结构\n    const node = {\n        loc: {\n            start: {\n                line: 1,\n                column: 5\n            }\n        }\n    };\n    let { loc, loc: { start }, loc: { start: { line }} } = node;\n    line // 1\n    loc  // Object {start: Object}\n    start // Object {line: 1, column: 5}\n\n    //嵌套赋值\n    let obj = {};\n    let arr = [];\n    ({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true });\n\n    obj // {prop:123}\n    arr // [true]\n```\n对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n//给已经声明的变量进行赋值要小心，不然会出现以下错误\n```\n    // 错误的写法\n    let x;\n    {x} = {x: 1};   // SyntaxError: syntax error\n    //报错原因：JavaScript 引擎会将{x}理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。\n\n    // 正确的写法\n    let x;\n    ({x} = {x: 1});\n```\n\n#### 字符串的解构赋值\n```\n    const [a, b, c, d, e] = 'hello';    //此时字符串被转换成了一个类似数组的对象\n    a // \"h\"\n    b // \"e\"\n    c // \"l\"\n    d // \"l\"\n    e // \"o\"\n\n    let {length : len} = 'hello';\n    len // 5\n```\n\n#### 解构赋值的用途\n```\n    //交换变量的值\n    let x = 1;\n    let y = 2;\n    [x, y] = [y, x];\n\n    //从函数返回多个值\n    // 返回一个数组\n    function example() {\n        return [1, 2, 3];\n    }\n    let [a, b, c] = example();\n    // 返回一个对象\n    function example() {\n        return {\n            foo: 1,\n            bar: 2\n        };\n    }\n    let { foo, bar } = example();\n\n    //提取JSON中的值\n    let jsonData = {\n        id: 42,\n        status: \"OK\",\n        data: [867, 5309]\n    };\n    let { id, status, data: number } = jsonData;\n\n    //函数参数的默认值\n    jQuery.ajax = function (url, {\n        async = true,\n        beforeSend = function () {},\n        cache = true,\n        complete = function () {},\n        crossDomain = false,\n        global = true\n    } = {}) {\n        // ... do stuff\n    };\n```\n","slug":"es6-notebook01","published":1,"updated":"2018-07-27T06:16:33.376Z","comments":1,"photos":[],"link":"","_id":"cjkvxydww000t5xfawxxy7boz","content":"<p>最近不太忙，把阮一峰老师的<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ES6入门</a>再看一遍，这次做些笔记。</p>\n<p>看到哪里就把记不清的点记录下来，所以不会很连贯，初学者还是通读一遍比较好，欢迎购买实体书支持作者。</p>\n<hr>\n<h3 id=\"let-和-const\"><a href=\"#let-和-const\" class=\"headerlink\" title=\"let 和 const\"></a>let 和 const</h3><hr>\n<p>let 其实是ES6很重要的一个点，在于它引入了块的概念，在块级作用域中let和const声明的变量有一下几个点：</p>\n<ul>\n<li>不存在变量提示，及声明之前调用会报错</li>\n<li>同一个块级作用域内不能重复声明</li>\n<li>声明的变量只在块级作用域内有效，不会污染外部变量</li>\n<li>存在暂时性死区，及存在let的块级作用域在变量声明之前使用变量就会报错</li>\n<li>const保证的是变量指向的内存地址保存的数据不得变动，例外的是对象数组这类复合型数据，内存地址保存的是指针，所以这里变量不可赋值，但可以修改</li>\n<li>声明的全局对象不再是顶层对象的属性</li>\n</ul>\n<p>关于const</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可修改的对象属性</span><br><span class=\"line\">    const foo = &#123;&#125;;</span><br><span class=\"line\">    // 为 foo 添加一个属性，可以成功</span><br><span class=\"line\">    foo.prop = 123;</span><br><span class=\"line\">    foo.prop // 得到123</span><br><span class=\"line\"></span><br><span class=\"line\">    const a = [];</span><br><span class=\"line\">    a.push(&apos;Hello&apos;); // 可执行</span><br><span class=\"line\">    a.length = 0;    // 可执行</span><br><span class=\"line\">    a = [&apos;Dave&apos;];    // 报错</span><br></pre></td></tr></table></figure>\n<p>真实的对象冻结<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const foo = Object.freeze(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 常规模式时，下面一行不起作用；</span><br><span class=\"line\">// 严格模式时，该行会报错</span><br><span class=\"line\">foo.prop = 123;</span><br><span class=\"line\"></span><br><span class=\"line\">//将对象以及对象的属性彻底冻结的函数</span><br><span class=\"line\">var constantize = (obj) =&gt; &#123;</span><br><span class=\"line\">    Object.freeze(obj);</span><br><span class=\"line\">    Object.keys(obj).forEach( (key, i) =&gt; &#123;</span><br><span class=\"line\">        if ( typeof obj[key] === &apos;object&apos; ) &#123;</span><br><span class=\"line\">            constantize( obj[key] );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><hr>\n<p>按照一定模式，从数组和对象中提取值，对变量进行赋值。其实就是一种模式匹配，等号两边模式相同则对位赋值</p>\n<h4 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [foo, [[bar], baz]] = [1, [[2], 3]];</span><br><span class=\"line\"></span><br><span class=\"line\">let [head, ...tail] = [1, 2, 3, 4];</span><br><span class=\"line\"></span><br><span class=\"line\">//指定默认值的解构赋值</span><br><span class=\"line\">let [x, y = &apos;b&apos;] = [&apos;a&apos;]; // x=&apos;a&apos;, y=&apos;b&apos;</span><br><span class=\"line\">//默认值只有在赋值对象严格等于undefined的情况下才会生效</span><br><span class=\"line\">let [x = 1] = [undefined];  // x = 1</span><br><span class=\"line\">let [x = 1] = [null];       // x = null</span><br><span class=\"line\"></span><br><span class=\"line\">function f() &#123; console.log(&apos;aaa&apos;); &#125;</span><br><span class=\"line\">let [x = f()] = [1];        // f() 不会执行</span><br><span class=\"line\"></span><br><span class=\"line\">let arr = [1, 2, 3];</span><br><span class=\"line\">let &#123;0 : first, [arr.length - 1] : last&#125; = arr;     //方括号这种写法，属于“属性名表达式”</span><br><span class=\"line\">first // 1</span><br><span class=\"line\">last // 3</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123; foo, bar &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;;</span><br><span class=\"line\">foo // &quot;aaa&quot;</span><br><span class=\"line\">bar // &quot;bbb&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//如果变量名和属性名不一致，那么就要写成完整版的才能生效</span><br><span class=\"line\">let obj = &#123; first: &apos;hello&apos;, last: &apos;world&apos; &#125;;</span><br><span class=\"line\">let &#123; first: f, last: l &#125; = obj;</span><br><span class=\"line\">f // &apos;hello&apos;</span><br><span class=\"line\">l // &apos;world&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">//也就是说第一种写法只是let &#123; foo:foo, bar:bar &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;的简写形式</span><br><span class=\"line\"></span><br><span class=\"line\">//嵌套结构</span><br><span class=\"line\">const node = &#123;</span><br><span class=\"line\">    loc: &#123;</span><br><span class=\"line\">        start: &#123;</span><br><span class=\"line\">            line: 1,</span><br><span class=\"line\">            column: 5</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let &#123; loc, loc: &#123; start &#125;, loc: &#123; start: &#123; line &#125;&#125; &#125; = node;</span><br><span class=\"line\">line // 1</span><br><span class=\"line\">loc  // Object &#123;start: Object&#125;</span><br><span class=\"line\">start // Object &#123;line: 1, column: 5&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//嵌套赋值</span><br><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">let arr = [];</span><br><span class=\"line\">(&#123; foo: obj.prop, bar: arr[0] &#125; = &#123; foo: 123, bar: true &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj // &#123;prop:123&#125;</span><br><span class=\"line\">arr // [true]</span><br></pre></td></tr></table></figure>\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<p>//给已经声明的变量进行赋值要小心，不然会出现以下错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误的写法</span><br><span class=\"line\">let x;</span><br><span class=\"line\">&#123;x&#125; = &#123;x: 1&#125;;   // SyntaxError: syntax error</span><br><span class=\"line\">//报错原因：JavaScript 引擎会将&#123;x&#125;理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</span><br><span class=\"line\"></span><br><span class=\"line\">// 正确的写法</span><br><span class=\"line\">let x;</span><br><span class=\"line\">(&#123;x&#125; = &#123;x: 1&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [a, b, c, d, e] = &apos;hello&apos;;    //此时字符串被转换成了一个类似数组的对象</span><br><span class=\"line\">a // &quot;h&quot;</span><br><span class=\"line\">b // &quot;e&quot;</span><br><span class=\"line\">c // &quot;l&quot;</span><br><span class=\"line\">d // &quot;l&quot;</span><br><span class=\"line\">e // &quot;o&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">let &#123;length : len&#125; = &apos;hello&apos;;</span><br><span class=\"line\">len // 5</span><br></pre></td></tr></table></figure>\n<h4 id=\"解构赋值的用途\"><a href=\"#解构赋值的用途\" class=\"headerlink\" title=\"解构赋值的用途\"></a>解构赋值的用途</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//交换变量的值</span><br><span class=\"line\">let x = 1;</span><br><span class=\"line\">let y = 2;</span><br><span class=\"line\">[x, y] = [y, x];</span><br><span class=\"line\"></span><br><span class=\"line\">//从函数返回多个值</span><br><span class=\"line\">// 返回一个数组</span><br><span class=\"line\">function example() &#123;</span><br><span class=\"line\">    return [1, 2, 3];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let [a, b, c] = example();</span><br><span class=\"line\">// 返回一个对象</span><br><span class=\"line\">function example() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        foo: 1,</span><br><span class=\"line\">        bar: 2</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let &#123; foo, bar &#125; = example();</span><br><span class=\"line\"></span><br><span class=\"line\">//提取JSON中的值</span><br><span class=\"line\">let jsonData = &#123;</span><br><span class=\"line\">    id: 42,</span><br><span class=\"line\">    status: &quot;OK&quot;,</span><br><span class=\"line\">    data: [867, 5309]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let &#123; id, status, data: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\">//函数参数的默认值</span><br><span class=\"line\">jQuery.ajax = function (url, &#123;</span><br><span class=\"line\">    async = true,</span><br><span class=\"line\">    beforeSend = function () &#123;&#125;,</span><br><span class=\"line\">    cache = true,</span><br><span class=\"line\">    complete = function () &#123;&#125;,</span><br><span class=\"line\">    crossDomain = false,</span><br><span class=\"line\">    global = true</span><br><span class=\"line\">&#125; = &#123;&#125;) &#123;</span><br><span class=\"line\">    // ... do stuff</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近不太忙，把阮一峰老师的<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ES6入门</a>再看一遍，这次做些笔记。</p>\n<p>看到哪里就把记不清的点记录下来，所以不会很连贯，初学者还是通读一遍比较好，欢迎购买实体书支持作者。</p>\n<hr>\n<h3 id=\"let-和-const\"><a href=\"#let-和-const\" class=\"headerlink\" title=\"let 和 const\"></a>let 和 const</h3><hr>\n<p>let 其实是ES6很重要的一个点，在于它引入了块的概念，在块级作用域中let和const声明的变量有一下几个点：</p>\n<ul>\n<li>不存在变量提示，及声明之前调用会报错</li>\n<li>同一个块级作用域内不能重复声明</li>\n<li>声明的变量只在块级作用域内有效，不会污染外部变量</li>\n<li>存在暂时性死区，及存在let的块级作用域在变量声明之前使用变量就会报错</li>\n<li>const保证的是变量指向的内存地址保存的数据不得变动，例外的是对象数组这类复合型数据，内存地址保存的是指针，所以这里变量不可赋值，但可以修改</li>\n<li>声明的全局对象不再是顶层对象的属性</li>\n</ul>\n<p>关于const</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可修改的对象属性</span><br><span class=\"line\">    const foo = &#123;&#125;;</span><br><span class=\"line\">    // 为 foo 添加一个属性，可以成功</span><br><span class=\"line\">    foo.prop = 123;</span><br><span class=\"line\">    foo.prop // 得到123</span><br><span class=\"line\"></span><br><span class=\"line\">    const a = [];</span><br><span class=\"line\">    a.push(&apos;Hello&apos;); // 可执行</span><br><span class=\"line\">    a.length = 0;    // 可执行</span><br><span class=\"line\">    a = [&apos;Dave&apos;];    // 报错</span><br></pre></td></tr></table></figure>\n<p>真实的对象冻结<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const foo = Object.freeze(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 常规模式时，下面一行不起作用；</span><br><span class=\"line\">// 严格模式时，该行会报错</span><br><span class=\"line\">foo.prop = 123;</span><br><span class=\"line\"></span><br><span class=\"line\">//将对象以及对象的属性彻底冻结的函数</span><br><span class=\"line\">var constantize = (obj) =&gt; &#123;</span><br><span class=\"line\">    Object.freeze(obj);</span><br><span class=\"line\">    Object.keys(obj).forEach( (key, i) =&gt; &#123;</span><br><span class=\"line\">        if ( typeof obj[key] === &apos;object&apos; ) &#123;</span><br><span class=\"line\">            constantize( obj[key] );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><hr>\n<p>按照一定模式，从数组和对象中提取值，对变量进行赋值。其实就是一种模式匹配，等号两边模式相同则对位赋值</p>\n<h4 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [foo, [[bar], baz]] = [1, [[2], 3]];</span><br><span class=\"line\"></span><br><span class=\"line\">let [head, ...tail] = [1, 2, 3, 4];</span><br><span class=\"line\"></span><br><span class=\"line\">//指定默认值的解构赋值</span><br><span class=\"line\">let [x, y = &apos;b&apos;] = [&apos;a&apos;]; // x=&apos;a&apos;, y=&apos;b&apos;</span><br><span class=\"line\">//默认值只有在赋值对象严格等于undefined的情况下才会生效</span><br><span class=\"line\">let [x = 1] = [undefined];  // x = 1</span><br><span class=\"line\">let [x = 1] = [null];       // x = null</span><br><span class=\"line\"></span><br><span class=\"line\">function f() &#123; console.log(&apos;aaa&apos;); &#125;</span><br><span class=\"line\">let [x = f()] = [1];        // f() 不会执行</span><br><span class=\"line\"></span><br><span class=\"line\">let arr = [1, 2, 3];</span><br><span class=\"line\">let &#123;0 : first, [arr.length - 1] : last&#125; = arr;     //方括号这种写法，属于“属性名表达式”</span><br><span class=\"line\">first // 1</span><br><span class=\"line\">last // 3</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123; foo, bar &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;;</span><br><span class=\"line\">foo // &quot;aaa&quot;</span><br><span class=\"line\">bar // &quot;bbb&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//如果变量名和属性名不一致，那么就要写成完整版的才能生效</span><br><span class=\"line\">let obj = &#123; first: &apos;hello&apos;, last: &apos;world&apos; &#125;;</span><br><span class=\"line\">let &#123; first: f, last: l &#125; = obj;</span><br><span class=\"line\">f // &apos;hello&apos;</span><br><span class=\"line\">l // &apos;world&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">//也就是说第一种写法只是let &#123; foo:foo, bar:bar &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;的简写形式</span><br><span class=\"line\"></span><br><span class=\"line\">//嵌套结构</span><br><span class=\"line\">const node = &#123;</span><br><span class=\"line\">    loc: &#123;</span><br><span class=\"line\">        start: &#123;</span><br><span class=\"line\">            line: 1,</span><br><span class=\"line\">            column: 5</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let &#123; loc, loc: &#123; start &#125;, loc: &#123; start: &#123; line &#125;&#125; &#125; = node;</span><br><span class=\"line\">line // 1</span><br><span class=\"line\">loc  // Object &#123;start: Object&#125;</span><br><span class=\"line\">start // Object &#123;line: 1, column: 5&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//嵌套赋值</span><br><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">let arr = [];</span><br><span class=\"line\">(&#123; foo: obj.prop, bar: arr[0] &#125; = &#123; foo: 123, bar: true &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj // &#123;prop:123&#125;</span><br><span class=\"line\">arr // [true]</span><br></pre></td></tr></table></figure>\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<p>//给已经声明的变量进行赋值要小心，不然会出现以下错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误的写法</span><br><span class=\"line\">let x;</span><br><span class=\"line\">&#123;x&#125; = &#123;x: 1&#125;;   // SyntaxError: syntax error</span><br><span class=\"line\">//报错原因：JavaScript 引擎会将&#123;x&#125;理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</span><br><span class=\"line\"></span><br><span class=\"line\">// 正确的写法</span><br><span class=\"line\">let x;</span><br><span class=\"line\">(&#123;x&#125; = &#123;x: 1&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [a, b, c, d, e] = &apos;hello&apos;;    //此时字符串被转换成了一个类似数组的对象</span><br><span class=\"line\">a // &quot;h&quot;</span><br><span class=\"line\">b // &quot;e&quot;</span><br><span class=\"line\">c // &quot;l&quot;</span><br><span class=\"line\">d // &quot;l&quot;</span><br><span class=\"line\">e // &quot;o&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">let &#123;length : len&#125; = &apos;hello&apos;;</span><br><span class=\"line\">len // 5</span><br></pre></td></tr></table></figure>\n<h4 id=\"解构赋值的用途\"><a href=\"#解构赋值的用途\" class=\"headerlink\" title=\"解构赋值的用途\"></a>解构赋值的用途</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//交换变量的值</span><br><span class=\"line\">let x = 1;</span><br><span class=\"line\">let y = 2;</span><br><span class=\"line\">[x, y] = [y, x];</span><br><span class=\"line\"></span><br><span class=\"line\">//从函数返回多个值</span><br><span class=\"line\">// 返回一个数组</span><br><span class=\"line\">function example() &#123;</span><br><span class=\"line\">    return [1, 2, 3];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let [a, b, c] = example();</span><br><span class=\"line\">// 返回一个对象</span><br><span class=\"line\">function example() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        foo: 1,</span><br><span class=\"line\">        bar: 2</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let &#123; foo, bar &#125; = example();</span><br><span class=\"line\"></span><br><span class=\"line\">//提取JSON中的值</span><br><span class=\"line\">let jsonData = &#123;</span><br><span class=\"line\">    id: 42,</span><br><span class=\"line\">    status: &quot;OK&quot;,</span><br><span class=\"line\">    data: [867, 5309]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let &#123; id, status, data: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\">//函数参数的默认值</span><br><span class=\"line\">jQuery.ajax = function (url, &#123;</span><br><span class=\"line\">    async = true,</span><br><span class=\"line\">    beforeSend = function () &#123;&#125;,</span><br><span class=\"line\">    cache = true,</span><br><span class=\"line\">    complete = function () &#123;&#125;,</span><br><span class=\"line\">    crossDomain = false,</span><br><span class=\"line\">    global = true</span><br><span class=\"line\">&#125; = &#123;&#125;) &#123;</span><br><span class=\"line\">    // ... do stuff</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"简单的JQuery插件开发","date":"2018-05-19T16:00:00.000Z","author":"Ai Shuangying","_content":"\n\n最近手头的项目突然变成了jQuery项目，基于里面有很多共用的部分，为了最大限度得简洁代码，有没有合适的模块化方式，所以我干脆将其封装成jQuery的插件，通过预留容器、简单配置来达到各个页面共用的目的，目前处理了两个插件了，效果还不错。\n\n[Github-HESC插件](https://github.com/AiYooooo/HESC-jquery-plugins)\n\n----------\n\n\n#### 简单的插件模板\n-------------\n\n```\n; (function ($, window, document, undefined) {\n    \"use strict\";\n    var defaults = {\n        \n    };\n    function PluginName($ele, options) {\n        this.$ele = $ele;\n        this.options = options = $.extend(defaults, options || {});\n        this.init();\n    }\n    PluginName.prototype = {\n        constructor: PluginName,\n        init: function () {\n            this.renderHtml();\n            this.bindEvent();\n        },\n        renderHtml: function () {\n            //这里在容器里插入HTML\n        },\n        bindEvent: function () {\n            //这里针对HTML来绑定事件\n        },\n        clickPage: function (num) {\n            //这里是事件处理函数，通过下面的方式来调用外部定义的回调函数，做交互\n            this.options.chooseone(num);\n        }\n    };\n    $.fn.PluginName = function (options) {\n        options = $.extend(defaults, options || {});\n        return new PluginName($(this), options);\n    }\n})(jQuery, window, document);\n```\n\n而HTML页上则只需要预留一个容器接口\n\n在JS文件中初始化插件就可以了\n\n```\n    //HTML\n    <div id=\"plugin_wrap\"></div>\n\n    //JS\n    function choosepage (page){\n        console.log('选择了页码：'+page);\n    }   //监听回调\n    $('#pager').AiPager({\n        allpages: 20,\n        chooseone: choosepage\n    }); //在这里引入配置信息，回调函数也一起传入，在外面进行监听就可以了\n```\n\n这里有几个有意思的地方：\n\n    * 最佳实践： 把 jQuery 传递给 IIFE（立即调用函数），并通过它映射成 $ ，这样就避免了在执行的作用域里被其它库所覆盖\n    * 确保插件返回 this 关键字，这是为了保证插件的chainability（链式调用性）\n    * 通过 $.extend 来合并传入配置和默认配置，从而使得传入配置可以尽量少\n    * 永远不要在 jQuery.fn 对象中声明一个以上的名称空间\n    * bind绑定事件时为绑定事件定义名称空间 $(window).bind('resize.tooltip', methods.reposition); $(window).unbind('.tooltip');\n\n\n\n#### 存在问题\n-------------\n\n本着结构与样式分离的原则，这样的插件化除了需要引入相应的js文件外，还需要引入对应的css文件，略显繁琐，更好的处理方法待补充。\n\n\n","source":"_posts/jQueryPlugins.md","raw":"---\nlayout: post\ntitle: \"简单的JQuery插件开发\"\ndate: 2018-5-20\nauthor: \"Ai Shuangying\"\ntags:\n\t- JavaScript\n---\n\n\n最近手头的项目突然变成了jQuery项目，基于里面有很多共用的部分，为了最大限度得简洁代码，有没有合适的模块化方式，所以我干脆将其封装成jQuery的插件，通过预留容器、简单配置来达到各个页面共用的目的，目前处理了两个插件了，效果还不错。\n\n[Github-HESC插件](https://github.com/AiYooooo/HESC-jquery-plugins)\n\n----------\n\n\n#### 简单的插件模板\n-------------\n\n```\n; (function ($, window, document, undefined) {\n    \"use strict\";\n    var defaults = {\n        \n    };\n    function PluginName($ele, options) {\n        this.$ele = $ele;\n        this.options = options = $.extend(defaults, options || {});\n        this.init();\n    }\n    PluginName.prototype = {\n        constructor: PluginName,\n        init: function () {\n            this.renderHtml();\n            this.bindEvent();\n        },\n        renderHtml: function () {\n            //这里在容器里插入HTML\n        },\n        bindEvent: function () {\n            //这里针对HTML来绑定事件\n        },\n        clickPage: function (num) {\n            //这里是事件处理函数，通过下面的方式来调用外部定义的回调函数，做交互\n            this.options.chooseone(num);\n        }\n    };\n    $.fn.PluginName = function (options) {\n        options = $.extend(defaults, options || {});\n        return new PluginName($(this), options);\n    }\n})(jQuery, window, document);\n```\n\n而HTML页上则只需要预留一个容器接口\n\n在JS文件中初始化插件就可以了\n\n```\n    //HTML\n    <div id=\"plugin_wrap\"></div>\n\n    //JS\n    function choosepage (page){\n        console.log('选择了页码：'+page);\n    }   //监听回调\n    $('#pager').AiPager({\n        allpages: 20,\n        chooseone: choosepage\n    }); //在这里引入配置信息，回调函数也一起传入，在外面进行监听就可以了\n```\n\n这里有几个有意思的地方：\n\n    * 最佳实践： 把 jQuery 传递给 IIFE（立即调用函数），并通过它映射成 $ ，这样就避免了在执行的作用域里被其它库所覆盖\n    * 确保插件返回 this 关键字，这是为了保证插件的chainability（链式调用性）\n    * 通过 $.extend 来合并传入配置和默认配置，从而使得传入配置可以尽量少\n    * 永远不要在 jQuery.fn 对象中声明一个以上的名称空间\n    * bind绑定事件时为绑定事件定义名称空间 $(window).bind('resize.tooltip', methods.reposition); $(window).unbind('.tooltip');\n\n\n\n#### 存在问题\n-------------\n\n本着结构与样式分离的原则，这样的插件化除了需要引入相应的js文件外，还需要引入对应的css文件，略显繁琐，更好的处理方法待补充。\n\n\n","slug":"jQueryPlugins","published":1,"updated":"2018-05-22T07:54:20.642Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwx000v5xfa07damrga","content":"<p>最近手头的项目突然变成了jQuery项目，基于里面有很多共用的部分，为了最大限度得简洁代码，有没有合适的模块化方式，所以我干脆将其封装成jQuery的插件，通过预留容器、简单配置来达到各个页面共用的目的，目前处理了两个插件了，效果还不错。</p>\n<p><a href=\"https://github.com/AiYooooo/HESC-jquery-plugins\" target=\"_blank\" rel=\"noopener\">Github-HESC插件</a></p>\n<hr>\n<h4 id=\"简单的插件模板\"><a href=\"#简单的插件模板\" class=\"headerlink\" title=\"简单的插件模板\"></a>简单的插件模板</h4><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; (function ($, window, document, undefined) &#123;</span><br><span class=\"line\">    &quot;use strict&quot;;</span><br><span class=\"line\">    var defaults = &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    function PluginName($ele, options) &#123;</span><br><span class=\"line\">        this.$ele = $ele;</span><br><span class=\"line\">        this.options = options = $.extend(defaults, options || &#123;&#125;);</span><br><span class=\"line\">        this.init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    PluginName.prototype = &#123;</span><br><span class=\"line\">        constructor: PluginName,</span><br><span class=\"line\">        init: function () &#123;</span><br><span class=\"line\">            this.renderHtml();</span><br><span class=\"line\">            this.bindEvent();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        renderHtml: function () &#123;</span><br><span class=\"line\">            //这里在容器里插入HTML</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        bindEvent: function () &#123;</span><br><span class=\"line\">            //这里针对HTML来绑定事件</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        clickPage: function (num) &#123;</span><br><span class=\"line\">            //这里是事件处理函数，通过下面的方式来调用外部定义的回调函数，做交互</span><br><span class=\"line\">            this.options.chooseone(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    $.fn.PluginName = function (options) &#123;</span><br><span class=\"line\">        options = $.extend(defaults, options || &#123;&#125;);</span><br><span class=\"line\">        return new PluginName($(this), options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(jQuery, window, document);</span><br></pre></td></tr></table></figure>\n<p>而HTML页上则只需要预留一个容器接口</p>\n<p>在JS文件中初始化插件就可以了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//HTML</span><br><span class=\"line\">&lt;div id=&quot;plugin_wrap&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//JS</span><br><span class=\"line\">function choosepage (page)&#123;</span><br><span class=\"line\">    console.log(&apos;选择了页码：&apos;+page);</span><br><span class=\"line\">&#125;   //监听回调</span><br><span class=\"line\">$(&apos;#pager&apos;).AiPager(&#123;</span><br><span class=\"line\">    allpages: 20,</span><br><span class=\"line\">    chooseone: choosepage</span><br><span class=\"line\">&#125;); //在这里引入配置信息，回调函数也一起传入，在外面进行监听就可以了</span><br></pre></td></tr></table></figure>\n<p>这里有几个有意思的地方：</p>\n<pre><code>* 最佳实践： 把 jQuery 传递给 IIFE（立即调用函数），并通过它映射成 $ ，这样就避免了在执行的作用域里被其它库所覆盖\n* 确保插件返回 this 关键字，这是为了保证插件的chainability（链式调用性）\n* 通过 $.extend 来合并传入配置和默认配置，从而使得传入配置可以尽量少\n* 永远不要在 jQuery.fn 对象中声明一个以上的名称空间\n* bind绑定事件时为绑定事件定义名称空间 $(window).bind(&apos;resize.tooltip&apos;, methods.reposition); $(window).unbind(&apos;.tooltip&apos;);\n</code></pre><h4 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h4><hr>\n<p>本着结构与样式分离的原则，这样的插件化除了需要引入相应的js文件外，还需要引入对应的css文件，略显繁琐，更好的处理方法待补充。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近手头的项目突然变成了jQuery项目，基于里面有很多共用的部分，为了最大限度得简洁代码，有没有合适的模块化方式，所以我干脆将其封装成jQuery的插件，通过预留容器、简单配置来达到各个页面共用的目的，目前处理了两个插件了，效果还不错。</p>\n<p><a href=\"https://github.com/AiYooooo/HESC-jquery-plugins\" target=\"_blank\" rel=\"noopener\">Github-HESC插件</a></p>\n<hr>\n<h4 id=\"简单的插件模板\"><a href=\"#简单的插件模板\" class=\"headerlink\" title=\"简单的插件模板\"></a>简单的插件模板</h4><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; (function ($, window, document, undefined) &#123;</span><br><span class=\"line\">    &quot;use strict&quot;;</span><br><span class=\"line\">    var defaults = &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    function PluginName($ele, options) &#123;</span><br><span class=\"line\">        this.$ele = $ele;</span><br><span class=\"line\">        this.options = options = $.extend(defaults, options || &#123;&#125;);</span><br><span class=\"line\">        this.init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    PluginName.prototype = &#123;</span><br><span class=\"line\">        constructor: PluginName,</span><br><span class=\"line\">        init: function () &#123;</span><br><span class=\"line\">            this.renderHtml();</span><br><span class=\"line\">            this.bindEvent();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        renderHtml: function () &#123;</span><br><span class=\"line\">            //这里在容器里插入HTML</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        bindEvent: function () &#123;</span><br><span class=\"line\">            //这里针对HTML来绑定事件</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        clickPage: function (num) &#123;</span><br><span class=\"line\">            //这里是事件处理函数，通过下面的方式来调用外部定义的回调函数，做交互</span><br><span class=\"line\">            this.options.chooseone(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    $.fn.PluginName = function (options) &#123;</span><br><span class=\"line\">        options = $.extend(defaults, options || &#123;&#125;);</span><br><span class=\"line\">        return new PluginName($(this), options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(jQuery, window, document);</span><br></pre></td></tr></table></figure>\n<p>而HTML页上则只需要预留一个容器接口</p>\n<p>在JS文件中初始化插件就可以了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//HTML</span><br><span class=\"line\">&lt;div id=&quot;plugin_wrap&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//JS</span><br><span class=\"line\">function choosepage (page)&#123;</span><br><span class=\"line\">    console.log(&apos;选择了页码：&apos;+page);</span><br><span class=\"line\">&#125;   //监听回调</span><br><span class=\"line\">$(&apos;#pager&apos;).AiPager(&#123;</span><br><span class=\"line\">    allpages: 20,</span><br><span class=\"line\">    chooseone: choosepage</span><br><span class=\"line\">&#125;); //在这里引入配置信息，回调函数也一起传入，在外面进行监听就可以了</span><br></pre></td></tr></table></figure>\n<p>这里有几个有意思的地方：</p>\n<pre><code>* 最佳实践： 把 jQuery 传递给 IIFE（立即调用函数），并通过它映射成 $ ，这样就避免了在执行的作用域里被其它库所覆盖\n* 确保插件返回 this 关键字，这是为了保证插件的chainability（链式调用性）\n* 通过 $.extend 来合并传入配置和默认配置，从而使得传入配置可以尽量少\n* 永远不要在 jQuery.fn 对象中声明一个以上的名称空间\n* bind绑定事件时为绑定事件定义名称空间 $(window).bind(&apos;resize.tooltip&apos;, methods.reposition); $(window).unbind(&apos;.tooltip&apos;);\n</code></pre><h4 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h4><hr>\n<p>本着结构与样式分离的原则，这样的插件化除了需要引入相应的js文件外，还需要引入对应的css文件，略显繁琐，更好的处理方法待补充。</p>\n"},{"layout":"post","title":"fetch笔记","subtitle":"新的数据获取解决方案","date":"2018-03-02T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n最近的一个项目里尝试使用了fetch来获取数据，做个笔记备用。\n\n----------\n\n\n#### 简单了解\n-------------\n\nfetch实际上就是XMLHttpRequest的一种替代方案，同样是用来获取后台数据的。\n\n[MDN文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API#%E6%A6%82%E5%BF%B5%E5%92%8C%E7%94%A8%E6%B3%95)\n\n先来写个简单的形式：\n```\n\tfetch(url) \t\t\t\t\t\t\t\t// 请求一个url地址，返回一个Promise对象\n  \t\t.then((res)=>{\n  \t\t\tconsole.log(res.status);\t\t//拿到response的状态码\n    \t\treturn res.text() \t\t\t\t// 拿到这个res对象做处理\n  \t\t})\n  \t\t.then((text)=>{\n    \t\tconsole.log(text) \t\t\t\t// 处理过的数据进行操作\n  \t\t})\n  \t\t.catch(function(err){\n    \t\tconsole.log(\"Fetch错误:\"+err);\t//错误收集\n\t\t})\n```\n\n是不是很简单。\n\n接下来进行配置。\n\n-------------\n\n#### GET请求\n\n为fetch做配置应添加到fetch的第二个参数上，如果需要传参，只能拼接到url上了。\n\n```\n\tfetch(url+'?a=1&b=2', {\n    \t\tmethod: 'GET'\n  \t\t}) \t\t\t\t\t\t// GET方式请求一个url地址，返回一个Promise对象\n  \t\t.then((res)=>{\n    \t\treturn res.text() \t// 拿到这个res对象做处理\n  \t\t})\n  \t\t.then((text)=>{\n    \t\tconsole.log(text) \t// 处理过的数据进行操作\n  \t\t})\n```\n\n-------------\n\n#### POST请求\n\nPOST方式的参数应添加到body上，对于fetch的body，可以是以下任何类型的实例：\n\nPOST请求的默认头信息是：Content-Type:text/plain;charset=UTF-8，如果要修改头信息，请添加到headers里面。\n\n\n\t* ArrayBuffer\n\t* ArrayBufferView (Uint8Array and friends)\n\t* Blob/File\n\t* string\n\t* URLSearchParams\n\t* FormData\n\n```\n\tfetch(url, {\n    \t\tmethod: 'POST',\n    \t\theaders: new Headers({\n      \t\t\t'Content-Type': 'application/x-www-form-urlencoded' // 指定提交方式为表单提交\n    \t\t}),\n    \t\tbody: new URLSearchParams([[\"foo\", 1],[\"bar\", 2]]).toString() // 这里是请求对象\n  \t\t}) \t\t\t\t\t\t// GET方式请求一个url地址，返回一个Promise对象\n  \t\t.then((res)=>{\n    \t\treturn res.text() \t// 拿到这个res对象做处理\n  \t\t})\n  \t\t.then((text)=>{\n    \t\tconsole.log(text) \t// 处理过的数据进行操作\n  \t\t})\n```\n\n\n-------------\n\n#### 示例：获取JSON\n\n```\n\tfetch(url, {\n\t    \tmethod: 'GET',\n\t    \theaders: new Headers({\n\t      \t\t'Accept': 'application/json' // 通过头指定，获取的数据类型是JSON\n\t    \t})\n  \t\t})\n  \t\t.then((res)=>{\n    \t\treturn res.json() // 返回一个Promise，可以解析成JSON\n  \t\t})\n  \t\t.then((res)=>{\n    \t\tconsole.log(res) // 获取JSON数据\n  \t\t})\n```\n\n\n-------------\n\n#### 示例：带cookie\n\n默认情况下, fetch 不会从服务端发送或接收任何 cookies\n也就是说如果网站需要用户认证，直接发送fetch请求会无法识别(要发送 cookies，必须发送凭据头).\n\n```\n\tfetch(url, {\n\t    \tmethod: 'GET',\n\t    \tcredentials: 'include' // 强制加入凭据头\n  \t\t})\n  \t\t.then((res)=>{\n    \t\treturn res.json() // 返回一个Promise，可以解析成JSON\n  \t\t})\n  \t\t.then((res)=>{\n    \t\tconsole.log(res) // 获取JSON数据\n  \t\t})\n```\n\n\n-------------\n\n#### 示例：封装\n\n```\n\t/**\n \t\t* 将对象转成 a=1&b=2的形式\n \t\t* @param obj 对象\n \t\t* 将对象的属性抽离出来\n \t*/\n\tfunction obj2String(obj, arr = [], idx = 0) {\n  \t\tfor (let item in obj) {\n    \t\tarr[idx++] = [item, obj[item]]\n  \t\t}\n  \t\treturn new URLSearchParams(arr).toString()\n\t}\n\n\t/**\n\t \t* 真正的请求\n\t \t* @param url 请求地址\n\t \t* @param options 请求参数\n\t \t* @param method 请求方式\n \t*/\n\tfunction commonFetcdh(url, options, method = 'GET') {\n  \t\tconst searchStr = obj2String(options)\n  \t\tlet initObj = {}\n  \t\tif (method === 'GET') { // 如果是GET请求，拼接url\n    \t\turl += '?' + searchStr\n    \t\tinitObj = {\n      \t\t\tmethod: method,\n      \t\t\tcredentials: 'include'\n    \t\t}\n  \t\t} else {\n    \t\tinitObj = {\n      \t\t\tmethod: method,\n      \t\t\tcredentials: 'include',\n      \t\t\theaders: new Headers({\n        \t\t\t'Accept': 'application/json',\n        \t\t\t'Content-Type': 'application/x-www-form-urlencoded'\n      \t\t\t}),\n      \t\t\tbody: searchStr\n    \t\t}\n  \t\t}\n  \t\tfetch(url, initObj).then((res) => {\n    \t\treturn res.json()\n  \t\t}).then((res) => {\n    \t\treturn res\n  \t\t})\n\t}\n\n\t/**\n\t \t* GET请求\n\t \t* @param url 请求地址\n\t \t* @param options 请求参数\n \t*/\n\tfunction GET(url, options) {\n  \t\treturn commonFetcdh(url, options, 'GET')\n\t}\n\n\t/**\n\t \t* POST请求\n\t \t* @param url 请求地址\n\t \t* @param options 请求参数\n \t*/\n\tfunction POST(url, options) {\n  \t\treturn commonFetcdh(url, options, 'POST')\n\t}\n\n\t/**\n\t \t* 使用参考\n \t*/\n\tGET('https://www.baidu.com/search/error.html', {a:1,b:2})\n\tPOST('https://www.baidu.com/search/error.html', {a:1,b:2})\n```\n\n\n参考：\n\n[fetch，终于认识你](https://segmentfault.com/a/1190000011433064)\n\n","source":"_posts/fetch.md","raw":"---\nlayout: post\ntitle: \"fetch笔记\"\nsubtitle: \"新的数据获取解决方案\"\ndate: 2018-3-3\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- fetch\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n最近的一个项目里尝试使用了fetch来获取数据，做个笔记备用。\n\n----------\n\n\n#### 简单了解\n-------------\n\nfetch实际上就是XMLHttpRequest的一种替代方案，同样是用来获取后台数据的。\n\n[MDN文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API#%E6%A6%82%E5%BF%B5%E5%92%8C%E7%94%A8%E6%B3%95)\n\n先来写个简单的形式：\n```\n\tfetch(url) \t\t\t\t\t\t\t\t// 请求一个url地址，返回一个Promise对象\n  \t\t.then((res)=>{\n  \t\t\tconsole.log(res.status);\t\t//拿到response的状态码\n    \t\treturn res.text() \t\t\t\t// 拿到这个res对象做处理\n  \t\t})\n  \t\t.then((text)=>{\n    \t\tconsole.log(text) \t\t\t\t// 处理过的数据进行操作\n  \t\t})\n  \t\t.catch(function(err){\n    \t\tconsole.log(\"Fetch错误:\"+err);\t//错误收集\n\t\t})\n```\n\n是不是很简单。\n\n接下来进行配置。\n\n-------------\n\n#### GET请求\n\n为fetch做配置应添加到fetch的第二个参数上，如果需要传参，只能拼接到url上了。\n\n```\n\tfetch(url+'?a=1&b=2', {\n    \t\tmethod: 'GET'\n  \t\t}) \t\t\t\t\t\t// GET方式请求一个url地址，返回一个Promise对象\n  \t\t.then((res)=>{\n    \t\treturn res.text() \t// 拿到这个res对象做处理\n  \t\t})\n  \t\t.then((text)=>{\n    \t\tconsole.log(text) \t// 处理过的数据进行操作\n  \t\t})\n```\n\n-------------\n\n#### POST请求\n\nPOST方式的参数应添加到body上，对于fetch的body，可以是以下任何类型的实例：\n\nPOST请求的默认头信息是：Content-Type:text/plain;charset=UTF-8，如果要修改头信息，请添加到headers里面。\n\n\n\t* ArrayBuffer\n\t* ArrayBufferView (Uint8Array and friends)\n\t* Blob/File\n\t* string\n\t* URLSearchParams\n\t* FormData\n\n```\n\tfetch(url, {\n    \t\tmethod: 'POST',\n    \t\theaders: new Headers({\n      \t\t\t'Content-Type': 'application/x-www-form-urlencoded' // 指定提交方式为表单提交\n    \t\t}),\n    \t\tbody: new URLSearchParams([[\"foo\", 1],[\"bar\", 2]]).toString() // 这里是请求对象\n  \t\t}) \t\t\t\t\t\t// GET方式请求一个url地址，返回一个Promise对象\n  \t\t.then((res)=>{\n    \t\treturn res.text() \t// 拿到这个res对象做处理\n  \t\t})\n  \t\t.then((text)=>{\n    \t\tconsole.log(text) \t// 处理过的数据进行操作\n  \t\t})\n```\n\n\n-------------\n\n#### 示例：获取JSON\n\n```\n\tfetch(url, {\n\t    \tmethod: 'GET',\n\t    \theaders: new Headers({\n\t      \t\t'Accept': 'application/json' // 通过头指定，获取的数据类型是JSON\n\t    \t})\n  \t\t})\n  \t\t.then((res)=>{\n    \t\treturn res.json() // 返回一个Promise，可以解析成JSON\n  \t\t})\n  \t\t.then((res)=>{\n    \t\tconsole.log(res) // 获取JSON数据\n  \t\t})\n```\n\n\n-------------\n\n#### 示例：带cookie\n\n默认情况下, fetch 不会从服务端发送或接收任何 cookies\n也就是说如果网站需要用户认证，直接发送fetch请求会无法识别(要发送 cookies，必须发送凭据头).\n\n```\n\tfetch(url, {\n\t    \tmethod: 'GET',\n\t    \tcredentials: 'include' // 强制加入凭据头\n  \t\t})\n  \t\t.then((res)=>{\n    \t\treturn res.json() // 返回一个Promise，可以解析成JSON\n  \t\t})\n  \t\t.then((res)=>{\n    \t\tconsole.log(res) // 获取JSON数据\n  \t\t})\n```\n\n\n-------------\n\n#### 示例：封装\n\n```\n\t/**\n \t\t* 将对象转成 a=1&b=2的形式\n \t\t* @param obj 对象\n \t\t* 将对象的属性抽离出来\n \t*/\n\tfunction obj2String(obj, arr = [], idx = 0) {\n  \t\tfor (let item in obj) {\n    \t\tarr[idx++] = [item, obj[item]]\n  \t\t}\n  \t\treturn new URLSearchParams(arr).toString()\n\t}\n\n\t/**\n\t \t* 真正的请求\n\t \t* @param url 请求地址\n\t \t* @param options 请求参数\n\t \t* @param method 请求方式\n \t*/\n\tfunction commonFetcdh(url, options, method = 'GET') {\n  \t\tconst searchStr = obj2String(options)\n  \t\tlet initObj = {}\n  \t\tif (method === 'GET') { // 如果是GET请求，拼接url\n    \t\turl += '?' + searchStr\n    \t\tinitObj = {\n      \t\t\tmethod: method,\n      \t\t\tcredentials: 'include'\n    \t\t}\n  \t\t} else {\n    \t\tinitObj = {\n      \t\t\tmethod: method,\n      \t\t\tcredentials: 'include',\n      \t\t\theaders: new Headers({\n        \t\t\t'Accept': 'application/json',\n        \t\t\t'Content-Type': 'application/x-www-form-urlencoded'\n      \t\t\t}),\n      \t\t\tbody: searchStr\n    \t\t}\n  \t\t}\n  \t\tfetch(url, initObj).then((res) => {\n    \t\treturn res.json()\n  \t\t}).then((res) => {\n    \t\treturn res\n  \t\t})\n\t}\n\n\t/**\n\t \t* GET请求\n\t \t* @param url 请求地址\n\t \t* @param options 请求参数\n \t*/\n\tfunction GET(url, options) {\n  \t\treturn commonFetcdh(url, options, 'GET')\n\t}\n\n\t/**\n\t \t* POST请求\n\t \t* @param url 请求地址\n\t \t* @param options 请求参数\n \t*/\n\tfunction POST(url, options) {\n  \t\treturn commonFetcdh(url, options, 'POST')\n\t}\n\n\t/**\n\t \t* 使用参考\n \t*/\n\tGET('https://www.baidu.com/search/error.html', {a:1,b:2})\n\tPOST('https://www.baidu.com/search/error.html', {a:1,b:2})\n```\n\n\n参考：\n\n[fetch，终于认识你](https://segmentfault.com/a/1190000011433064)\n\n","slug":"fetch","published":1,"updated":"2018-04-02T04:31:49.288Z","comments":1,"photos":[],"link":"","_id":"cjkvxydwy000x5xfaxqg2l10v","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>最近的一个项目里尝试使用了fetch来获取数据，做个笔记备用。</p>\n<hr>\n<h4 id=\"简单了解\"><a href=\"#简单了解\" class=\"headerlink\" title=\"简单了解\"></a>简单了解</h4><hr>\n<p>fetch实际上就是XMLHttpRequest的一种替代方案，同样是用来获取后台数据的。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API#%E6%A6%82%E5%BF%B5%E5%92%8C%E7%94%A8%E6%B3%95\" target=\"_blank\" rel=\"noopener\">MDN文档</a></p>\n<p>先来写个简单的形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url) \t\t\t\t\t\t\t\t// 请求一个url地址，返回一个Promise对象</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\"> \t\t\tconsole.log(res.status);\t\t//拿到response的状态码</span><br><span class=\"line\">   \t\treturn res.text() \t\t\t\t// 拿到这个res对象做处理</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((text)=&gt;&#123;</span><br><span class=\"line\">   \t\tconsole.log(text) \t\t\t\t// 处理过的数据进行操作</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.catch(function(err)&#123;</span><br><span class=\"line\">   \t\tconsole.log(&quot;Fetch错误:&quot;+err);\t//错误收集</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>是不是很简单。</p>\n<p>接下来进行配置。</p>\n<hr>\n<h4 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h4><p>为fetch做配置应添加到fetch的第二个参数上，如果需要传参，只能拼接到url上了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url+&apos;?a=1&amp;b=2&apos;, &#123;</span><br><span class=\"line\">   \t\tmethod: &apos;GET&apos;</span><br><span class=\"line\"> \t\t&#125;) \t\t\t\t\t\t// GET方式请求一个url地址，返回一个Promise对象</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\">   \t\treturn res.text() \t// 拿到这个res对象做处理</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((text)=&gt;&#123;</span><br><span class=\"line\">   \t\tconsole.log(text) \t// 处理过的数据进行操作</span><br><span class=\"line\"> \t\t&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h4><p>POST方式的参数应添加到body上，对于fetch的body，可以是以下任何类型的实例：</p>\n<p>POST请求的默认头信息是：Content-Type:text/plain;charset=UTF-8，如果要修改头信息，请添加到headers里面。</p>\n<pre><code>* ArrayBuffer\n* ArrayBufferView (Uint8Array and friends)\n* Blob/File\n* string\n* URLSearchParams\n* FormData\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url, &#123;</span><br><span class=\"line\">   \t\tmethod: &apos;POST&apos;,</span><br><span class=\"line\">   \t\theaders: new Headers(&#123;</span><br><span class=\"line\">     \t\t\t&apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos; // 指定提交方式为表单提交</span><br><span class=\"line\">   \t\t&#125;),</span><br><span class=\"line\">   \t\tbody: new URLSearchParams([[&quot;foo&quot;, 1],[&quot;bar&quot;, 2]]).toString() // 这里是请求对象</span><br><span class=\"line\"> \t\t&#125;) \t\t\t\t\t\t// GET方式请求一个url地址，返回一个Promise对象</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\">   \t\treturn res.text() \t// 拿到这个res对象做处理</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((text)=&gt;&#123;</span><br><span class=\"line\">   \t\tconsole.log(text) \t// 处理过的数据进行操作</span><br><span class=\"line\"> \t\t&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"示例：获取JSON\"><a href=\"#示例：获取JSON\" class=\"headerlink\" title=\"示例：获取JSON\"></a>示例：获取JSON</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url, &#123;</span><br><span class=\"line\">    \tmethod: &apos;GET&apos;,</span><br><span class=\"line\">    \theaders: new Headers(&#123;</span><br><span class=\"line\">      \t\t&apos;Accept&apos;: &apos;application/json&apos; // 通过头指定，获取的数据类型是JSON</span><br><span class=\"line\">    \t&#125;)</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\">   \t\treturn res.json() // 返回一个Promise，可以解析成JSON</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\">   \t\tconsole.log(res) // 获取JSON数据</span><br><span class=\"line\"> \t\t&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"示例：带cookie\"><a href=\"#示例：带cookie\" class=\"headerlink\" title=\"示例：带cookie\"></a>示例：带cookie</h4><p>默认情况下, fetch 不会从服务端发送或接收任何 cookies<br>也就是说如果网站需要用户认证，直接发送fetch请求会无法识别(要发送 cookies，必须发送凭据头).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url, &#123;</span><br><span class=\"line\">    \tmethod: &apos;GET&apos;,</span><br><span class=\"line\">    \tcredentials: &apos;include&apos; // 强制加入凭据头</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\">   \t\treturn res.json() // 返回一个Promise，可以解析成JSON</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\">   \t\tconsole.log(res) // 获取JSON数据</span><br><span class=\"line\"> \t\t&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"示例：封装\"><a href=\"#示例：封装\" class=\"headerlink\" title=\"示例：封装\"></a>示例：封装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">\t\t* 将对象转成 a=1&amp;b=2的形式</span><br><span class=\"line\">\t\t* @param obj 对象</span><br><span class=\"line\">\t\t* 将对象的属性抽离出来</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">function obj2String(obj, arr = [], idx = 0) &#123;</span><br><span class=\"line\"> \t\tfor (let item in obj) &#123;</span><br><span class=\"line\">   \t\tarr[idx++] = [item, obj[item]]</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\treturn new URLSearchParams(arr).toString()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> \t* 真正的请求</span><br><span class=\"line\"> \t* @param url 请求地址</span><br><span class=\"line\"> \t* @param options 请求参数</span><br><span class=\"line\"> \t* @param method 请求方式</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">function commonFetcdh(url, options, method = &apos;GET&apos;) &#123;</span><br><span class=\"line\"> \t\tconst searchStr = obj2String(options)</span><br><span class=\"line\"> \t\tlet initObj = &#123;&#125;</span><br><span class=\"line\"> \t\tif (method === &apos;GET&apos;) &#123; // 如果是GET请求，拼接url</span><br><span class=\"line\">   \t\turl += &apos;?&apos; + searchStr</span><br><span class=\"line\">   \t\tinitObj = &#123;</span><br><span class=\"line\">     \t\t\tmethod: method,</span><br><span class=\"line\">     \t\t\tcredentials: &apos;include&apos;</span><br><span class=\"line\">   \t\t&#125;</span><br><span class=\"line\"> \t\t&#125; else &#123;</span><br><span class=\"line\">   \t\tinitObj = &#123;</span><br><span class=\"line\">     \t\t\tmethod: method,</span><br><span class=\"line\">     \t\t\tcredentials: &apos;include&apos;,</span><br><span class=\"line\">     \t\t\theaders: new Headers(&#123;</span><br><span class=\"line\">       \t\t\t&apos;Accept&apos;: &apos;application/json&apos;,</span><br><span class=\"line\">       \t\t\t&apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class=\"line\">     \t\t\t&#125;),</span><br><span class=\"line\">     \t\t\tbody: searchStr</span><br><span class=\"line\">   \t\t&#125;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\tfetch(url, initObj).then((res) =&gt; &#123;</span><br><span class=\"line\">   \t\treturn res.json()</span><br><span class=\"line\"> \t\t&#125;).then((res) =&gt; &#123;</span><br><span class=\"line\">   \t\treturn res</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> \t* GET请求</span><br><span class=\"line\"> \t* @param url 请求地址</span><br><span class=\"line\"> \t* @param options 请求参数</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">function GET(url, options) &#123;</span><br><span class=\"line\"> \t\treturn commonFetcdh(url, options, &apos;GET&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> \t* POST请求</span><br><span class=\"line\"> \t* @param url 请求地址</span><br><span class=\"line\"> \t* @param options 请求参数</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">function POST(url, options) &#123;</span><br><span class=\"line\"> \t\treturn commonFetcdh(url, options, &apos;POST&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> \t* 使用参考</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">GET(&apos;https://www.baidu.com/search/error.html&apos;, &#123;a:1,b:2&#125;)</span><br><span class=\"line\">POST(&apos;https://www.baidu.com/search/error.html&apos;, &#123;a:1,b:2&#125;)</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p><a href=\"https://segmentfault.com/a/1190000011433064\" target=\"_blank\" rel=\"noopener\">fetch，终于认识你</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>最近的一个项目里尝试使用了fetch来获取数据，做个笔记备用。</p>\n<hr>\n<h4 id=\"简单了解\"><a href=\"#简单了解\" class=\"headerlink\" title=\"简单了解\"></a>简单了解</h4><hr>\n<p>fetch实际上就是XMLHttpRequest的一种替代方案，同样是用来获取后台数据的。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API#%E6%A6%82%E5%BF%B5%E5%92%8C%E7%94%A8%E6%B3%95\" target=\"_blank\" rel=\"noopener\">MDN文档</a></p>\n<p>先来写个简单的形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url) \t\t\t\t\t\t\t\t// 请求一个url地址，返回一个Promise对象</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\"> \t\t\tconsole.log(res.status);\t\t//拿到response的状态码</span><br><span class=\"line\">   \t\treturn res.text() \t\t\t\t// 拿到这个res对象做处理</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((text)=&gt;&#123;</span><br><span class=\"line\">   \t\tconsole.log(text) \t\t\t\t// 处理过的数据进行操作</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.catch(function(err)&#123;</span><br><span class=\"line\">   \t\tconsole.log(&quot;Fetch错误:&quot;+err);\t//错误收集</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>是不是很简单。</p>\n<p>接下来进行配置。</p>\n<hr>\n<h4 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h4><p>为fetch做配置应添加到fetch的第二个参数上，如果需要传参，只能拼接到url上了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url+&apos;?a=1&amp;b=2&apos;, &#123;</span><br><span class=\"line\">   \t\tmethod: &apos;GET&apos;</span><br><span class=\"line\"> \t\t&#125;) \t\t\t\t\t\t// GET方式请求一个url地址，返回一个Promise对象</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\">   \t\treturn res.text() \t// 拿到这个res对象做处理</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((text)=&gt;&#123;</span><br><span class=\"line\">   \t\tconsole.log(text) \t// 处理过的数据进行操作</span><br><span class=\"line\"> \t\t&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h4><p>POST方式的参数应添加到body上，对于fetch的body，可以是以下任何类型的实例：</p>\n<p>POST请求的默认头信息是：Content-Type:text/plain;charset=UTF-8，如果要修改头信息，请添加到headers里面。</p>\n<pre><code>* ArrayBuffer\n* ArrayBufferView (Uint8Array and friends)\n* Blob/File\n* string\n* URLSearchParams\n* FormData\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url, &#123;</span><br><span class=\"line\">   \t\tmethod: &apos;POST&apos;,</span><br><span class=\"line\">   \t\theaders: new Headers(&#123;</span><br><span class=\"line\">     \t\t\t&apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos; // 指定提交方式为表单提交</span><br><span class=\"line\">   \t\t&#125;),</span><br><span class=\"line\">   \t\tbody: new URLSearchParams([[&quot;foo&quot;, 1],[&quot;bar&quot;, 2]]).toString() // 这里是请求对象</span><br><span class=\"line\"> \t\t&#125;) \t\t\t\t\t\t// GET方式请求一个url地址，返回一个Promise对象</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\">   \t\treturn res.text() \t// 拿到这个res对象做处理</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((text)=&gt;&#123;</span><br><span class=\"line\">   \t\tconsole.log(text) \t// 处理过的数据进行操作</span><br><span class=\"line\"> \t\t&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"示例：获取JSON\"><a href=\"#示例：获取JSON\" class=\"headerlink\" title=\"示例：获取JSON\"></a>示例：获取JSON</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url, &#123;</span><br><span class=\"line\">    \tmethod: &apos;GET&apos;,</span><br><span class=\"line\">    \theaders: new Headers(&#123;</span><br><span class=\"line\">      \t\t&apos;Accept&apos;: &apos;application/json&apos; // 通过头指定，获取的数据类型是JSON</span><br><span class=\"line\">    \t&#125;)</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\">   \t\treturn res.json() // 返回一个Promise，可以解析成JSON</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\">   \t\tconsole.log(res) // 获取JSON数据</span><br><span class=\"line\"> \t\t&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"示例：带cookie\"><a href=\"#示例：带cookie\" class=\"headerlink\" title=\"示例：带cookie\"></a>示例：带cookie</h4><p>默认情况下, fetch 不会从服务端发送或接收任何 cookies<br>也就是说如果网站需要用户认证，直接发送fetch请求会无法识别(要发送 cookies，必须发送凭据头).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url, &#123;</span><br><span class=\"line\">    \tmethod: &apos;GET&apos;,</span><br><span class=\"line\">    \tcredentials: &apos;include&apos; // 强制加入凭据头</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\">   \t\treturn res.json() // 返回一个Promise，可以解析成JSON</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\"> \t\t.then((res)=&gt;&#123;</span><br><span class=\"line\">   \t\tconsole.log(res) // 获取JSON数据</span><br><span class=\"line\"> \t\t&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"示例：封装\"><a href=\"#示例：封装\" class=\"headerlink\" title=\"示例：封装\"></a>示例：封装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">\t\t* 将对象转成 a=1&amp;b=2的形式</span><br><span class=\"line\">\t\t* @param obj 对象</span><br><span class=\"line\">\t\t* 将对象的属性抽离出来</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">function obj2String(obj, arr = [], idx = 0) &#123;</span><br><span class=\"line\"> \t\tfor (let item in obj) &#123;</span><br><span class=\"line\">   \t\tarr[idx++] = [item, obj[item]]</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\treturn new URLSearchParams(arr).toString()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> \t* 真正的请求</span><br><span class=\"line\"> \t* @param url 请求地址</span><br><span class=\"line\"> \t* @param options 请求参数</span><br><span class=\"line\"> \t* @param method 请求方式</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">function commonFetcdh(url, options, method = &apos;GET&apos;) &#123;</span><br><span class=\"line\"> \t\tconst searchStr = obj2String(options)</span><br><span class=\"line\"> \t\tlet initObj = &#123;&#125;</span><br><span class=\"line\"> \t\tif (method === &apos;GET&apos;) &#123; // 如果是GET请求，拼接url</span><br><span class=\"line\">   \t\turl += &apos;?&apos; + searchStr</span><br><span class=\"line\">   \t\tinitObj = &#123;</span><br><span class=\"line\">     \t\t\tmethod: method,</span><br><span class=\"line\">     \t\t\tcredentials: &apos;include&apos;</span><br><span class=\"line\">   \t\t&#125;</span><br><span class=\"line\"> \t\t&#125; else &#123;</span><br><span class=\"line\">   \t\tinitObj = &#123;</span><br><span class=\"line\">     \t\t\tmethod: method,</span><br><span class=\"line\">     \t\t\tcredentials: &apos;include&apos;,</span><br><span class=\"line\">     \t\t\theaders: new Headers(&#123;</span><br><span class=\"line\">       \t\t\t&apos;Accept&apos;: &apos;application/json&apos;,</span><br><span class=\"line\">       \t\t\t&apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class=\"line\">     \t\t\t&#125;),</span><br><span class=\"line\">     \t\t\tbody: searchStr</span><br><span class=\"line\">   \t\t&#125;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\tfetch(url, initObj).then((res) =&gt; &#123;</span><br><span class=\"line\">   \t\treturn res.json()</span><br><span class=\"line\"> \t\t&#125;).then((res) =&gt; &#123;</span><br><span class=\"line\">   \t\treturn res</span><br><span class=\"line\"> \t\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> \t* GET请求</span><br><span class=\"line\"> \t* @param url 请求地址</span><br><span class=\"line\"> \t* @param options 请求参数</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">function GET(url, options) &#123;</span><br><span class=\"line\"> \t\treturn commonFetcdh(url, options, &apos;GET&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> \t* POST请求</span><br><span class=\"line\"> \t* @param url 请求地址</span><br><span class=\"line\"> \t* @param options 请求参数</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">function POST(url, options) &#123;</span><br><span class=\"line\"> \t\treturn commonFetcdh(url, options, &apos;POST&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> \t* 使用参考</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">GET(&apos;https://www.baidu.com/search/error.html&apos;, &#123;a:1,b:2&#125;)</span><br><span class=\"line\">POST(&apos;https://www.baidu.com/search/error.html&apos;, &#123;a:1,b:2&#125;)</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p><a href=\"https://segmentfault.com/a/1190000011433064\" target=\"_blank\" rel=\"noopener\">fetch，终于认识你</a></p>\n"},{"layout":"post","title":"Koa学习笔记 一","subtitle":"基本用法","date":"2017-12-31T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n这个系列将记载我在学习Koa过程中需要记录下来的重点和遇到的问题。\n[中文文档](https://koa.bootcss.com/)\n[英文文档](http://koajs.com)\n\n----------\n\n### 安装koa\n-------------\n\nKoa 依赖 node v7.6.0 或 ES2015及更高版本和 async 方法支持\n\n这里提供将升级本地node版本的方法\n\n先查看本机node.js版本：\n\n```\n    $ node -v\n```\n\n清除node.js的cache：(此步会要求输入密码)\n\n```\n    $ sudo npm cache clean -f\n```\n\n安装 n 工具，这个工具是专门用来管理node.js版本的\n\n```\n    $ sudo npm install -g n\n```\n\n安装最新版本的node.js\n\n```\n    $ sudo n stable\n```\n\n再次查看本机的node.js版本：(本文采用的node版本为9.4.0)\n\n```\n    $ node -v\n```\n\n安装koa\n\n```\n    $ npm i koa\n```\n\n\n### 架设HTTP服务\n-------------\n\n```\n    const Koa = require('koa');\n\tconst app = new Koa();\n\n\tapp.listen(3000);\n```\n\n这里的 app.listen(...) 方法只是以下方法的语法糖:\n\n```\n    const http = require('http');\n\tconst Koa = require('koa');\n\tconst app = new Koa();\n\thttp.createServer(app.callback()).listen(3000);\n```\n\n这意味着您可以将同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址：\n\n```\n    const http = require('http');\n\tconst https = require('https');\n\tconst Koa = require('koa');\n\tconst app = new Koa();\n\thttp.createServer(app.callback()).listen(3000);\n\thttps.createServer(app.callback()).listen(3001);\n```\n\n\n### 上下文对象 Context\n-------------\n\nKoa 提供一个 Context 对象，表示一次对话的上下文（包括 HTTP 请求和 HTTP 回复）。通过加工这个对象，就可以控制返回给用户的内容。\n\n```\n\tapp.use(async ctx => {\n\t  \tctx; \t\t\t// 这是 Context\n\t  \tctx.req; \t\t// 这是 Node Request\n\t  \tctx.res; \t\t// 这是 Node Response  绕过 Koa 的 response 处理是 不被支持的. \n\t  \tctx.request; \t// 这是 koa Request\n\t  \tctx.response; \t// 这是 koa Response\n\n\t  \tctx.request.header   \t//请求标头对象。\n\t  \tctx.request.header=   \t//设置请求标头对象。\n\t  \tctx.request.method   \t//请求方法。\n\t  \tctx.request.method=   \t//设置请求方法，对于实现诸如 methodOverride() 的中间件是有用的。\n\t  \tctx.request.length   \t//返回以数字返回请求的 Content-Length，或 undefined。\n\t  \tctx.request.url   \t\t//获取请求 URL.\n\t  \tctx.request.url=    \t//设置请求 URL, 对 url 重写有用。\n\t  \tctx.request.origin   \t//获取URL的来源，包括 protocol 和 host。\n\t  \tctx.request.href    \t//获取完整的请求URL，包括 protocol，host 和 url。\n\t  \tctx.request.path   \t    //获取请求路径名。\n\t  \tctx.request.querystring //根据 ? 获取原始查询字符串.\n\t  \tctx.request.search   \t//使用 ? 获取原始查询字符串。\n\t  \tctx.request.query   \t//获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。请注意，此 getter 不 支持嵌套解析。\n\t});\n```\n\nContext.response.body属性就是发送给用户的内容。\n\n```\n    const Koa = require('koa');\n\tconst app = new Koa();\n\tconst main = ctx => {\n\t  \tctx.response.body = 'Hello World';\n\t};\n\tapp.use(main);\n\tapp.listen(3000);\n```\n\n```\n    ctx.response.type = 'json / xml / html / text'; //这些都是response的类型\n```\n\n```\n    const main = ctx => {\n\t  \tctx.response.type = 'html';\n\t  \tctx.response.body = fs.createReadStream('./demos/template.html');\n\t};    //返回一个网页模板\n```\n\nctx.cookies用来读写 Cookie\n\n```\n\tconst main = function(ctx) {\n  \t\tconst n = Number(ctx.cookies.get('view') || 0) + 1;\n  \t\tctx.cookies.set('view', n);\n  \t\tctx.response.body = n + ' views';\n\t}\n```\n\n### 路由\n-------------\n\n这里使用koa自带的koa-route 模块\n\n```\n    const route = require('koa-route');\n\n\tconst about = ctx => {\n\t  \tctx.response.type = 'html';\n\t  \tctx.response.body = '<a href=\"/\">Index Page</a>';\n\t};\n\n\tconst main = ctx => {\n\t  \tctx.response.body = 'Hello World';\n\t};\n\n\tapp.use(route.get('/', main));\n\tapp.use(route.get('/about', about));\n```\n\n静态资源访问则使用koa自带的koa-static模块\n\n```\n    const path = require('path');\n\tconst serve = require('koa-static');\n\n\tconst main = serve(path.join(__dirname));\n\tapp.use(main);\n```\n\n重定向\n\n```\n    const redirect = ctx => {\n  \t\tctx.response.redirect('/');\n  \t\tctx.response.body = '<a href=\"/\">Index Page</a>';\n\t};\n\n\tapp.use(route.get('/redirect', redirect));  //访问'/redirect'的请求会被重定向到'/'\n```\n\n\n### 中间件\n-------------\n\n基本上，Koa 所有的功能都是通过中间件实现的。\n中间件的实现很简单，所谓中间件可以看做是有两个参数的函数，用来在 HTTP Request 和 HTTP Response 中间实现某种功能。\n\n```\n\t//一个非常简单的输出log的中间件函数\n    const logger = (ctx, next) => {\n  \t\tconsole.log(`${Date.now()} ${ctx.request.method} ${ctx.request.url}`);\n  \t\tnext();\n\t}\n\tapp.use(logger);\n```\n\n如果对进程添加很多中间件的话会怎么样呢？\n多个中间件会形成一个栈结构（middle stack），以\"先进后出\"（first-in-last-out）的顺序执行。\n\n也就是说，会从上至下依次进入每个中间件，但只有在最内层中间件执行完毕后才会一层层返回到最外层中间件，示例如下：\n\n```\n\tconst one = (ctx, next) => {\n\t  \tconsole.log('>> one');\n\t  \tnext();\n\t  \tconsole.log('<< one');\n\t}\n\tconst two = (ctx, next) => {\n\t  \tconsole.log('>> two');\n\t  \tnext(); \n\t  \tconsole.log('<< two');\n\t}\n\tconst three = (ctx, next) => {\n\t  \tconsole.log('>> three');\n\t  \tnext();\n\t  \tconsole.log('<< three');\n\t}\n\n\tapp.use(one);\n\tapp.use(two);\n\tapp.use(three);\n```\n\n此时的输出应该是\n\n```\n\t>> one\n\t>> two\n\t>> three\n\t<< three\n\t<< two\n\t<< one\n```\n\n这是全同步中间件的执行流程，如果这些中间件中包含异步操作，那么执行的流程就会发生变化\n\n首先，包含异步操作的中间件必须写成async函数\n\n```\n\t//这就是一个异步中间件\n\tconst main = async function (ctx, next) {\n\t  \tctx.response.type = 'html';\n\t  \tctx.response.body = await fs.readFile('./demos/template.html', 'utf8');\n\t};\n\n\tapp.use(main);\n```\n\n中间件的合成则可以使用 koa-compose 模块\n\n```\n\tconst compose = require('koa-compose');\n\n\tconst logger = (ctx, next) => {\n\t  \tconsole.log(`${Date.now()} ${ctx.request.method} ${ctx.request.url}`);\n\t  \tnext();\n\t}\n\n\tconst main = ctx => {\n\t  \tctx.response.body = 'Hello World';\n\t};\n\n\tconst middlewares = compose([logger, main]);\n\tapp.use(middlewares);\n```\n\n从 POST 请求的数据体里面提取键值对使用 koa-body 模块\n\n```\n\tconst koaBody = require('koa-body');\n\n\tconst main = async function(ctx) {\n\t  \tconst body = ctx.request.body;\n\t  \tif (!body.name) ctx.throw(400, '.name required');\n\t  \tctx.body = { name: body.name };\n\t};\n\n\tapp.use(koaBody());\n```\n\n\n\n### 错误处理\n-------------\n\n直接抛出错误\n\n```\n\tconst main = ctx => {\n  \t\tctx.throw(500);\n\t};\n```\n\n返回错误\n\n```\n\tconst main = ctx => {\n  \t\tctx.response.status = 404;\n  \t\tctx.response.body = 'Page Not Found';\n\t};\n```\n\n为了方便处理错误，最好使用try...catch将其捕获。但是，为每个中间件都写try...catch太麻烦，我们可以让最外层的中间件，负责所有中间件的错误处理。\n\n```\n\tconst handler = async (ctx, next) => {\n\t  \ttry {\n\t    \tawait next();\n\t  \t}catch (err) {\n\t    \tctx.response.status = err.statusCode || err.status || 500;\n\t    \tctx.response.body = {\n\t      \t\tmessage: err.message\n\t    \t};\n\t  \t}\n\t};\n\n\tconst main = ctx => {\n\t  \tctx.throw(500);\n\t};\n\n\tapp.use(handler);\n\tapp.use(main);\n```\n\napp监听错误的处理方法\n\n```\n\tapp.on('error', (err, ctx) =>\n  \t\tconsole.error('server error', err);\n\t);\n```\n\n需要注意的是，如果错误被try...catch捕获，就不会触发error事件。这时，必须调用ctx.app.emit()，手动释放error事件，才能让监听函数生效。\n\n```\n\tconst handler = async (ctx, next) => {\n\t  \ttry {\n\t    \tawait next();\n\t  \t} catch (err) {\n\t    \tctx.response.status = err.statusCode || err.status || 500;\n\t    \tctx.response.type = 'html';\n\t    \tctx.response.body = '<p>Something wrong, please contact administrator.</p>';\n\t    \tctx.app.emit('error', err, ctx);\n\t  \t}\n\t};\n```\n\n\n参考：\n[阮一峰koa教程](http://www.ruanyifeng.com/blog/2017/08/koa.html)\n","source":"_posts/koa1.md","raw":"---\nlayout: post\ntitle: \"Koa学习笔记 一\"\nsubtitle: \"基本用法\"\ndate: 2018-1-1\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - Node.js\n    - Koa\n---\n\n\n这个系列将记载我在学习Koa过程中需要记录下来的重点和遇到的问题。\n[中文文档](https://koa.bootcss.com/)\n[英文文档](http://koajs.com)\n\n----------\n\n### 安装koa\n-------------\n\nKoa 依赖 node v7.6.0 或 ES2015及更高版本和 async 方法支持\n\n这里提供将升级本地node版本的方法\n\n先查看本机node.js版本：\n\n```\n    $ node -v\n```\n\n清除node.js的cache：(此步会要求输入密码)\n\n```\n    $ sudo npm cache clean -f\n```\n\n安装 n 工具，这个工具是专门用来管理node.js版本的\n\n```\n    $ sudo npm install -g n\n```\n\n安装最新版本的node.js\n\n```\n    $ sudo n stable\n```\n\n再次查看本机的node.js版本：(本文采用的node版本为9.4.0)\n\n```\n    $ node -v\n```\n\n安装koa\n\n```\n    $ npm i koa\n```\n\n\n### 架设HTTP服务\n-------------\n\n```\n    const Koa = require('koa');\n\tconst app = new Koa();\n\n\tapp.listen(3000);\n```\n\n这里的 app.listen(...) 方法只是以下方法的语法糖:\n\n```\n    const http = require('http');\n\tconst Koa = require('koa');\n\tconst app = new Koa();\n\thttp.createServer(app.callback()).listen(3000);\n```\n\n这意味着您可以将同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址：\n\n```\n    const http = require('http');\n\tconst https = require('https');\n\tconst Koa = require('koa');\n\tconst app = new Koa();\n\thttp.createServer(app.callback()).listen(3000);\n\thttps.createServer(app.callback()).listen(3001);\n```\n\n\n### 上下文对象 Context\n-------------\n\nKoa 提供一个 Context 对象，表示一次对话的上下文（包括 HTTP 请求和 HTTP 回复）。通过加工这个对象，就可以控制返回给用户的内容。\n\n```\n\tapp.use(async ctx => {\n\t  \tctx; \t\t\t// 这是 Context\n\t  \tctx.req; \t\t// 这是 Node Request\n\t  \tctx.res; \t\t// 这是 Node Response  绕过 Koa 的 response 处理是 不被支持的. \n\t  \tctx.request; \t// 这是 koa Request\n\t  \tctx.response; \t// 这是 koa Response\n\n\t  \tctx.request.header   \t//请求标头对象。\n\t  \tctx.request.header=   \t//设置请求标头对象。\n\t  \tctx.request.method   \t//请求方法。\n\t  \tctx.request.method=   \t//设置请求方法，对于实现诸如 methodOverride() 的中间件是有用的。\n\t  \tctx.request.length   \t//返回以数字返回请求的 Content-Length，或 undefined。\n\t  \tctx.request.url   \t\t//获取请求 URL.\n\t  \tctx.request.url=    \t//设置请求 URL, 对 url 重写有用。\n\t  \tctx.request.origin   \t//获取URL的来源，包括 protocol 和 host。\n\t  \tctx.request.href    \t//获取完整的请求URL，包括 protocol，host 和 url。\n\t  \tctx.request.path   \t    //获取请求路径名。\n\t  \tctx.request.querystring //根据 ? 获取原始查询字符串.\n\t  \tctx.request.search   \t//使用 ? 获取原始查询字符串。\n\t  \tctx.request.query   \t//获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。请注意，此 getter 不 支持嵌套解析。\n\t});\n```\n\nContext.response.body属性就是发送给用户的内容。\n\n```\n    const Koa = require('koa');\n\tconst app = new Koa();\n\tconst main = ctx => {\n\t  \tctx.response.body = 'Hello World';\n\t};\n\tapp.use(main);\n\tapp.listen(3000);\n```\n\n```\n    ctx.response.type = 'json / xml / html / text'; //这些都是response的类型\n```\n\n```\n    const main = ctx => {\n\t  \tctx.response.type = 'html';\n\t  \tctx.response.body = fs.createReadStream('./demos/template.html');\n\t};    //返回一个网页模板\n```\n\nctx.cookies用来读写 Cookie\n\n```\n\tconst main = function(ctx) {\n  \t\tconst n = Number(ctx.cookies.get('view') || 0) + 1;\n  \t\tctx.cookies.set('view', n);\n  \t\tctx.response.body = n + ' views';\n\t}\n```\n\n### 路由\n-------------\n\n这里使用koa自带的koa-route 模块\n\n```\n    const route = require('koa-route');\n\n\tconst about = ctx => {\n\t  \tctx.response.type = 'html';\n\t  \tctx.response.body = '<a href=\"/\">Index Page</a>';\n\t};\n\n\tconst main = ctx => {\n\t  \tctx.response.body = 'Hello World';\n\t};\n\n\tapp.use(route.get('/', main));\n\tapp.use(route.get('/about', about));\n```\n\n静态资源访问则使用koa自带的koa-static模块\n\n```\n    const path = require('path');\n\tconst serve = require('koa-static');\n\n\tconst main = serve(path.join(__dirname));\n\tapp.use(main);\n```\n\n重定向\n\n```\n    const redirect = ctx => {\n  \t\tctx.response.redirect('/');\n  \t\tctx.response.body = '<a href=\"/\">Index Page</a>';\n\t};\n\n\tapp.use(route.get('/redirect', redirect));  //访问'/redirect'的请求会被重定向到'/'\n```\n\n\n### 中间件\n-------------\n\n基本上，Koa 所有的功能都是通过中间件实现的。\n中间件的实现很简单，所谓中间件可以看做是有两个参数的函数，用来在 HTTP Request 和 HTTP Response 中间实现某种功能。\n\n```\n\t//一个非常简单的输出log的中间件函数\n    const logger = (ctx, next) => {\n  \t\tconsole.log(`${Date.now()} ${ctx.request.method} ${ctx.request.url}`);\n  \t\tnext();\n\t}\n\tapp.use(logger);\n```\n\n如果对进程添加很多中间件的话会怎么样呢？\n多个中间件会形成一个栈结构（middle stack），以\"先进后出\"（first-in-last-out）的顺序执行。\n\n也就是说，会从上至下依次进入每个中间件，但只有在最内层中间件执行完毕后才会一层层返回到最外层中间件，示例如下：\n\n```\n\tconst one = (ctx, next) => {\n\t  \tconsole.log('>> one');\n\t  \tnext();\n\t  \tconsole.log('<< one');\n\t}\n\tconst two = (ctx, next) => {\n\t  \tconsole.log('>> two');\n\t  \tnext(); \n\t  \tconsole.log('<< two');\n\t}\n\tconst three = (ctx, next) => {\n\t  \tconsole.log('>> three');\n\t  \tnext();\n\t  \tconsole.log('<< three');\n\t}\n\n\tapp.use(one);\n\tapp.use(two);\n\tapp.use(three);\n```\n\n此时的输出应该是\n\n```\n\t>> one\n\t>> two\n\t>> three\n\t<< three\n\t<< two\n\t<< one\n```\n\n这是全同步中间件的执行流程，如果这些中间件中包含异步操作，那么执行的流程就会发生变化\n\n首先，包含异步操作的中间件必须写成async函数\n\n```\n\t//这就是一个异步中间件\n\tconst main = async function (ctx, next) {\n\t  \tctx.response.type = 'html';\n\t  \tctx.response.body = await fs.readFile('./demos/template.html', 'utf8');\n\t};\n\n\tapp.use(main);\n```\n\n中间件的合成则可以使用 koa-compose 模块\n\n```\n\tconst compose = require('koa-compose');\n\n\tconst logger = (ctx, next) => {\n\t  \tconsole.log(`${Date.now()} ${ctx.request.method} ${ctx.request.url}`);\n\t  \tnext();\n\t}\n\n\tconst main = ctx => {\n\t  \tctx.response.body = 'Hello World';\n\t};\n\n\tconst middlewares = compose([logger, main]);\n\tapp.use(middlewares);\n```\n\n从 POST 请求的数据体里面提取键值对使用 koa-body 模块\n\n```\n\tconst koaBody = require('koa-body');\n\n\tconst main = async function(ctx) {\n\t  \tconst body = ctx.request.body;\n\t  \tif (!body.name) ctx.throw(400, '.name required');\n\t  \tctx.body = { name: body.name };\n\t};\n\n\tapp.use(koaBody());\n```\n\n\n\n### 错误处理\n-------------\n\n直接抛出错误\n\n```\n\tconst main = ctx => {\n  \t\tctx.throw(500);\n\t};\n```\n\n返回错误\n\n```\n\tconst main = ctx => {\n  \t\tctx.response.status = 404;\n  \t\tctx.response.body = 'Page Not Found';\n\t};\n```\n\n为了方便处理错误，最好使用try...catch将其捕获。但是，为每个中间件都写try...catch太麻烦，我们可以让最外层的中间件，负责所有中间件的错误处理。\n\n```\n\tconst handler = async (ctx, next) => {\n\t  \ttry {\n\t    \tawait next();\n\t  \t}catch (err) {\n\t    \tctx.response.status = err.statusCode || err.status || 500;\n\t    \tctx.response.body = {\n\t      \t\tmessage: err.message\n\t    \t};\n\t  \t}\n\t};\n\n\tconst main = ctx => {\n\t  \tctx.throw(500);\n\t};\n\n\tapp.use(handler);\n\tapp.use(main);\n```\n\napp监听错误的处理方法\n\n```\n\tapp.on('error', (err, ctx) =>\n  \t\tconsole.error('server error', err);\n\t);\n```\n\n需要注意的是，如果错误被try...catch捕获，就不会触发error事件。这时，必须调用ctx.app.emit()，手动释放error事件，才能让监听函数生效。\n\n```\n\tconst handler = async (ctx, next) => {\n\t  \ttry {\n\t    \tawait next();\n\t  \t} catch (err) {\n\t    \tctx.response.status = err.statusCode || err.status || 500;\n\t    \tctx.response.type = 'html';\n\t    \tctx.response.body = '<p>Something wrong, please contact administrator.</p>';\n\t    \tctx.app.emit('error', err, ctx);\n\t  \t}\n\t};\n```\n\n\n参考：\n[阮一峰koa教程](http://www.ruanyifeng.com/blog/2017/08/koa.html)\n","slug":"koa1","published":1,"updated":"2018-01-17T08:10:50.321Z","comments":1,"photos":[],"link":"","_id":"cjkvxydxy001k5xfa7cr9ii98","content":"<p>这个系列将记载我在学习Koa过程中需要记录下来的重点和遇到的问题。<br><a href=\"https://koa.bootcss.com/\" target=\"_blank\" rel=\"noopener\">中文文档</a><br><a href=\"http://koajs.com\" target=\"_blank\" rel=\"noopener\">英文文档</a></p>\n<hr>\n<h3 id=\"安装koa\"><a href=\"#安装koa\" class=\"headerlink\" title=\"安装koa\"></a>安装koa</h3><hr>\n<p>Koa 依赖 node v7.6.0 或 ES2015及更高版本和 async 方法支持</p>\n<p>这里提供将升级本地node版本的方法</p>\n<p>先查看本机node.js版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<p>清除node.js的cache：(此步会要求输入密码)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm cache clean -f</span><br></pre></td></tr></table></figure>\n<p>安装 n 工具，这个工具是专门用来管理node.js版本的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install -g n</span><br></pre></td></tr></table></figure>\n<p>安装最新版本的node.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo n stable</span><br></pre></td></tr></table></figure>\n<p>再次查看本机的node.js版本：(本文采用的node版本为9.4.0)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<p>安装koa</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i koa</span><br></pre></td></tr></table></figure>\n<h3 id=\"架设HTTP服务\"><a href=\"#架设HTTP服务\" class=\"headerlink\" title=\"架设HTTP服务\"></a>架设HTTP服务</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n<p>这里的 app.listen(…) 方法只是以下方法的语法糖:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const http = require(&apos;http&apos;);</span><br><span class=\"line\">const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\">http.createServer(app.callback()).listen(3000);</span><br></pre></td></tr></table></figure>\n<p>这意味着您可以将同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const http = require(&apos;http&apos;);</span><br><span class=\"line\">const https = require(&apos;https&apos;);</span><br><span class=\"line\">const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\">http.createServer(app.callback()).listen(3000);</span><br><span class=\"line\">https.createServer(app.callback()).listen(3001);</span><br></pre></td></tr></table></figure>\n<h3 id=\"上下文对象-Context\"><a href=\"#上下文对象-Context\" class=\"headerlink\" title=\"上下文对象 Context\"></a>上下文对象 Context</h3><hr>\n<p>Koa 提供一个 Context 对象，表示一次对话的上下文（包括 HTTP 请求和 HTTP 回复）。通过加工这个对象，就可以控制返回给用户的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(async ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx; \t\t\t// 这是 Context</span><br><span class=\"line\">  \tctx.req; \t\t// 这是 Node Request</span><br><span class=\"line\">  \tctx.res; \t\t// 这是 Node Response  绕过 Koa 的 response 处理是 不被支持的. </span><br><span class=\"line\">  \tctx.request; \t// 这是 koa Request</span><br><span class=\"line\">  \tctx.response; \t// 这是 koa Response</span><br><span class=\"line\"></span><br><span class=\"line\">  \tctx.request.header   \t//请求标头对象。</span><br><span class=\"line\">  \tctx.request.header=   \t//设置请求标头对象。</span><br><span class=\"line\">  \tctx.request.method   \t//请求方法。</span><br><span class=\"line\">  \tctx.request.method=   \t//设置请求方法，对于实现诸如 methodOverride() 的中间件是有用的。</span><br><span class=\"line\">  \tctx.request.length   \t//返回以数字返回请求的 Content-Length，或 undefined。</span><br><span class=\"line\">  \tctx.request.url   \t\t//获取请求 URL.</span><br><span class=\"line\">  \tctx.request.url=    \t//设置请求 URL, 对 url 重写有用。</span><br><span class=\"line\">  \tctx.request.origin   \t//获取URL的来源，包括 protocol 和 host。</span><br><span class=\"line\">  \tctx.request.href    \t//获取完整的请求URL，包括 protocol，host 和 url。</span><br><span class=\"line\">  \tctx.request.path   \t    //获取请求路径名。</span><br><span class=\"line\">  \tctx.request.querystring //根据 ? 获取原始查询字符串.</span><br><span class=\"line\">  \tctx.request.search   \t//使用 ? 获取原始查询字符串。</span><br><span class=\"line\">  \tctx.request.query   \t//获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。请注意，此 getter 不 支持嵌套解析。</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Context.response.body属性就是发送给用户的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.body = &apos;Hello World&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">app.use(main);</span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.response.type = &apos;json / xml / html / text&apos;; //这些都是response的类型</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">  \tctx.response.body = fs.createReadStream(&apos;./demos/template.html&apos;);</span><br><span class=\"line\">&#125;;    //返回一个网页模板</span><br></pre></td></tr></table></figure>\n<p>ctx.cookies用来读写 Cookie</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const main = function(ctx) &#123;</span><br><span class=\"line\"> \t\tconst n = Number(ctx.cookies.get(&apos;view&apos;) || 0) + 1;</span><br><span class=\"line\"> \t\tctx.cookies.set(&apos;view&apos;, n);</span><br><span class=\"line\"> \t\tctx.response.body = n + &apos; views&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><hr>\n<p>这里使用koa自带的koa-route 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const route = require(&apos;koa-route&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const about = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">  \tctx.response.body = &apos;&lt;a href=&quot;/&quot;&gt;Index Page&lt;/a&gt;&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.body = &apos;Hello World&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(route.get(&apos;/&apos;, main));</span><br><span class=\"line\">app.use(route.get(&apos;/about&apos;, about));</span><br></pre></td></tr></table></figure>\n<p>静态资源访问则使用koa自带的koa-static模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const path = require(&apos;path&apos;);</span><br><span class=\"line\">const serve = require(&apos;koa-static&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const main = serve(path.join(__dirname));</span><br><span class=\"line\">app.use(main);</span><br></pre></td></tr></table></figure>\n<p>重定向</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const redirect = ctx =&gt; &#123;</span><br><span class=\"line\"> \t\tctx.response.redirect(&apos;/&apos;);</span><br><span class=\"line\"> \t\tctx.response.body = &apos;&lt;a href=&quot;/&quot;&gt;Index Page&lt;/a&gt;&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(route.get(&apos;/redirect&apos;, redirect));  //访问&apos;/redirect&apos;的请求会被重定向到&apos;/&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><hr>\n<p>基本上，Koa 所有的功能都是通过中间件实现的。<br>中间件的实现很简单，所谓中间件可以看做是有两个参数的函数，用来在 HTTP Request 和 HTTP Response 中间实现某种功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//一个非常简单的输出log的中间件函数</span><br><span class=\"line\">   const logger = (ctx, next) =&gt; &#123;</span><br><span class=\"line\"> \t\tconsole.log(`$&#123;Date.now()&#125; $&#123;ctx.request.method&#125; $&#123;ctx.request.url&#125;`);</span><br><span class=\"line\"> \t\tnext();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">app.use(logger);</span><br></pre></td></tr></table></figure>\n<p>如果对进程添加很多中间件的话会怎么样呢？<br>多个中间件会形成一个栈结构（middle stack），以”先进后出”（first-in-last-out）的顺序执行。</p>\n<p>也就是说，会从上至下依次进入每个中间件，但只有在最内层中间件执行完毕后才会一层层返回到最外层中间件，示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const one = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(&apos;&gt;&gt; one&apos;);</span><br><span class=\"line\">  \tnext();</span><br><span class=\"line\">  \tconsole.log(&apos;&lt;&lt; one&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const two = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(&apos;&gt;&gt; two&apos;);</span><br><span class=\"line\">  \tnext(); </span><br><span class=\"line\">  \tconsole.log(&apos;&lt;&lt; two&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const three = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(&apos;&gt;&gt; three&apos;);</span><br><span class=\"line\">  \tnext();</span><br><span class=\"line\">  \tconsole.log(&apos;&lt;&lt; three&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(one);</span><br><span class=\"line\">app.use(two);</span><br><span class=\"line\">app.use(three);</span><br></pre></td></tr></table></figure>\n<p>此时的输出应该是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; one</span><br><span class=\"line\">&gt;&gt; two</span><br><span class=\"line\">&gt;&gt; three</span><br><span class=\"line\">&lt;&lt; three</span><br><span class=\"line\">&lt;&lt; two</span><br><span class=\"line\">&lt;&lt; one</span><br></pre></td></tr></table></figure>\n<p>这是全同步中间件的执行流程，如果这些中间件中包含异步操作，那么执行的流程就会发生变化</p>\n<p>首先，包含异步操作的中间件必须写成async函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这就是一个异步中间件</span><br><span class=\"line\">const main = async function (ctx, next) &#123;</span><br><span class=\"line\">  \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">  \tctx.response.body = await fs.readFile(&apos;./demos/template.html&apos;, &apos;utf8&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(main);</span><br></pre></td></tr></table></figure>\n<p>中间件的合成则可以使用 koa-compose 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const compose = require(&apos;koa-compose&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const logger = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(`$&#123;Date.now()&#125; $&#123;ctx.request.method&#125; $&#123;ctx.request.url&#125;`);</span><br><span class=\"line\">  \tnext();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.body = &apos;Hello World&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const middlewares = compose([logger, main]);</span><br><span class=\"line\">app.use(middlewares);</span><br></pre></td></tr></table></figure>\n<p>从 POST 请求的数据体里面提取键值对使用 koa-body 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const koaBody = require(&apos;koa-body&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const main = async function(ctx) &#123;</span><br><span class=\"line\">  \tconst body = ctx.request.body;</span><br><span class=\"line\">  \tif (!body.name) ctx.throw(400, &apos;.name required&apos;);</span><br><span class=\"line\">  \tctx.body = &#123; name: body.name &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(koaBody());</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><hr>\n<p>直接抛出错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\"> \t\tctx.throw(500);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>返回错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\"> \t\tctx.response.status = 404;</span><br><span class=\"line\"> \t\tctx.response.body = &apos;Page Not Found&apos;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>为了方便处理错误，最好使用try…catch将其捕获。但是，为每个中间件都写try…catch太麻烦，我们可以让最外层的中间件，负责所有中间件的错误处理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const handler = async (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \ttry &#123;</span><br><span class=\"line\">    \tawait next();</span><br><span class=\"line\">  \t&#125;catch (err) &#123;</span><br><span class=\"line\">    \tctx.response.status = err.statusCode || err.status || 500;</span><br><span class=\"line\">    \tctx.response.body = &#123;</span><br><span class=\"line\">      \t\tmessage: err.message</span><br><span class=\"line\">    \t&#125;;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.throw(500);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(handler);</span><br><span class=\"line\">app.use(main);</span><br></pre></td></tr></table></figure>\n<p>app监听错误的处理方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.on(&apos;error&apos;, (err, ctx) =&gt;</span><br><span class=\"line\"> \t\tconsole.error(&apos;server error&apos;, err);</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，如果错误被try…catch捕获，就不会触发error事件。这时，必须调用ctx.app.emit()，手动释放error事件，才能让监听函数生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const handler = async (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \ttry &#123;</span><br><span class=\"line\">    \tawait next();</span><br><span class=\"line\">  \t&#125; catch (err) &#123;</span><br><span class=\"line\">    \tctx.response.status = err.statusCode || err.status || 500;</span><br><span class=\"line\">    \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">    \tctx.response.body = &apos;&lt;p&gt;Something wrong, please contact administrator.&lt;/p&gt;&apos;;</span><br><span class=\"line\">    \tctx.app.emit(&apos;error&apos;, err, ctx);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://www.ruanyifeng.com/blog/2017/08/koa.html\" target=\"_blank\" rel=\"noopener\">阮一峰koa教程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个系列将记载我在学习Koa过程中需要记录下来的重点和遇到的问题。<br><a href=\"https://koa.bootcss.com/\" target=\"_blank\" rel=\"noopener\">中文文档</a><br><a href=\"http://koajs.com\" target=\"_blank\" rel=\"noopener\">英文文档</a></p>\n<hr>\n<h3 id=\"安装koa\"><a href=\"#安装koa\" class=\"headerlink\" title=\"安装koa\"></a>安装koa</h3><hr>\n<p>Koa 依赖 node v7.6.0 或 ES2015及更高版本和 async 方法支持</p>\n<p>这里提供将升级本地node版本的方法</p>\n<p>先查看本机node.js版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<p>清除node.js的cache：(此步会要求输入密码)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm cache clean -f</span><br></pre></td></tr></table></figure>\n<p>安装 n 工具，这个工具是专门用来管理node.js版本的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install -g n</span><br></pre></td></tr></table></figure>\n<p>安装最新版本的node.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo n stable</span><br></pre></td></tr></table></figure>\n<p>再次查看本机的node.js版本：(本文采用的node版本为9.4.0)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<p>安装koa</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i koa</span><br></pre></td></tr></table></figure>\n<h3 id=\"架设HTTP服务\"><a href=\"#架设HTTP服务\" class=\"headerlink\" title=\"架设HTTP服务\"></a>架设HTTP服务</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n<p>这里的 app.listen(…) 方法只是以下方法的语法糖:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const http = require(&apos;http&apos;);</span><br><span class=\"line\">const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\">http.createServer(app.callback()).listen(3000);</span><br></pre></td></tr></table></figure>\n<p>这意味着您可以将同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const http = require(&apos;http&apos;);</span><br><span class=\"line\">const https = require(&apos;https&apos;);</span><br><span class=\"line\">const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\">http.createServer(app.callback()).listen(3000);</span><br><span class=\"line\">https.createServer(app.callback()).listen(3001);</span><br></pre></td></tr></table></figure>\n<h3 id=\"上下文对象-Context\"><a href=\"#上下文对象-Context\" class=\"headerlink\" title=\"上下文对象 Context\"></a>上下文对象 Context</h3><hr>\n<p>Koa 提供一个 Context 对象，表示一次对话的上下文（包括 HTTP 请求和 HTTP 回复）。通过加工这个对象，就可以控制返回给用户的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(async ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx; \t\t\t// 这是 Context</span><br><span class=\"line\">  \tctx.req; \t\t// 这是 Node Request</span><br><span class=\"line\">  \tctx.res; \t\t// 这是 Node Response  绕过 Koa 的 response 处理是 不被支持的. </span><br><span class=\"line\">  \tctx.request; \t// 这是 koa Request</span><br><span class=\"line\">  \tctx.response; \t// 这是 koa Response</span><br><span class=\"line\"></span><br><span class=\"line\">  \tctx.request.header   \t//请求标头对象。</span><br><span class=\"line\">  \tctx.request.header=   \t//设置请求标头对象。</span><br><span class=\"line\">  \tctx.request.method   \t//请求方法。</span><br><span class=\"line\">  \tctx.request.method=   \t//设置请求方法，对于实现诸如 methodOverride() 的中间件是有用的。</span><br><span class=\"line\">  \tctx.request.length   \t//返回以数字返回请求的 Content-Length，或 undefined。</span><br><span class=\"line\">  \tctx.request.url   \t\t//获取请求 URL.</span><br><span class=\"line\">  \tctx.request.url=    \t//设置请求 URL, 对 url 重写有用。</span><br><span class=\"line\">  \tctx.request.origin   \t//获取URL的来源，包括 protocol 和 host。</span><br><span class=\"line\">  \tctx.request.href    \t//获取完整的请求URL，包括 protocol，host 和 url。</span><br><span class=\"line\">  \tctx.request.path   \t    //获取请求路径名。</span><br><span class=\"line\">  \tctx.request.querystring //根据 ? 获取原始查询字符串.</span><br><span class=\"line\">  \tctx.request.search   \t//使用 ? 获取原始查询字符串。</span><br><span class=\"line\">  \tctx.request.query   \t//获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。请注意，此 getter 不 支持嵌套解析。</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Context.response.body属性就是发送给用户的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.body = &apos;Hello World&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">app.use(main);</span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.response.type = &apos;json / xml / html / text&apos;; //这些都是response的类型</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">  \tctx.response.body = fs.createReadStream(&apos;./demos/template.html&apos;);</span><br><span class=\"line\">&#125;;    //返回一个网页模板</span><br></pre></td></tr></table></figure>\n<p>ctx.cookies用来读写 Cookie</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const main = function(ctx) &#123;</span><br><span class=\"line\"> \t\tconst n = Number(ctx.cookies.get(&apos;view&apos;) || 0) + 1;</span><br><span class=\"line\"> \t\tctx.cookies.set(&apos;view&apos;, n);</span><br><span class=\"line\"> \t\tctx.response.body = n + &apos; views&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><hr>\n<p>这里使用koa自带的koa-route 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const route = require(&apos;koa-route&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const about = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">  \tctx.response.body = &apos;&lt;a href=&quot;/&quot;&gt;Index Page&lt;/a&gt;&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.body = &apos;Hello World&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(route.get(&apos;/&apos;, main));</span><br><span class=\"line\">app.use(route.get(&apos;/about&apos;, about));</span><br></pre></td></tr></table></figure>\n<p>静态资源访问则使用koa自带的koa-static模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const path = require(&apos;path&apos;);</span><br><span class=\"line\">const serve = require(&apos;koa-static&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const main = serve(path.join(__dirname));</span><br><span class=\"line\">app.use(main);</span><br></pre></td></tr></table></figure>\n<p>重定向</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const redirect = ctx =&gt; &#123;</span><br><span class=\"line\"> \t\tctx.response.redirect(&apos;/&apos;);</span><br><span class=\"line\"> \t\tctx.response.body = &apos;&lt;a href=&quot;/&quot;&gt;Index Page&lt;/a&gt;&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(route.get(&apos;/redirect&apos;, redirect));  //访问&apos;/redirect&apos;的请求会被重定向到&apos;/&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><hr>\n<p>基本上，Koa 所有的功能都是通过中间件实现的。<br>中间件的实现很简单，所谓中间件可以看做是有两个参数的函数，用来在 HTTP Request 和 HTTP Response 中间实现某种功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//一个非常简单的输出log的中间件函数</span><br><span class=\"line\">   const logger = (ctx, next) =&gt; &#123;</span><br><span class=\"line\"> \t\tconsole.log(`$&#123;Date.now()&#125; $&#123;ctx.request.method&#125; $&#123;ctx.request.url&#125;`);</span><br><span class=\"line\"> \t\tnext();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">app.use(logger);</span><br></pre></td></tr></table></figure>\n<p>如果对进程添加很多中间件的话会怎么样呢？<br>多个中间件会形成一个栈结构（middle stack），以”先进后出”（first-in-last-out）的顺序执行。</p>\n<p>也就是说，会从上至下依次进入每个中间件，但只有在最内层中间件执行完毕后才会一层层返回到最外层中间件，示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const one = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(&apos;&gt;&gt; one&apos;);</span><br><span class=\"line\">  \tnext();</span><br><span class=\"line\">  \tconsole.log(&apos;&lt;&lt; one&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const two = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(&apos;&gt;&gt; two&apos;);</span><br><span class=\"line\">  \tnext(); </span><br><span class=\"line\">  \tconsole.log(&apos;&lt;&lt; two&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const three = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(&apos;&gt;&gt; three&apos;);</span><br><span class=\"line\">  \tnext();</span><br><span class=\"line\">  \tconsole.log(&apos;&lt;&lt; three&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(one);</span><br><span class=\"line\">app.use(two);</span><br><span class=\"line\">app.use(three);</span><br></pre></td></tr></table></figure>\n<p>此时的输出应该是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; one</span><br><span class=\"line\">&gt;&gt; two</span><br><span class=\"line\">&gt;&gt; three</span><br><span class=\"line\">&lt;&lt; three</span><br><span class=\"line\">&lt;&lt; two</span><br><span class=\"line\">&lt;&lt; one</span><br></pre></td></tr></table></figure>\n<p>这是全同步中间件的执行流程，如果这些中间件中包含异步操作，那么执行的流程就会发生变化</p>\n<p>首先，包含异步操作的中间件必须写成async函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这就是一个异步中间件</span><br><span class=\"line\">const main = async function (ctx, next) &#123;</span><br><span class=\"line\">  \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">  \tctx.response.body = await fs.readFile(&apos;./demos/template.html&apos;, &apos;utf8&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(main);</span><br></pre></td></tr></table></figure>\n<p>中间件的合成则可以使用 koa-compose 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const compose = require(&apos;koa-compose&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const logger = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(`$&#123;Date.now()&#125; $&#123;ctx.request.method&#125; $&#123;ctx.request.url&#125;`);</span><br><span class=\"line\">  \tnext();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.body = &apos;Hello World&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const middlewares = compose([logger, main]);</span><br><span class=\"line\">app.use(middlewares);</span><br></pre></td></tr></table></figure>\n<p>从 POST 请求的数据体里面提取键值对使用 koa-body 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const koaBody = require(&apos;koa-body&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const main = async function(ctx) &#123;</span><br><span class=\"line\">  \tconst body = ctx.request.body;</span><br><span class=\"line\">  \tif (!body.name) ctx.throw(400, &apos;.name required&apos;);</span><br><span class=\"line\">  \tctx.body = &#123; name: body.name &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(koaBody());</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><hr>\n<p>直接抛出错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\"> \t\tctx.throw(500);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>返回错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\"> \t\tctx.response.status = 404;</span><br><span class=\"line\"> \t\tctx.response.body = &apos;Page Not Found&apos;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>为了方便处理错误，最好使用try…catch将其捕获。但是，为每个中间件都写try…catch太麻烦，我们可以让最外层的中间件，负责所有中间件的错误处理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const handler = async (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \ttry &#123;</span><br><span class=\"line\">    \tawait next();</span><br><span class=\"line\">  \t&#125;catch (err) &#123;</span><br><span class=\"line\">    \tctx.response.status = err.statusCode || err.status || 500;</span><br><span class=\"line\">    \tctx.response.body = &#123;</span><br><span class=\"line\">      \t\tmessage: err.message</span><br><span class=\"line\">    \t&#125;;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.throw(500);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(handler);</span><br><span class=\"line\">app.use(main);</span><br></pre></td></tr></table></figure>\n<p>app监听错误的处理方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.on(&apos;error&apos;, (err, ctx) =&gt;</span><br><span class=\"line\"> \t\tconsole.error(&apos;server error&apos;, err);</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，如果错误被try…catch捕获，就不会触发error事件。这时，必须调用ctx.app.emit()，手动释放error事件，才能让监听函数生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const handler = async (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \ttry &#123;</span><br><span class=\"line\">    \tawait next();</span><br><span class=\"line\">  \t&#125; catch (err) &#123;</span><br><span class=\"line\">    \tctx.response.status = err.statusCode || err.status || 500;</span><br><span class=\"line\">    \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">    \tctx.response.body = &apos;&lt;p&gt;Something wrong, please contact administrator.&lt;/p&gt;&apos;;</span><br><span class=\"line\">    \tctx.app.emit(&apos;error&apos;, err, ctx);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://www.ruanyifeng.com/blog/2017/08/koa.html\" target=\"_blank\" rel=\"noopener\">阮一峰koa教程</a></p>\n"},{"layout":"post","title":"常见JS方法总结","subtitle":"去重、对象处理","date":"2018-03-04T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n记录下常用到的JS小方法，积累多了可以维护自己的方法库。\n\n----------\n\n\n#### 去重\n-------------\n\n数组基本类型去重\n\n```\n    function unique(arr) {\n        return arr.filter(function (element, index) {\n            return arr.indexOf(element) === index;\n        });\n    }\n```\n\n这里思维很简单，通过indexOf方法返回第一个匹配值的下标去当前值下标进行对比就可以知道是否是第一次出现。\n\n如果是字符串去重可以使用 .split('') 方法转成数组处理，处理完后使用 .join() 方法来重新组合成字符串即可。\n\n可以使用Array.isArray()来预先做个判断，看是否是合法数组。\n\n复杂类型去重\n\n```\n    function unique(arr) {\n        var hash = {};\n        return arr.filter(function (element) {\n            if (hash.hasOwnProperty(element)) {\n                return false;\n            }\n            hash[element] = true;\n            return true;\n        });\n    }\n```\n\n#### 对象处理\n-------------\n\n```\n    function jsonResultGenerator(obj) {\n        var result = [];\n        Object.keys(obj).forEach(function (key) {\n            result.push({ type: key, contents: obj[key] });\n        });\n        return result;\n    }\n```\n\nobj是一个形如{type1: contentsArr1, type2: contentsArr2}的结构，调整为[{type:type1,contents:contentsArr1},{type:type2,contents:contentsArr2}]的结构，那么只需要外面包一层就可以了，通过Object.keys(obj).forEach()来取出每个type，然后根据type取出array填入就可以了。\n\n下面看判断纯对象\n\n```\n    function isPureObject(item) {\n        return Object.prototype.toString.call(item).slice(8, -1) === 'Object';\n    }\n```\n\nObject.prototype.toString.call(item)返回的是item类型对应的'[object Null]'形式的字符串，.slice(8, -1)取的就是item的对象类型\n\n","source":"_posts/jsfunctions.md","raw":"---\nlayout: post\ntitle: \"常见JS方法总结\"\nsubtitle: \"去重、对象处理\"\ndate: 2018-3-5\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- JavaScript\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n记录下常用到的JS小方法，积累多了可以维护自己的方法库。\n\n----------\n\n\n#### 去重\n-------------\n\n数组基本类型去重\n\n```\n    function unique(arr) {\n        return arr.filter(function (element, index) {\n            return arr.indexOf(element) === index;\n        });\n    }\n```\n\n这里思维很简单，通过indexOf方法返回第一个匹配值的下标去当前值下标进行对比就可以知道是否是第一次出现。\n\n如果是字符串去重可以使用 .split('') 方法转成数组处理，处理完后使用 .join() 方法来重新组合成字符串即可。\n\n可以使用Array.isArray()来预先做个判断，看是否是合法数组。\n\n复杂类型去重\n\n```\n    function unique(arr) {\n        var hash = {};\n        return arr.filter(function (element) {\n            if (hash.hasOwnProperty(element)) {\n                return false;\n            }\n            hash[element] = true;\n            return true;\n        });\n    }\n```\n\n#### 对象处理\n-------------\n\n```\n    function jsonResultGenerator(obj) {\n        var result = [];\n        Object.keys(obj).forEach(function (key) {\n            result.push({ type: key, contents: obj[key] });\n        });\n        return result;\n    }\n```\n\nobj是一个形如{type1: contentsArr1, type2: contentsArr2}的结构，调整为[{type:type1,contents:contentsArr1},{type:type2,contents:contentsArr2}]的结构，那么只需要外面包一层就可以了，通过Object.keys(obj).forEach()来取出每个type，然后根据type取出array填入就可以了。\n\n下面看判断纯对象\n\n```\n    function isPureObject(item) {\n        return Object.prototype.toString.call(item).slice(8, -1) === 'Object';\n    }\n```\n\nObject.prototype.toString.call(item)返回的是item类型对应的'[object Null]'形式的字符串，.slice(8, -1)取的就是item的对象类型\n\n","slug":"jsfunctions","published":1,"updated":"2018-04-03T06:23:29.463Z","comments":1,"photos":[],"link":"","_id":"cjkvxydxz001l5xfa5z5il6wu","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>记录下常用到的JS小方法，积累多了可以维护自己的方法库。</p>\n<hr>\n<h4 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h4><hr>\n<p>数组基本类型去重</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function unique(arr) &#123;</span><br><span class=\"line\">    return arr.filter(function (element, index) &#123;</span><br><span class=\"line\">        return arr.indexOf(element) === index;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里思维很简单，通过indexOf方法返回第一个匹配值的下标去当前值下标进行对比就可以知道是否是第一次出现。</p>\n<p>如果是字符串去重可以使用 .split(‘’) 方法转成数组处理，处理完后使用 .join() 方法来重新组合成字符串即可。</p>\n<p>可以使用Array.isArray()来预先做个判断，看是否是合法数组。</p>\n<p>复杂类型去重</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function unique(arr) &#123;</span><br><span class=\"line\">    var hash = &#123;&#125;;</span><br><span class=\"line\">    return arr.filter(function (element) &#123;</span><br><span class=\"line\">        if (hash.hasOwnProperty(element)) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hash[element] = true;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象处理\"><a href=\"#对象处理\" class=\"headerlink\" title=\"对象处理\"></a>对象处理</h4><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function jsonResultGenerator(obj) &#123;</span><br><span class=\"line\">    var result = [];</span><br><span class=\"line\">    Object.keys(obj).forEach(function (key) &#123;</span><br><span class=\"line\">        result.push(&#123; type: key, contents: obj[key] &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>obj是一个形如{type1: contentsArr1, type2: contentsArr2}的结构，调整为[{type:type1,contents:contentsArr1},{type:type2,contents:contentsArr2}]的结构，那么只需要外面包一层就可以了，通过Object.keys(obj).forEach()来取出每个type，然后根据type取出array填入就可以了。</p>\n<p>下面看判断纯对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPureObject(item) &#123;</span><br><span class=\"line\">    return Object.prototype.toString.call(item).slice(8, -1) === &apos;Object&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Object.prototype.toString.call(item)返回的是item类型对应的’[object Null]’形式的字符串，.slice(8, -1)取的就是item的对象类型</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>记录下常用到的JS小方法，积累多了可以维护自己的方法库。</p>\n<hr>\n<h4 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h4><hr>\n<p>数组基本类型去重</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function unique(arr) &#123;</span><br><span class=\"line\">    return arr.filter(function (element, index) &#123;</span><br><span class=\"line\">        return arr.indexOf(element) === index;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里思维很简单，通过indexOf方法返回第一个匹配值的下标去当前值下标进行对比就可以知道是否是第一次出现。</p>\n<p>如果是字符串去重可以使用 .split(‘’) 方法转成数组处理，处理完后使用 .join() 方法来重新组合成字符串即可。</p>\n<p>可以使用Array.isArray()来预先做个判断，看是否是合法数组。</p>\n<p>复杂类型去重</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function unique(arr) &#123;</span><br><span class=\"line\">    var hash = &#123;&#125;;</span><br><span class=\"line\">    return arr.filter(function (element) &#123;</span><br><span class=\"line\">        if (hash.hasOwnProperty(element)) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hash[element] = true;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象处理\"><a href=\"#对象处理\" class=\"headerlink\" title=\"对象处理\"></a>对象处理</h4><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function jsonResultGenerator(obj) &#123;</span><br><span class=\"line\">    var result = [];</span><br><span class=\"line\">    Object.keys(obj).forEach(function (key) &#123;</span><br><span class=\"line\">        result.push(&#123; type: key, contents: obj[key] &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>obj是一个形如{type1: contentsArr1, type2: contentsArr2}的结构，调整为[{type:type1,contents:contentsArr1},{type:type2,contents:contentsArr2}]的结构，那么只需要外面包一层就可以了，通过Object.keys(obj).forEach()来取出每个type，然后根据type取出array填入就可以了。</p>\n<p>下面看判断纯对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPureObject(item) &#123;</span><br><span class=\"line\">    return Object.prototype.toString.call(item).slice(8, -1) === &apos;Object&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Object.prototype.toString.call(item)返回的是item类型对应的’[object Null]’形式的字符串，.slice(8, -1)取的就是item的对象类型</p>\n"},{"layout":"post","title":"介绍两种常用的前端api模拟工具","subtitle":"mockapi 及 json-server","date":"2018-02-05T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n考虑到前端开发通常与后端开发并行，依托接口文档来预写逻辑，这就需要有api模拟工具来提供模拟数据，这里简单记录两个用到的还不错的工具。\n\n----------\n\n\n#### mockapi\n-------------\n\n\n官方网站 [mockapi](http://www.mockapi.io/)\n\n登陆后即可创建项目，每个项目都会分配一个地址类似：http(s)://5aae20d37389ab0014b7b919.mockapi.io/api/v1/\n\n这个时候就可以创建源了，比如我们创建一个testuser源，填入初始数据，这里支持为源单独定义方法\n\n```\n{\n\t'id': 'id',\n\t'name': 'aishuangying',\n\t'age': 26\n}\n```\n\n然后通过 GET http(s)://5aae20d37389ab0014b7b919.mockapi.io/api/v1/testuser 就可以获取到数据啦。\n\n可以通过 bash 里面  $ curl https://5aae20d37389ab0014b7b919.mockapi.io/api/v1/testuser 来显示数据\n\n或者通过 postman 来读取数据，注意如果获取不到就采用 http 协议。\n\n-------------\n\n#### json-server\n\n\nGithub [json-server](https://github.com/typicode/json-server)\n\n首先全局安装\n\n```\n\tnpm install -g json-server\n```\n\n在项目中创建一个db.json文件，填入初始数据\n\n```\n{\n\t\"records\" : [\n\t\t{\n\t\t\t\"id\": 1,\n\t\t\t\"name\": \"aishuangying\",\n\t\t\t\"age\": 26\n\t\t}\n\t]\n}\n\n//接着启动它就可以了\njson-server --watch db.json --port 3008\n\n//然后请求 localhost:3008/records 就可以得到数据啦\n```\n\n以上都是GET请求，如果用POST请求，参数带一样形式的JSON，到同一地址就可以创建一条新的数据插入到队尾。\n\n如果是json-server这种方式的话POST的header的content-type 选用x-www-form-urlencoded，mockapi的话则选用 raw\n\n","source":"_posts/mockapi.js","raw":"---\nlayout: post\ntitle: \"介绍两种常用的前端api模拟工具\"\nsubtitle: \"mockapi 及 json-server\"\ndate: 2018-2-6\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- mockAPI\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n考虑到前端开发通常与后端开发并行，依托接口文档来预写逻辑，这就需要有api模拟工具来提供模拟数据，这里简单记录两个用到的还不错的工具。\n\n----------\n\n\n#### mockapi\n-------------\n\n\n官方网站 [mockapi](http://www.mockapi.io/)\n\n登陆后即可创建项目，每个项目都会分配一个地址类似：http(s)://5aae20d37389ab0014b7b919.mockapi.io/api/v1/\n\n这个时候就可以创建源了，比如我们创建一个testuser源，填入初始数据，这里支持为源单独定义方法\n\n```\n{\n\t'id': 'id',\n\t'name': 'aishuangying',\n\t'age': 26\n}\n```\n\n然后通过 GET http(s)://5aae20d37389ab0014b7b919.mockapi.io/api/v1/testuser 就可以获取到数据啦。\n\n可以通过 bash 里面  $ curl https://5aae20d37389ab0014b7b919.mockapi.io/api/v1/testuser 来显示数据\n\n或者通过 postman 来读取数据，注意如果获取不到就采用 http 协议。\n\n-------------\n\n#### json-server\n\n\nGithub [json-server](https://github.com/typicode/json-server)\n\n首先全局安装\n\n```\n\tnpm install -g json-server\n```\n\n在项目中创建一个db.json文件，填入初始数据\n\n```\n{\n\t\"records\" : [\n\t\t{\n\t\t\t\"id\": 1,\n\t\t\t\"name\": \"aishuangying\",\n\t\t\t\"age\": 26\n\t\t}\n\t]\n}\n\n//接着启动它就可以了\njson-server --watch db.json --port 3008\n\n//然后请求 localhost:3008/records 就可以得到数据啦\n```\n\n以上都是GET请求，如果用POST请求，参数带一样形式的JSON，到同一地址就可以创建一条新的数据插入到队尾。\n\n如果是json-server这种方式的话POST的header的content-type 选用x-www-form-urlencoded，mockapi的话则选用 raw\n\n","slug":"mockapi","published":1,"updated":"2018-03-18T09:03:10.141Z","comments":1,"photos":[],"link":"","_id":"cjkvxydy0001n5xfaegm1vkp7","content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n考虑到前端开发通常与后端开发并行，依托接口文档来预写逻辑，这就需要有api模拟工具来提供模拟数据，这里简单记录两个用到的还不错的工具。\n\n----------\n\n\n#### mockapi\n-------------\n\n\n官方网站 [mockapi](http://www.mockapi.io/)\n\n登陆后即可创建项目，每个项目都会分配一个地址类似：http(s)://5aae20d37389ab0014b7b919.mockapi.io/api/v1/\n\n这个时候就可以创建源了，比如我们创建一个testuser源，填入初始数据，这里支持为源单独定义方法\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&apos;id&apos;: &apos;id&apos;,</span><br><span class=\"line\">\t&apos;name&apos;: &apos;aishuangying&apos;,</span><br><span class=\"line\">\t&apos;age&apos;: 26</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n然后通过 GET http(s)://5aae20d37389ab0014b7b919.mockapi.io/api/v1/testuser 就可以获取到数据啦。\n\n可以通过 bash 里面  $ curl https://5aae20d37389ab0014b7b919.mockapi.io/api/v1/testuser 来显示数据\n\n或者通过 postman 来读取数据，注意如果获取不到就采用 http 协议。\n\n-------------\n\n#### json-server\n\n\nGithub [json-server](https://github.com/typicode/json-server)\n\n首先全局安装\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g json-server</span><br></pre></td></tr></table></figure>\n\n在项目中创建一个db.json文件，填入初始数据\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;records&quot; : [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;id&quot;: 1,</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;aishuangying&quot;,</span><br><span class=\"line\">\t\t\t&quot;age&quot;: 26</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//接着启动它就可以了</span><br><span class=\"line\">json-server --watch db.json --port 3008</span><br><span class=\"line\"></span><br><span class=\"line\">//然后请求 localhost:3008/records 就可以得到数据啦</span><br></pre></td></tr></table></figure>\n\n以上都是GET请求，如果用POST请求，参数带一样形式的JSON，到同一地址就可以创建一条新的数据插入到队尾。\n\n如果是json-server这种方式的话POST的header的content-type 选用x-www-form-urlencoded，mockapi的话则选用 raw\n\n","site":{"data":{}},"excerpt":"","more":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n考虑到前端开发通常与后端开发并行，依托接口文档来预写逻辑，这就需要有api模拟工具来提供模拟数据，这里简单记录两个用到的还不错的工具。\n\n----------\n\n\n#### mockapi\n-------------\n\n\n官方网站 [mockapi](http://www.mockapi.io/)\n\n登陆后即可创建项目，每个项目都会分配一个地址类似：http(s)://5aae20d37389ab0014b7b919.mockapi.io/api/v1/\n\n这个时候就可以创建源了，比如我们创建一个testuser源，填入初始数据，这里支持为源单独定义方法\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&apos;id&apos;: &apos;id&apos;,</span><br><span class=\"line\">\t&apos;name&apos;: &apos;aishuangying&apos;,</span><br><span class=\"line\">\t&apos;age&apos;: 26</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n然后通过 GET http(s)://5aae20d37389ab0014b7b919.mockapi.io/api/v1/testuser 就可以获取到数据啦。\n\n可以通过 bash 里面  $ curl https://5aae20d37389ab0014b7b919.mockapi.io/api/v1/testuser 来显示数据\n\n或者通过 postman 来读取数据，注意如果获取不到就采用 http 协议。\n\n-------------\n\n#### json-server\n\n\nGithub [json-server](https://github.com/typicode/json-server)\n\n首先全局安装\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g json-server</span><br></pre></td></tr></table></figure>\n\n在项目中创建一个db.json文件，填入初始数据\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;records&quot; : [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;id&quot;: 1,</span><br><span class=\"line\">\t\t\t&quot;name&quot;: &quot;aishuangying&quot;,</span><br><span class=\"line\">\t\t\t&quot;age&quot;: 26</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//接着启动它就可以了</span><br><span class=\"line\">json-server --watch db.json --port 3008</span><br><span class=\"line\"></span><br><span class=\"line\">//然后请求 localhost:3008/records 就可以得到数据啦</span><br></pre></td></tr></table></figure>\n\n以上都是GET请求，如果用POST请求，参数带一样形式的JSON，到同一地址就可以创建一条新的数据插入到队尾。\n\n如果是json-server这种方式的话POST的header的content-type 选用x-www-form-urlencoded，mockapi的话则选用 raw\n\n"},{"layout":"post","title":"Node.js系列(mongoose的学习笔记 一)","subtitle":"mongoose的基础知识","date":"2017-12-23T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在学习Node.js中常用的包相关的内容，作为以后工作中的备忘笔记。\n[官方文档](http://mongoosejs.com/docs/api.html)\n[社区文档](http://www.nodeclass.com/api/mongoose.html)\n\n----------\n\n\n### 安装mongoose\n-------------\n\n```\n    npm install mongoose\n```\n\n### 连接mongoose\n-------------\n\n```\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://<dbuser>:<dbpassword>@ds147681.mlab.com:47681/aishuangying');\n\n    var db = mongoose.connection;\n\n    db.on('error', console.error.bind(console, 'connection error:'));\n    db.once('open', function (callback) {\n        console.log('connect success');\n    });\n```\n[点击这里](http://www.nodeclass.com/api/mongoose.html#connection-js)文档了解更多connection事件\n\n### Schema\n-------------\nSchema是mongoose的定义表结构的数据模式。\n每个Schema会映射到mongodb中的一个collection，但是它不具备操作数据库的能力。\n定义Schema\n\n```\n    var Schema = mongoose.Schema;         //这里的mongoose就是上面初始化好的mongoose变量\n\n    var OneSchema = new Schema({          \n        username : { type: String },\n        userpwd: {type: String},\n        userage: {type: Number},\n        logindate : { type: Date}\n    });\n```\n[点击这里](http://www.nodeclass.com/api/mongoose.html#schematype-js)文档了解更多Schema类型\n\n### Model\n-------------\n定义好Schema之后生成Model\nmodel是由schema生成的模型，可以对数据库的操作\n我们对上面的定义的user的schema生成一个User的model并导出，修改后代码如下\n\n```\n    var oneModel = mongoose.model('newUser',OneSchema);\n```\n这里的'User'就是数据库中对应的Collection名称\n\n### 常用的数据库操作\n-------------\n\n插入数据库\n\n```\n    function insert() {\n        var one = new oneModel({\n            username : 'Tracy McGrady',                 //用户账号\n            userpwd: 'abcd',                            //密码\n            userage: 37,                                //年龄\n            logindate : new Date(),                      //最近登录时间\n            updateTime : new Date()\n        });\n        one.save(function (err, res) {\n            if (err) {\n                console.log(\"Error:\" + err);\n            }\n            else {\n                console.log(\"Res:\" + res);\n            }\n        });\n    }\n    insert();\n```\n更新数据库\n\n```\n    function update(){\n        var wherestr = {'username' : 'Tracy McGrady'}\n        var updateinfo = {'updateTime' : new Date()};\n        \n        oneModel.update(wherestr, updateinfo , function(err, res){\n            if (err) {\n                console.log(\"Error:\" + err);\n            }\n            else {\n                console.log(\"Res:\" + res);\n            }\n        })\n    }\n    update();\n```\n更新规则，在这类model中按名称来更新updateTime属性。\n查询\n\n```\n    function getByConditions(){\n        var wherestr = {'username' : 'Tracy McGrady'};\n    \n        oneModel.find(wherestr, function(err, res){\n            if (err) {\n                console.log(\"Error:\" + err);\n            }\n            else {\n                console.log(\"Res:\" + res);\n            }\n        })\n    }   \n    getByConditions();\n```\n返回的res为\n```\n    { \n        _id: 5a3f6664b2938f0517a2fa2e,\n        username: 'Tracy McGrady',\n        userpwd: 'abcd',\n        userage: 37,\n        logindate: 2017-12-24T08:33:40.714Z,\n        updateTime: 2017-12-24T08:35:48.898Z,\n        __v: 0 \n    }\n```\n第2个参数可以设置要查询输出的字段,比如 var opt = {\"username\": 1 ,\"_id\": 0};\n返回的res为\n```\n    { username: 'Tracy McGrady' }\n```\n比如我要查询年龄范围条件应该怎么写呢？\n```\n    oneModel.find({userage: {$gte: 21, $lte: 65}}, callback);    //这表示查询年龄大于等21而且小于等于65岁\n```\n其实类似的还有：　\n\n　　$or　　　　       或关系\n　　$nor　　　        或关系取反\n　　$gt　　　　       大于\n　　$gte　　　        大于等于\n　　$lt　　　　       小于\n　　$lte　　　        小于等于\n　　$ne              不等于\n　　$in              在多个值范围内\n　　$nin             不在多个值范围内\n　　$all             匹配数组中多个值\n　　$regex　　        正则，用于模糊查询\n　　$size　　　       匹配数组大小\n　　$maxDistance　   范围查询，距离（基于LBS）\n　　$mod　　         取模运算\n　　$near　　　       邻域查询，查询附近的位置（基于LBS）\n　　$exists　　      字段是否存在\n　　$elemMatch　　   匹配内数组内的元素\n　　$within　　      范围查询（基于LBS）\n　　$box　　　       范围查询，矩形范围（基于LBS）\n　　$center         范围醒询，圆形范围（基于LBS）\n　　$centerSphere　　范围查询，球形范围（基于LBS）\n　　$slice　　　　    查询字段集合中的元素（比如从第几个之后，第N到第M个元素）\n建索引和设置默认值\n\n```\n    var UserSchema = new Schema({          \n        username : { type: String , index: true},  \n        userpwd: {type: String},                    \n        userage: {type: Number},                   \n        logindate : { type: Date, default:Date.now} \n    });\n```\n　\n\n更多的操作，查询[官方文档](http://www.nodeclass.com/api/mongoose.html#model-js)","source":"_posts/node_mongoose_1.md","raw":"---\nlayout: post\ntitle: \"Node.js系列(mongoose的学习笔记 一)\"\nsubtitle: \"mongoose的基础知识\"\ndate: 2017-12-24\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - Node.js\n    - MongoDB\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在学习Node.js中常用的包相关的内容，作为以后工作中的备忘笔记。\n[官方文档](http://mongoosejs.com/docs/api.html)\n[社区文档](http://www.nodeclass.com/api/mongoose.html)\n\n----------\n\n\n### 安装mongoose\n-------------\n\n```\n    npm install mongoose\n```\n\n### 连接mongoose\n-------------\n\n```\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://<dbuser>:<dbpassword>@ds147681.mlab.com:47681/aishuangying');\n\n    var db = mongoose.connection;\n\n    db.on('error', console.error.bind(console, 'connection error:'));\n    db.once('open', function (callback) {\n        console.log('connect success');\n    });\n```\n[点击这里](http://www.nodeclass.com/api/mongoose.html#connection-js)文档了解更多connection事件\n\n### Schema\n-------------\nSchema是mongoose的定义表结构的数据模式。\n每个Schema会映射到mongodb中的一个collection，但是它不具备操作数据库的能力。\n定义Schema\n\n```\n    var Schema = mongoose.Schema;         //这里的mongoose就是上面初始化好的mongoose变量\n\n    var OneSchema = new Schema({          \n        username : { type: String },\n        userpwd: {type: String},\n        userage: {type: Number},\n        logindate : { type: Date}\n    });\n```\n[点击这里](http://www.nodeclass.com/api/mongoose.html#schematype-js)文档了解更多Schema类型\n\n### Model\n-------------\n定义好Schema之后生成Model\nmodel是由schema生成的模型，可以对数据库的操作\n我们对上面的定义的user的schema生成一个User的model并导出，修改后代码如下\n\n```\n    var oneModel = mongoose.model('newUser',OneSchema);\n```\n这里的'User'就是数据库中对应的Collection名称\n\n### 常用的数据库操作\n-------------\n\n插入数据库\n\n```\n    function insert() {\n        var one = new oneModel({\n            username : 'Tracy McGrady',                 //用户账号\n            userpwd: 'abcd',                            //密码\n            userage: 37,                                //年龄\n            logindate : new Date(),                      //最近登录时间\n            updateTime : new Date()\n        });\n        one.save(function (err, res) {\n            if (err) {\n                console.log(\"Error:\" + err);\n            }\n            else {\n                console.log(\"Res:\" + res);\n            }\n        });\n    }\n    insert();\n```\n更新数据库\n\n```\n    function update(){\n        var wherestr = {'username' : 'Tracy McGrady'}\n        var updateinfo = {'updateTime' : new Date()};\n        \n        oneModel.update(wherestr, updateinfo , function(err, res){\n            if (err) {\n                console.log(\"Error:\" + err);\n            }\n            else {\n                console.log(\"Res:\" + res);\n            }\n        })\n    }\n    update();\n```\n更新规则，在这类model中按名称来更新updateTime属性。\n查询\n\n```\n    function getByConditions(){\n        var wherestr = {'username' : 'Tracy McGrady'};\n    \n        oneModel.find(wherestr, function(err, res){\n            if (err) {\n                console.log(\"Error:\" + err);\n            }\n            else {\n                console.log(\"Res:\" + res);\n            }\n        })\n    }   \n    getByConditions();\n```\n返回的res为\n```\n    { \n        _id: 5a3f6664b2938f0517a2fa2e,\n        username: 'Tracy McGrady',\n        userpwd: 'abcd',\n        userage: 37,\n        logindate: 2017-12-24T08:33:40.714Z,\n        updateTime: 2017-12-24T08:35:48.898Z,\n        __v: 0 \n    }\n```\n第2个参数可以设置要查询输出的字段,比如 var opt = {\"username\": 1 ,\"_id\": 0};\n返回的res为\n```\n    { username: 'Tracy McGrady' }\n```\n比如我要查询年龄范围条件应该怎么写呢？\n```\n    oneModel.find({userage: {$gte: 21, $lte: 65}}, callback);    //这表示查询年龄大于等21而且小于等于65岁\n```\n其实类似的还有：　\n\n　　$or　　　　       或关系\n　　$nor　　　        或关系取反\n　　$gt　　　　       大于\n　　$gte　　　        大于等于\n　　$lt　　　　       小于\n　　$lte　　　        小于等于\n　　$ne              不等于\n　　$in              在多个值范围内\n　　$nin             不在多个值范围内\n　　$all             匹配数组中多个值\n　　$regex　　        正则，用于模糊查询\n　　$size　　　       匹配数组大小\n　　$maxDistance　   范围查询，距离（基于LBS）\n　　$mod　　         取模运算\n　　$near　　　       邻域查询，查询附近的位置（基于LBS）\n　　$exists　　      字段是否存在\n　　$elemMatch　　   匹配内数组内的元素\n　　$within　　      范围查询（基于LBS）\n　　$box　　　       范围查询，矩形范围（基于LBS）\n　　$center         范围醒询，圆形范围（基于LBS）\n　　$centerSphere　　范围查询，球形范围（基于LBS）\n　　$slice　　　　    查询字段集合中的元素（比如从第几个之后，第N到第M个元素）\n建索引和设置默认值\n\n```\n    var UserSchema = new Schema({          \n        username : { type: String , index: true},  \n        userpwd: {type: String},                    \n        userage: {type: Number},                   \n        logindate : { type: Date, default:Date.now} \n    });\n```\n　\n\n更多的操作，查询[官方文档](http://www.nodeclass.com/api/mongoose.html#model-js)","slug":"node_mongoose_1","published":1,"updated":"2018-01-14T12:21:08.849Z","comments":1,"photos":[],"link":"","_id":"cjkvxydy2001p5xfa7uj636ft","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在学习Node.js中常用的包相关的内容，作为以后工作中的备忘笔记。<br><a href=\"http://mongoosejs.com/docs/api.html\" target=\"_blank\" rel=\"noopener\">官方文档</a><br><a href=\"http://www.nodeclass.com/api/mongoose.html\" target=\"_blank\" rel=\"noopener\">社区文档</a></p>\n<hr>\n<h3 id=\"安装mongoose\"><a href=\"#安装mongoose\" class=\"headerlink\" title=\"安装mongoose\"></a>安装mongoose</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mongoose</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接mongoose\"><a href=\"#连接mongoose\" class=\"headerlink\" title=\"连接mongoose\"></a>连接mongoose</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mongoose = require(&apos;mongoose&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(&apos;mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds147681.mlab.com:47681/aishuangying&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var db = mongoose.connection;</span><br><span class=\"line\"></span><br><span class=\"line\">db.on(&apos;error&apos;, console.error.bind(console, &apos;connection error:&apos;));</span><br><span class=\"line\">db.once(&apos;open&apos;, function (callback) &#123;</span><br><span class=\"line\">    console.log(&apos;connect success&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.nodeclass.com/api/mongoose.html#connection-js\" target=\"_blank\" rel=\"noopener\">点击这里</a>文档了解更多connection事件</p>\n<h3 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h3><hr>\n<p>Schema是mongoose的定义表结构的数据模式。<br>每个Schema会映射到mongodb中的一个collection，但是它不具备操作数据库的能力。<br>定义Schema</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Schema = mongoose.Schema;         //这里的mongoose就是上面初始化好的mongoose变量</span><br><span class=\"line\"></span><br><span class=\"line\">var OneSchema = new Schema(&#123;          </span><br><span class=\"line\">    username : &#123; type: String &#125;,</span><br><span class=\"line\">    userpwd: &#123;type: String&#125;,</span><br><span class=\"line\">    userage: &#123;type: Number&#125;,</span><br><span class=\"line\">    logindate : &#123; type: Date&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.nodeclass.com/api/mongoose.html#schematype-js\" target=\"_blank\" rel=\"noopener\">点击这里</a>文档了解更多Schema类型</p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><hr>\n<p>定义好Schema之后生成Model<br>model是由schema生成的模型，可以对数据库的操作<br>我们对上面的定义的user的schema生成一个User的model并导出，修改后代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var oneModel = mongoose.model(&apos;newUser&apos;,OneSchema);</span><br></pre></td></tr></table></figure>\n<p>这里的’User’就是数据库中对应的Collection名称</p>\n<h3 id=\"常用的数据库操作\"><a href=\"#常用的数据库操作\" class=\"headerlink\" title=\"常用的数据库操作\"></a>常用的数据库操作</h3><hr>\n<p>插入数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function insert() &#123;</span><br><span class=\"line\">    var one = new oneModel(&#123;</span><br><span class=\"line\">        username : &apos;Tracy McGrady&apos;,                 //用户账号</span><br><span class=\"line\">        userpwd: &apos;abcd&apos;,                            //密码</span><br><span class=\"line\">        userage: 37,                                //年龄</span><br><span class=\"line\">        logindate : new Date(),                      //最近登录时间</span><br><span class=\"line\">        updateTime : new Date()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    one.save(function (err, res) &#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(&quot;Error:&quot; + err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            console.log(&quot;Res:&quot; + res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">insert();</span><br></pre></td></tr></table></figure>\n<p>更新数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function update()&#123;</span><br><span class=\"line\">    var wherestr = &#123;&apos;username&apos; : &apos;Tracy McGrady&apos;&#125;</span><br><span class=\"line\">    var updateinfo = &#123;&apos;updateTime&apos; : new Date()&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    oneModel.update(wherestr, updateinfo , function(err, res)&#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(&quot;Error:&quot; + err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            console.log(&quot;Res:&quot; + res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure>\n<p>更新规则，在这类model中按名称来更新updateTime属性。<br>查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getByConditions()&#123;</span><br><span class=\"line\">    var wherestr = &#123;&apos;username&apos; : &apos;Tracy McGrady&apos;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    oneModel.find(wherestr, function(err, res)&#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(&quot;Error:&quot; + err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            console.log(&quot;Res:&quot; + res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">getByConditions();</span><br></pre></td></tr></table></figure>\n<p>返回的res为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">    _id: 5a3f6664b2938f0517a2fa2e,</span><br><span class=\"line\">    username: &apos;Tracy McGrady&apos;,</span><br><span class=\"line\">    userpwd: &apos;abcd&apos;,</span><br><span class=\"line\">    userage: 37,</span><br><span class=\"line\">    logindate: 2017-12-24T08:33:40.714Z,</span><br><span class=\"line\">    updateTime: 2017-12-24T08:35:48.898Z,</span><br><span class=\"line\">    __v: 0 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第2个参数可以设置要查询输出的字段,比如 var opt = {“username”: 1 ,”_id”: 0};<br>返回的res为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; username: &apos;Tracy McGrady&apos; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>比如我要查询年龄范围条件应该怎么写呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oneModel.find(&#123;userage: &#123;$gte: 21, $lte: 65&#125;&#125;, callback);    //这表示查询年龄大于等21而且小于等于65岁</span><br></pre></td></tr></table></figure></p>\n<p>其实类似的还有：　</p>\n<p>　　$or　　　　       或关系<br>　　$nor　　　        或关系取反<br>　　$gt　　　　       大于<br>　　$gte　　　        大于等于<br>　　$lt　　　　       小于<br>　　$lte　　　        小于等于<br>　　$ne              不等于<br>　　$in              在多个值范围内<br>　　$nin             不在多个值范围内<br>　　$all             匹配数组中多个值<br>　　$regex　　        正则，用于模糊查询<br>　　$size　　　       匹配数组大小<br>　　$maxDistance　   范围查询，距离（基于LBS）<br>　　$mod　　         取模运算<br>　　$near　　　       邻域查询，查询附近的位置（基于LBS）<br>　　$exists　　      字段是否存在<br>　　$elemMatch　　   匹配内数组内的元素<br>　　$within　　      范围查询（基于LBS）<br>　　$box　　　       范围查询，矩形范围（基于LBS）<br>　　$center         范围醒询，圆形范围（基于LBS）<br>　　$centerSphere　　范围查询，球形范围（基于LBS）<br>　　$slice　　　　    查询字段集合中的元素（比如从第几个之后，第N到第M个元素）<br>建索引和设置默认值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var UserSchema = new Schema(&#123;          </span><br><span class=\"line\">    username : &#123; type: String , index: true&#125;,  </span><br><span class=\"line\">    userpwd: &#123;type: String&#125;,                    </span><br><span class=\"line\">    userage: &#123;type: Number&#125;,                   </span><br><span class=\"line\">    logindate : &#123; type: Date, default:Date.now&#125; </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>　</p>\n<p>更多的操作，查询<a href=\"http://www.nodeclass.com/api/mongoose.html#model-js\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在学习Node.js中常用的包相关的内容，作为以后工作中的备忘笔记。<br><a href=\"http://mongoosejs.com/docs/api.html\" target=\"_blank\" rel=\"noopener\">官方文档</a><br><a href=\"http://www.nodeclass.com/api/mongoose.html\" target=\"_blank\" rel=\"noopener\">社区文档</a></p>\n<hr>\n<h3 id=\"安装mongoose\"><a href=\"#安装mongoose\" class=\"headerlink\" title=\"安装mongoose\"></a>安装mongoose</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mongoose</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接mongoose\"><a href=\"#连接mongoose\" class=\"headerlink\" title=\"连接mongoose\"></a>连接mongoose</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mongoose = require(&apos;mongoose&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(&apos;mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds147681.mlab.com:47681/aishuangying&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var db = mongoose.connection;</span><br><span class=\"line\"></span><br><span class=\"line\">db.on(&apos;error&apos;, console.error.bind(console, &apos;connection error:&apos;));</span><br><span class=\"line\">db.once(&apos;open&apos;, function (callback) &#123;</span><br><span class=\"line\">    console.log(&apos;connect success&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.nodeclass.com/api/mongoose.html#connection-js\" target=\"_blank\" rel=\"noopener\">点击这里</a>文档了解更多connection事件</p>\n<h3 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h3><hr>\n<p>Schema是mongoose的定义表结构的数据模式。<br>每个Schema会映射到mongodb中的一个collection，但是它不具备操作数据库的能力。<br>定义Schema</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Schema = mongoose.Schema;         //这里的mongoose就是上面初始化好的mongoose变量</span><br><span class=\"line\"></span><br><span class=\"line\">var OneSchema = new Schema(&#123;          </span><br><span class=\"line\">    username : &#123; type: String &#125;,</span><br><span class=\"line\">    userpwd: &#123;type: String&#125;,</span><br><span class=\"line\">    userage: &#123;type: Number&#125;,</span><br><span class=\"line\">    logindate : &#123; type: Date&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.nodeclass.com/api/mongoose.html#schematype-js\" target=\"_blank\" rel=\"noopener\">点击这里</a>文档了解更多Schema类型</p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><hr>\n<p>定义好Schema之后生成Model<br>model是由schema生成的模型，可以对数据库的操作<br>我们对上面的定义的user的schema生成一个User的model并导出，修改后代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var oneModel = mongoose.model(&apos;newUser&apos;,OneSchema);</span><br></pre></td></tr></table></figure>\n<p>这里的’User’就是数据库中对应的Collection名称</p>\n<h3 id=\"常用的数据库操作\"><a href=\"#常用的数据库操作\" class=\"headerlink\" title=\"常用的数据库操作\"></a>常用的数据库操作</h3><hr>\n<p>插入数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function insert() &#123;</span><br><span class=\"line\">    var one = new oneModel(&#123;</span><br><span class=\"line\">        username : &apos;Tracy McGrady&apos;,                 //用户账号</span><br><span class=\"line\">        userpwd: &apos;abcd&apos;,                            //密码</span><br><span class=\"line\">        userage: 37,                                //年龄</span><br><span class=\"line\">        logindate : new Date(),                      //最近登录时间</span><br><span class=\"line\">        updateTime : new Date()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    one.save(function (err, res) &#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(&quot;Error:&quot; + err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            console.log(&quot;Res:&quot; + res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">insert();</span><br></pre></td></tr></table></figure>\n<p>更新数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function update()&#123;</span><br><span class=\"line\">    var wherestr = &#123;&apos;username&apos; : &apos;Tracy McGrady&apos;&#125;</span><br><span class=\"line\">    var updateinfo = &#123;&apos;updateTime&apos; : new Date()&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    oneModel.update(wherestr, updateinfo , function(err, res)&#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(&quot;Error:&quot; + err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            console.log(&quot;Res:&quot; + res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure>\n<p>更新规则，在这类model中按名称来更新updateTime属性。<br>查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getByConditions()&#123;</span><br><span class=\"line\">    var wherestr = &#123;&apos;username&apos; : &apos;Tracy McGrady&apos;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    oneModel.find(wherestr, function(err, res)&#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(&quot;Error:&quot; + err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            console.log(&quot;Res:&quot; + res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">getByConditions();</span><br></pre></td></tr></table></figure>\n<p>返回的res为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">    _id: 5a3f6664b2938f0517a2fa2e,</span><br><span class=\"line\">    username: &apos;Tracy McGrady&apos;,</span><br><span class=\"line\">    userpwd: &apos;abcd&apos;,</span><br><span class=\"line\">    userage: 37,</span><br><span class=\"line\">    logindate: 2017-12-24T08:33:40.714Z,</span><br><span class=\"line\">    updateTime: 2017-12-24T08:35:48.898Z,</span><br><span class=\"line\">    __v: 0 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第2个参数可以设置要查询输出的字段,比如 var opt = {“username”: 1 ,”_id”: 0};<br>返回的res为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; username: &apos;Tracy McGrady&apos; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>比如我要查询年龄范围条件应该怎么写呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oneModel.find(&#123;userage: &#123;$gte: 21, $lte: 65&#125;&#125;, callback);    //这表示查询年龄大于等21而且小于等于65岁</span><br></pre></td></tr></table></figure></p>\n<p>其实类似的还有：　</p>\n<p>　　$or　　　　       或关系<br>　　$nor　　　        或关系取反<br>　　$gt　　　　       大于<br>　　$gte　　　        大于等于<br>　　$lt　　　　       小于<br>　　$lte　　　        小于等于<br>　　$ne              不等于<br>　　$in              在多个值范围内<br>　　$nin             不在多个值范围内<br>　　$all             匹配数组中多个值<br>　　$regex　　        正则，用于模糊查询<br>　　$size　　　       匹配数组大小<br>　　$maxDistance　   范围查询，距离（基于LBS）<br>　　$mod　　         取模运算<br>　　$near　　　       邻域查询，查询附近的位置（基于LBS）<br>　　$exists　　      字段是否存在<br>　　$elemMatch　　   匹配内数组内的元素<br>　　$within　　      范围查询（基于LBS）<br>　　$box　　　       范围查询，矩形范围（基于LBS）<br>　　$center         范围醒询，圆形范围（基于LBS）<br>　　$centerSphere　　范围查询，球形范围（基于LBS）<br>　　$slice　　　　    查询字段集合中的元素（比如从第几个之后，第N到第M个元素）<br>建索引和设置默认值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var UserSchema = new Schema(&#123;          </span><br><span class=\"line\">    username : &#123; type: String , index: true&#125;,  </span><br><span class=\"line\">    userpwd: &#123;type: String&#125;,                    </span><br><span class=\"line\">    userage: &#123;type: Number&#125;,                   </span><br><span class=\"line\">    logindate : &#123; type: Date, default:Date.now&#125; </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>　</p>\n<p>更多的操作，查询<a href=\"http://www.nodeclass.com/api/mongoose.html#model-js\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n"},{"layout":"post","title":"Redux学习笔记","subtitle":"记录下学习redux过程中的要点","date":"2018-02-19T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\nRedux 是 JavaScript 状态容器，提供可预测化的状态管理。因为最近开始系统得学习React，而Redux常被用作React的数据管理器，所以一并学习。\n\n这篇博客（或者还有几篇）主要用来记录在学习过程中难以理解的点和值得记住的问题，随时补充，以备查阅。\n\n----------\n\n\n#### 安装\n-------------\n\n```\n\tnpm install --save redux\n\n\tnpm install --save react-redux\n```\n\n\n-------------\n\n#### 核心思想\n\nRedux是一个单向数据流管理器，也就是说在整个项目的逻辑中，数据的流动是单向的，每个操作的后果都可预测，这就使得在大型项目开发中的数据管理变得简单（虽然对于很多小项目的结构会复杂很多，比如todolist，这也就是为什么有句话叫“如果你不确定需要Redux，那你就是不需要它”）\n\n每个Redux都一个唯一的store，用来管理所有呈现呈现出来的数据状态，包含 state和 reducers。\n\n而用户的每个行为只能通过触发action来影响store从而呈现出来（比如改变state）\n\n所以，redux的三大原则就可以理解了：\n\n* 单一数据源\n\t整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中\n* state是只读的\n\t唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象\n* 使用纯函数来执行修改\n\t也就是reducer函数应该是一个 (state, action) => state 的纯函数\n\n\n\n\n#### Store\n\n全局唯一的store用来管理应用状态。\n\n当需要拆分数据处理逻辑时，你应该使用 reducer 组合 而不是创建多个 store。\n\n```\n\timport { createStore } from 'redux';\n\n\tlet store = createStore(counter);\n\n\tstore.dispatch({ type: 'INCREMENT' });\n\n\tconsole.log(store.getState()) //就可以输出当前的应用的所有state情况\n\n\tconst unsubscribe = store.subscribe(() =>\n  \t\tconsole.log(store.getState())\n\t)\t//监听 每次state更新时，打印日志\n\n\tunsubscribe(); //注销监听器\n```\n\n在这里的state是只读的。这样确保了视图和网络请求都不能直接修改 state，相反它们只能表达想要修改的意图。\n\n而这些意图都会被抽象成一个action集中化处理。\n\n发布一个事件是唯一改变内部state的方法，而action则可用于序列化来呈现使用过程。\n\n为了描述 action 改变 state tree 的过程，需要编写reducers，也就是action的处理逻辑。\n\n\n#### Reducer\n\n来看reducer，它的形式为 (state, action) => state 的纯函数，也就是 state 变化的逻辑所在，描述了action怎么把旧状态改变为新状态，而reducer返回的形式必须要和state形式一致，这很好理解，reducer的任务就是得到新state\n\n```\n\tfunction counter(state = 0, action) {\n\t  \tswitch (action.type) {\n\t\t  \tcase 'INCREMENT':\n\t\t    \treturn state + 1;\n\t\t  \tcase 'DECREMENT':\n\t\t    \treturn state - 1;\n\t\t  \tdefault:\n\t\t    \treturn state;\n\t  \t}\n\t}\n```\n\n这是一个简单的reducer，传入一个旧的状态（初始值为0），然后根据行为action来进行不同的操作，然后返回新的状态。\n\n使用reducer时应该注意：\n\n* 不要修改传入参数\n* 不要执行有副作用得操作，比如API请求或路由跳转等\n* 不要调用非纯函数，比如 Date.now() 或 Math.random() 等等\n\nreducer一定要保持纯净\n\n\n#### action\n\naction描述的是一种事件，可能由用户操作产生，或者由服务器响应等等，它的意义就是描述数据的变化原因，也是store数据的唯一来源\n\n可以通过 atore.dispatch() 将action传到store中。\n\naction实际上就是一个JS普通对象，它的意义是我们赋予的，从而约定 action里面必须有一个字符串类型的type字段来表示将要执行的动作，例如\n\n```\n\t{\n  \t\ttype: ADD_TODO,\n  \t\ttext: 'Build my first Redux app'\n\t}\n```\n\n这个是action，它表示一个行为，而下面的函数是：action创建函数，它是生成action的方法，它只是简单得返回一个action。\n\n```\n\texport const addTodo = (text) => ({\n  \t\ttype: 'ADD_TODO',\n  \t\tid: nextTodoId++,\n  \t\ttext\n\t})\n```\n\n应该尽量减少在 action 中传递的数据\n\n\n#### 数据流\n\n严格的单向数据流是 Redux 架构的设计核心。\n\nRedux应用中数据得生命周期遵循以下4个步骤：\n\n1. 调用store.dispatch(action) ，可以在任何地方调用，触发一个事件\n2. Redux store调用传入的reducer函数，把 当前的state tree 和 action 作为参数传入，来处理这个action\n3. 根reducer应该把多个子reducer输出合并成一个单一的state tree\n4. Redux store保存了根reducer返回的完整 state tree\n\n\n掌握了这些基本知识，接下来分析下官方提供的最简单的todolist应用，来梳理Redux的设计思路和使用流程。","source":"_posts/redux.md","raw":"---\nlayout: post\ntitle: \"Redux学习笔记\"\nsubtitle: \"记录下学习redux过程中的要点\"\ndate: 2018-2-20\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- Redux\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\nRedux 是 JavaScript 状态容器，提供可预测化的状态管理。因为最近开始系统得学习React，而Redux常被用作React的数据管理器，所以一并学习。\n\n这篇博客（或者还有几篇）主要用来记录在学习过程中难以理解的点和值得记住的问题，随时补充，以备查阅。\n\n----------\n\n\n#### 安装\n-------------\n\n```\n\tnpm install --save redux\n\n\tnpm install --save react-redux\n```\n\n\n-------------\n\n#### 核心思想\n\nRedux是一个单向数据流管理器，也就是说在整个项目的逻辑中，数据的流动是单向的，每个操作的后果都可预测，这就使得在大型项目开发中的数据管理变得简单（虽然对于很多小项目的结构会复杂很多，比如todolist，这也就是为什么有句话叫“如果你不确定需要Redux，那你就是不需要它”）\n\n每个Redux都一个唯一的store，用来管理所有呈现呈现出来的数据状态，包含 state和 reducers。\n\n而用户的每个行为只能通过触发action来影响store从而呈现出来（比如改变state）\n\n所以，redux的三大原则就可以理解了：\n\n* 单一数据源\n\t整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中\n* state是只读的\n\t唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象\n* 使用纯函数来执行修改\n\t也就是reducer函数应该是一个 (state, action) => state 的纯函数\n\n\n\n\n#### Store\n\n全局唯一的store用来管理应用状态。\n\n当需要拆分数据处理逻辑时，你应该使用 reducer 组合 而不是创建多个 store。\n\n```\n\timport { createStore } from 'redux';\n\n\tlet store = createStore(counter);\n\n\tstore.dispatch({ type: 'INCREMENT' });\n\n\tconsole.log(store.getState()) //就可以输出当前的应用的所有state情况\n\n\tconst unsubscribe = store.subscribe(() =>\n  \t\tconsole.log(store.getState())\n\t)\t//监听 每次state更新时，打印日志\n\n\tunsubscribe(); //注销监听器\n```\n\n在这里的state是只读的。这样确保了视图和网络请求都不能直接修改 state，相反它们只能表达想要修改的意图。\n\n而这些意图都会被抽象成一个action集中化处理。\n\n发布一个事件是唯一改变内部state的方法，而action则可用于序列化来呈现使用过程。\n\n为了描述 action 改变 state tree 的过程，需要编写reducers，也就是action的处理逻辑。\n\n\n#### Reducer\n\n来看reducer，它的形式为 (state, action) => state 的纯函数，也就是 state 变化的逻辑所在，描述了action怎么把旧状态改变为新状态，而reducer返回的形式必须要和state形式一致，这很好理解，reducer的任务就是得到新state\n\n```\n\tfunction counter(state = 0, action) {\n\t  \tswitch (action.type) {\n\t\t  \tcase 'INCREMENT':\n\t\t    \treturn state + 1;\n\t\t  \tcase 'DECREMENT':\n\t\t    \treturn state - 1;\n\t\t  \tdefault:\n\t\t    \treturn state;\n\t  \t}\n\t}\n```\n\n这是一个简单的reducer，传入一个旧的状态（初始值为0），然后根据行为action来进行不同的操作，然后返回新的状态。\n\n使用reducer时应该注意：\n\n* 不要修改传入参数\n* 不要执行有副作用得操作，比如API请求或路由跳转等\n* 不要调用非纯函数，比如 Date.now() 或 Math.random() 等等\n\nreducer一定要保持纯净\n\n\n#### action\n\naction描述的是一种事件，可能由用户操作产生，或者由服务器响应等等，它的意义就是描述数据的变化原因，也是store数据的唯一来源\n\n可以通过 atore.dispatch() 将action传到store中。\n\naction实际上就是一个JS普通对象，它的意义是我们赋予的，从而约定 action里面必须有一个字符串类型的type字段来表示将要执行的动作，例如\n\n```\n\t{\n  \t\ttype: ADD_TODO,\n  \t\ttext: 'Build my first Redux app'\n\t}\n```\n\n这个是action，它表示一个行为，而下面的函数是：action创建函数，它是生成action的方法，它只是简单得返回一个action。\n\n```\n\texport const addTodo = (text) => ({\n  \t\ttype: 'ADD_TODO',\n  \t\tid: nextTodoId++,\n  \t\ttext\n\t})\n```\n\n应该尽量减少在 action 中传递的数据\n\n\n#### 数据流\n\n严格的单向数据流是 Redux 架构的设计核心。\n\nRedux应用中数据得生命周期遵循以下4个步骤：\n\n1. 调用store.dispatch(action) ，可以在任何地方调用，触发一个事件\n2. Redux store调用传入的reducer函数，把 当前的state tree 和 action 作为参数传入，来处理这个action\n3. 根reducer应该把多个子reducer输出合并成一个单一的state tree\n4. Redux store保存了根reducer返回的完整 state tree\n\n\n掌握了这些基本知识，接下来分析下官方提供的最简单的todolist应用，来梳理Redux的设计思路和使用流程。","slug":"redux","published":1,"updated":"2018-03-25T14:00:19.468Z","comments":1,"photos":[],"link":"","_id":"cjkvxydy3001q5xfabiww2vh6","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。因为最近开始系统得学习React，而Redux常被用作React的数据管理器，所以一并学习。</p>\n<p>这篇博客（或者还有几篇）主要用来记录在学习过程中难以理解的点和值得记住的问题，随时补充，以备查阅。</p>\n<hr>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save redux</span><br><span class=\"line\"></span><br><span class=\"line\">npm install --save react-redux</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h4><p>Redux是一个单向数据流管理器，也就是说在整个项目的逻辑中，数据的流动是单向的，每个操作的后果都可预测，这就使得在大型项目开发中的数据管理变得简单（虽然对于很多小项目的结构会复杂很多，比如todolist，这也就是为什么有句话叫“如果你不确定需要Redux，那你就是不需要它”）</p>\n<p>每个Redux都一个唯一的store，用来管理所有呈现呈现出来的数据状态，包含 state和 reducers。</p>\n<p>而用户的每个行为只能通过触发action来影响store从而呈现出来（比如改变state）</p>\n<p>所以，redux的三大原则就可以理解了：</p>\n<ul>\n<li>单一数据源<br>  整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中</li>\n<li>state是只读的<br>  唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象</li>\n<li>使用纯函数来执行修改<br>  也就是reducer函数应该是一个 (state, action) =&gt; state 的纯函数</li>\n</ul>\n<h4 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h4><p>全局唯一的store用来管理应用状态。</p>\n<p>当需要拆分数据处理逻辑时，你应该使用 reducer 组合 而不是创建多个 store。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">let store = createStore(counter);</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(store.getState()) //就可以输出当前的应用的所有state情况</span><br><span class=\"line\"></span><br><span class=\"line\">const unsubscribe = store.subscribe(() =&gt;</span><br><span class=\"line\"> \t\tconsole.log(store.getState())</span><br><span class=\"line\">)\t//监听 每次state更新时，打印日志</span><br><span class=\"line\"></span><br><span class=\"line\">unsubscribe(); //注销监听器</span><br></pre></td></tr></table></figure>\n<p>在这里的state是只读的。这样确保了视图和网络请求都不能直接修改 state，相反它们只能表达想要修改的意图。</p>\n<p>而这些意图都会被抽象成一个action集中化处理。</p>\n<p>发布一个事件是唯一改变内部state的方法，而action则可用于序列化来呈现使用过程。</p>\n<p>为了描述 action 改变 state tree 的过程，需要编写reducers，也就是action的处理逻辑。</p>\n<h4 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h4><p>来看reducer，它的形式为 (state, action) =&gt; state 的纯函数，也就是 state 变化的逻辑所在，描述了action怎么把旧状态改变为新状态，而reducer返回的形式必须要和state形式一致，这很好理解，reducer的任务就是得到新state</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function counter(state = 0, action) &#123;</span><br><span class=\"line\">  \tswitch (action.type) &#123;</span><br><span class=\"line\">\t  \tcase &apos;INCREMENT&apos;:</span><br><span class=\"line\">\t    \treturn state + 1;</span><br><span class=\"line\">\t  \tcase &apos;DECREMENT&apos;:</span><br><span class=\"line\">\t    \treturn state - 1;</span><br><span class=\"line\">\t  \tdefault:</span><br><span class=\"line\">\t    \treturn state;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个简单的reducer，传入一个旧的状态（初始值为0），然后根据行为action来进行不同的操作，然后返回新的状态。</p>\n<p>使用reducer时应该注意：</p>\n<ul>\n<li>不要修改传入参数</li>\n<li>不要执行有副作用得操作，比如API请求或路由跳转等</li>\n<li>不要调用非纯函数，比如 Date.now() 或 Math.random() 等等</li>\n</ul>\n<p>reducer一定要保持纯净</p>\n<h4 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h4><p>action描述的是一种事件，可能由用户操作产生，或者由服务器响应等等，它的意义就是描述数据的变化原因，也是store数据的唯一来源</p>\n<p>可以通过 atore.dispatch() 将action传到store中。</p>\n<p>action实际上就是一个JS普通对象，它的意义是我们赋予的，从而约定 action里面必须有一个字符串类型的type字段来表示将要执行的动作，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> \t\ttype: ADD_TODO,</span><br><span class=\"line\"> \t\ttext: &apos;Build my first Redux app&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个是action，它表示一个行为，而下面的函数是：action创建函数，它是生成action的方法，它只是简单得返回一个action。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const addTodo = (text) =&gt; (&#123;</span><br><span class=\"line\"> \t\ttype: &apos;ADD_TODO&apos;,</span><br><span class=\"line\"> \t\tid: nextTodoId++,</span><br><span class=\"line\"> \t\ttext</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>应该尽量减少在 action 中传递的数据</p>\n<h4 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h4><p>严格的单向数据流是 Redux 架构的设计核心。</p>\n<p>Redux应用中数据得生命周期遵循以下4个步骤：</p>\n<ol>\n<li>调用store.dispatch(action) ，可以在任何地方调用，触发一个事件</li>\n<li>Redux store调用传入的reducer函数，把 当前的state tree 和 action 作为参数传入，来处理这个action</li>\n<li>根reducer应该把多个子reducer输出合并成一个单一的state tree</li>\n<li>Redux store保存了根reducer返回的完整 state tree</li>\n</ol>\n<p>掌握了这些基本知识，接下来分析下官方提供的最简单的todolist应用，来梳理Redux的设计思路和使用流程。</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。因为最近开始系统得学习React，而Redux常被用作React的数据管理器，所以一并学习。</p>\n<p>这篇博客（或者还有几篇）主要用来记录在学习过程中难以理解的点和值得记住的问题，随时补充，以备查阅。</p>\n<hr>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save redux</span><br><span class=\"line\"></span><br><span class=\"line\">npm install --save react-redux</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h4><p>Redux是一个单向数据流管理器，也就是说在整个项目的逻辑中，数据的流动是单向的，每个操作的后果都可预测，这就使得在大型项目开发中的数据管理变得简单（虽然对于很多小项目的结构会复杂很多，比如todolist，这也就是为什么有句话叫“如果你不确定需要Redux，那你就是不需要它”）</p>\n<p>每个Redux都一个唯一的store，用来管理所有呈现呈现出来的数据状态，包含 state和 reducers。</p>\n<p>而用户的每个行为只能通过触发action来影响store从而呈现出来（比如改变state）</p>\n<p>所以，redux的三大原则就可以理解了：</p>\n<ul>\n<li>单一数据源<br>  整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中</li>\n<li>state是只读的<br>  唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象</li>\n<li>使用纯函数来执行修改<br>  也就是reducer函数应该是一个 (state, action) =&gt; state 的纯函数</li>\n</ul>\n<h4 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h4><p>全局唯一的store用来管理应用状态。</p>\n<p>当需要拆分数据处理逻辑时，你应该使用 reducer 组合 而不是创建多个 store。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">let store = createStore(counter);</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(store.getState()) //就可以输出当前的应用的所有state情况</span><br><span class=\"line\"></span><br><span class=\"line\">const unsubscribe = store.subscribe(() =&gt;</span><br><span class=\"line\"> \t\tconsole.log(store.getState())</span><br><span class=\"line\">)\t//监听 每次state更新时，打印日志</span><br><span class=\"line\"></span><br><span class=\"line\">unsubscribe(); //注销监听器</span><br></pre></td></tr></table></figure>\n<p>在这里的state是只读的。这样确保了视图和网络请求都不能直接修改 state，相反它们只能表达想要修改的意图。</p>\n<p>而这些意图都会被抽象成一个action集中化处理。</p>\n<p>发布一个事件是唯一改变内部state的方法，而action则可用于序列化来呈现使用过程。</p>\n<p>为了描述 action 改变 state tree 的过程，需要编写reducers，也就是action的处理逻辑。</p>\n<h4 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h4><p>来看reducer，它的形式为 (state, action) =&gt; state 的纯函数，也就是 state 变化的逻辑所在，描述了action怎么把旧状态改变为新状态，而reducer返回的形式必须要和state形式一致，这很好理解，reducer的任务就是得到新state</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function counter(state = 0, action) &#123;</span><br><span class=\"line\">  \tswitch (action.type) &#123;</span><br><span class=\"line\">\t  \tcase &apos;INCREMENT&apos;:</span><br><span class=\"line\">\t    \treturn state + 1;</span><br><span class=\"line\">\t  \tcase &apos;DECREMENT&apos;:</span><br><span class=\"line\">\t    \treturn state - 1;</span><br><span class=\"line\">\t  \tdefault:</span><br><span class=\"line\">\t    \treturn state;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个简单的reducer，传入一个旧的状态（初始值为0），然后根据行为action来进行不同的操作，然后返回新的状态。</p>\n<p>使用reducer时应该注意：</p>\n<ul>\n<li>不要修改传入参数</li>\n<li>不要执行有副作用得操作，比如API请求或路由跳转等</li>\n<li>不要调用非纯函数，比如 Date.now() 或 Math.random() 等等</li>\n</ul>\n<p>reducer一定要保持纯净</p>\n<h4 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h4><p>action描述的是一种事件，可能由用户操作产生，或者由服务器响应等等，它的意义就是描述数据的变化原因，也是store数据的唯一来源</p>\n<p>可以通过 atore.dispatch() 将action传到store中。</p>\n<p>action实际上就是一个JS普通对象，它的意义是我们赋予的，从而约定 action里面必须有一个字符串类型的type字段来表示将要执行的动作，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> \t\ttype: ADD_TODO,</span><br><span class=\"line\"> \t\ttext: &apos;Build my first Redux app&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个是action，它表示一个行为，而下面的函数是：action创建函数，它是生成action的方法，它只是简单得返回一个action。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const addTodo = (text) =&gt; (&#123;</span><br><span class=\"line\"> \t\ttype: &apos;ADD_TODO&apos;,</span><br><span class=\"line\"> \t\tid: nextTodoId++,</span><br><span class=\"line\"> \t\ttext</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>应该尽量减少在 action 中传递的数据</p>\n<h4 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h4><p>严格的单向数据流是 Redux 架构的设计核心。</p>\n<p>Redux应用中数据得生命周期遵循以下4个步骤：</p>\n<ol>\n<li>调用store.dispatch(action) ，可以在任何地方调用，触发一个事件</li>\n<li>Redux store调用传入的reducer函数，把 当前的state tree 和 action 作为参数传入，来处理这个action</li>\n<li>根reducer应该把多个子reducer输出合并成一个单一的state tree</li>\n<li>Redux store保存了根reducer返回的完整 state tree</li>\n</ol>\n<p>掌握了这些基本知识，接下来分析下官方提供的最简单的todolist应用，来梳理Redux的设计思路和使用流程。</p>\n"},{"layout":"post","title":"使用Netlify部署静态网页","subtitle":"不需要服务器或虚拟主机，免费","date":"2018-02-09T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这两天看视频偶然发现的这个网站，很有意思，可以免费得部署静态文件，配置简单，并且支持绑定自己的域名，这里记录下来，分享给需要的同学。\n\n----------\n\n\n#### 网站注册\n-------------\n\n\n[Netlify](https://app.netlify.com)\n\n可以使用Github账号直接登录。\n\n-------------\n\n#### 一键部署\n\n首先，如果你使用的是React之类的框架，先build出静态文件包。\n\n登录Netlify之后首页会显示一个拖拽框，直接将包含静态文件的文件夹拖拽进去就可以了。\n\n稍等一下就部署成功了，这时候，会显示出网站自动生成的网址，类似 https://optimistic-northcutt-da4564.netlify.com 这样的，打开即可\n\n这样就算部署成功了，但是域名并不好记，下面开始调整域名。\n\n\n首页Overview下面可以看到你部署的项目的总览。\n\nSite settings -> General -> Site details -> Change site name\n\n输入需要自定的子域名即可，比如输入的是  test-app-name\n\n修改成功后访问 https://test-app-name.netlify.com 即可。\n\n\n那如果想绑定自己的域名呢？\n\n首先你要有个自己的域名，类似  mywebsitename.com\n\nSite settings -> Domain management -> Domains -> Add custom domain\n\n输入自己的域名就可以了，接下来进行域名解析\n\n解析采用CNAME方式，记录值填写你绑定的netlify项目地址，比如 test-app-name.netlify.com\n\n解析成功后通过 test-app-name.mywebsitename.com 就可以正常访问了\n\n\n是不是很简单！\n\n\n","source":"_posts/netlify.md","raw":"---\nlayout: post\ntitle: \"使用Netlify部署静态网页\"\nsubtitle: \"不需要服务器或虚拟主机，免费\"\ndate: 2018-2-10\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- Netlify\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这两天看视频偶然发现的这个网站，很有意思，可以免费得部署静态文件，配置简单，并且支持绑定自己的域名，这里记录下来，分享给需要的同学。\n\n----------\n\n\n#### 网站注册\n-------------\n\n\n[Netlify](https://app.netlify.com)\n\n可以使用Github账号直接登录。\n\n-------------\n\n#### 一键部署\n\n首先，如果你使用的是React之类的框架，先build出静态文件包。\n\n登录Netlify之后首页会显示一个拖拽框，直接将包含静态文件的文件夹拖拽进去就可以了。\n\n稍等一下就部署成功了，这时候，会显示出网站自动生成的网址，类似 https://optimistic-northcutt-da4564.netlify.com 这样的，打开即可\n\n这样就算部署成功了，但是域名并不好记，下面开始调整域名。\n\n\n首页Overview下面可以看到你部署的项目的总览。\n\nSite settings -> General -> Site details -> Change site name\n\n输入需要自定的子域名即可，比如输入的是  test-app-name\n\n修改成功后访问 https://test-app-name.netlify.com 即可。\n\n\n那如果想绑定自己的域名呢？\n\n首先你要有个自己的域名，类似  mywebsitename.com\n\nSite settings -> Domain management -> Domains -> Add custom domain\n\n输入自己的域名就可以了，接下来进行域名解析\n\n解析采用CNAME方式，记录值填写你绑定的netlify项目地址，比如 test-app-name.netlify.com\n\n解析成功后通过 test-app-name.mywebsitename.com 就可以正常访问了\n\n\n是不是很简单！\n\n\n","slug":"netlify","published":1,"updated":"2018-03-23T04:49:26.312Z","comments":1,"photos":[],"link":"","_id":"cjkvxydy4001s5xfa7ih08a4i","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这两天看视频偶然发现的这个网站，很有意思，可以免费得部署静态文件，配置简单，并且支持绑定自己的域名，这里记录下来，分享给需要的同学。</p>\n<hr>\n<h4 id=\"网站注册\"><a href=\"#网站注册\" class=\"headerlink\" title=\"网站注册\"></a>网站注册</h4><hr>\n<p><a href=\"https://app.netlify.com\" target=\"_blank\" rel=\"noopener\">Netlify</a></p>\n<p>可以使用Github账号直接登录。</p>\n<hr>\n<h4 id=\"一键部署\"><a href=\"#一键部署\" class=\"headerlink\" title=\"一键部署\"></a>一键部署</h4><p>首先，如果你使用的是React之类的框架，先build出静态文件包。</p>\n<p>登录Netlify之后首页会显示一个拖拽框，直接将包含静态文件的文件夹拖拽进去就可以了。</p>\n<p>稍等一下就部署成功了，这时候，会显示出网站自动生成的网址，类似 <a href=\"https://optimistic-northcutt-da4564.netlify.com\" target=\"_blank\" rel=\"noopener\">https://optimistic-northcutt-da4564.netlify.com</a> 这样的，打开即可</p>\n<p>这样就算部署成功了，但是域名并不好记，下面开始调整域名。</p>\n<p>首页Overview下面可以看到你部署的项目的总览。</p>\n<p>Site settings -&gt; General -&gt; Site details -&gt; Change site name</p>\n<p>输入需要自定的子域名即可，比如输入的是  test-app-name</p>\n<p>修改成功后访问 <a href=\"https://test-app-name.netlify.com\" target=\"_blank\" rel=\"noopener\">https://test-app-name.netlify.com</a> 即可。</p>\n<p>那如果想绑定自己的域名呢？</p>\n<p>首先你要有个自己的域名，类似  mywebsitename.com</p>\n<p>Site settings -&gt; Domain management -&gt; Domains -&gt; Add custom domain</p>\n<p>输入自己的域名就可以了，接下来进行域名解析</p>\n<p>解析采用CNAME方式，记录值填写你绑定的netlify项目地址，比如 test-app-name.netlify.com</p>\n<p>解析成功后通过 test-app-name.mywebsitename.com 就可以正常访问了</p>\n<p>是不是很简单！</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这两天看视频偶然发现的这个网站，很有意思，可以免费得部署静态文件，配置简单，并且支持绑定自己的域名，这里记录下来，分享给需要的同学。</p>\n<hr>\n<h4 id=\"网站注册\"><a href=\"#网站注册\" class=\"headerlink\" title=\"网站注册\"></a>网站注册</h4><hr>\n<p><a href=\"https://app.netlify.com\" target=\"_blank\" rel=\"noopener\">Netlify</a></p>\n<p>可以使用Github账号直接登录。</p>\n<hr>\n<h4 id=\"一键部署\"><a href=\"#一键部署\" class=\"headerlink\" title=\"一键部署\"></a>一键部署</h4><p>首先，如果你使用的是React之类的框架，先build出静态文件包。</p>\n<p>登录Netlify之后首页会显示一个拖拽框，直接将包含静态文件的文件夹拖拽进去就可以了。</p>\n<p>稍等一下就部署成功了，这时候，会显示出网站自动生成的网址，类似 <a href=\"https://optimistic-northcutt-da4564.netlify.com\" target=\"_blank\" rel=\"noopener\">https://optimistic-northcutt-da4564.netlify.com</a> 这样的，打开即可</p>\n<p>这样就算部署成功了，但是域名并不好记，下面开始调整域名。</p>\n<p>首页Overview下面可以看到你部署的项目的总览。</p>\n<p>Site settings -&gt; General -&gt; Site details -&gt; Change site name</p>\n<p>输入需要自定的子域名即可，比如输入的是  test-app-name</p>\n<p>修改成功后访问 <a href=\"https://test-app-name.netlify.com\" target=\"_blank\" rel=\"noopener\">https://test-app-name.netlify.com</a> 即可。</p>\n<p>那如果想绑定自己的域名呢？</p>\n<p>首先你要有个自己的域名，类似  mywebsitename.com</p>\n<p>Site settings -&gt; Domain management -&gt; Domains -&gt; Add custom domain</p>\n<p>输入自己的域名就可以了，接下来进行域名解析</p>\n<p>解析采用CNAME方式，记录值填写你绑定的netlify项目地址，比如 test-app-name.netlify.com</p>\n<p>解析成功后通过 test-app-name.mywebsitename.com 就可以正常访问了</p>\n<p>是不是很简单！</p>\n"},{"layout":"post","title":"Redux-todos代码分析","subtitle":"官网示例todos","date":"2018-02-20T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\nRedux官方示例代码中给了一些examples，我将逐一进行学习，并记录下来，加深对redux的理解。\n\n[官方地址](https://github.com/reactjs/redux/tree/master/examples/todos)\n\n----------\n\n\n#### 目录结构\n-------------\n\n```\n\t---public\n\t\t-index.html\n\t---src\n\t\t---actions\n\t\t\t-index.js\n\t\t---components\n\t\t\t-App.js\n\t\t\t-Footer.js\n\t\t\t-Link.js\n\t\t\t-Todo.js\n\t\t\t-TodoList.js\n\t\t---containers\n\t\t\t-AddTodo.js\n\t\t\t-FilterLink.js\n\t\t\t-VisibleTodoList.js\n\t\t---reducers\n\t\t\t-index.js\n\t\t\t-todos.js\n\t\t\t-visibilityFilter.js\n\t\t-index.js\n\n```\n\n\n#### 项目入口\n-------------\n\n/public/index.html\n\n作为静态文件模板，这个文件主要就是提供一个入口，将React代码生成的视图插入进去\n\n```\n\t<div id=\"root\"></div>\n```\n\n/src/index.js\n\n```\n\timport React from 'react'\n\timport { render } from 'react-dom'\n\timport { createStore } from 'redux'\n\timport { Provider } from 'react-redux'\n\timport App from './components/App'\n\timport rootReducer from './reducers'\n\n\tconst store = createStore(rootReducer)\n\n\trender(\n  \t\t<Provider store={store}>\n    \t\t<App />\n  \t\t</Provider>,\n  \t\tdocument.getElementById('root')\n\t)\n```\n\n这是个典型的React入口函数，将根组件 <App /> 插入到html模板的 id为root的插槽中。\n\n这里的createStore则是Redux内置的方法，用来创建一个全局唯一的store，并传入根reducer来做配置。\n\nProvider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了。\n\n这个项目的state为：\n\n```\n\t{\n\t\ttodos:[\n\t\t\tcompleted: true,\n\t\t\tid: 0,\n\t\t\ttext: 'Learn about actions'\n\t\t],\n\t\tvisibleTodoFilter: \"SHOW_ALL\"\n\t}\n```\n\n下面按顺序查看代码。\n\n\n#### reducers\n-------------\n\n/src/reducers/index.js\n\n```\n\timport { combineReducers } from 'redux'\n\timport todos from './todos'\n\timport visibilityFilter from './visibilityFilter'\n\n\texport default combineReducers({\n  \t\ttodos,\n  \t\tvisibilityFilter\n\t})\n```\n\ncombineReducers() 所做的只是生成一个函数，这个函数来调用你的一系列 reducer，每个 reducer 根据它们的 key 来筛选出 state 中的一部分数据并处理，然后这个生成的函数再将所有 reducer 的结果合并成一个大的对象。\n\n这个写法等同于下面的写法：\n\n```\n\texport default function todoApp(state = {}, action) {\n  \t\treturn {\n    \t\tvisibilityFilter: visibilityFilter(state.visibilityFilter, action),\n    \t\ttodos: todos(state.todos, action)\n  \t\t}\n\t}\n```\n\n但是第一种写法是如何识别key并绑定的呢？？？此处存疑。\n\n接着看导入的两个reducer\n\n```\n\tconst visibilityFilter = (state = 'SHOW_ALL', action) => {\n  \t\tswitch (action.type) { \n    \t\tcase 'SET_VISIBILITY_FILTER':\n      \t\t\treturn action.filter\n    \tdefault:\n      \t\treturn state\n  \t\t}\n\t}\n\n\texport default visibilityFilter\n```\n\n这个reducer的操作就是根据改变筛选条件来返回新的state\n\n```\n\tconst todos = (state = [], action) => {\n  \t\tswitch (action.type) {\n    \t\tcase 'ADD_TODO':\n     \t \t\treturn [\n        \t\t\t...state,\n\t\t\t        {\n\t\t\t          \tid: action.id,\n\t\t\t          \ttext: action.text,\n\t\t\t          \tcompleted: false\n\t\t\t        }\n      \t\t\t]\n    \t\tcase 'TOGGLE_TODO':\n      \t\t\treturn state.map(todo =>\n        \t\t\t(todo.id === action.id)\n          \t\t\t? {...todo, completed: !todo.completed}\n          \t\t\t: todo\n      \t\t\t)\n   \t\t \tdefault:\n      \t\t\treturn state\n  \t\t}\n\t}\n\n\texport default todos\n```\n\nADD_TODO动作中，采用数组合并，添加一个新的待操作项，创建一个新的state的todos数组并返回\n\n而TODDLE_TODO动作中，则是对当前state进行遍历，查到id相同项，取反completed属性并返回\n\n这两个reducer对应了todos这个应用的三个用户会触发的事件，都做了对应action的处理，接下来进行绑定action\n\n\n#### components\n\n这个文件夹对应的含义是不含逻辑的组件，只接受props传值然后负责渲染\n\n/components/App.js\n\n```\n\timport React from 'react'\n\timport Footer from './Footer'\n\timport AddTodo from '../containers/AddTodo'\n\timport VisibleTodoList from '../containers/VisibleTodoList'\n\n\tconst App = () => (\n  \t\t<div>\n    \t\t<AddTodo />\n    \t\t<VisibleTodoList />\n    \t\t<Footer />\n  \t\t</div>\n\t)\n\n\texport default App\n```\n\n这个就是根组件，下面以此来看这三个子组件\n\n/components/Footer.js\n\n```\n\timport React from 'react'\n\timport FilterLink from '../containers/FilterLink'\n\timport { VisibilityFilters } from '../actions'\n\n\tconst Footer = () => (\n  \t\t<div>\n\t\t    <span>Show: </span>\n\t\t    <FilterLink filter={VisibilityFilters.SHOW_ALL}>\n      \t\t\tAll\n\t\t    </FilterLink>\n\t\t    <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>\n      \t\t\tActive\n\t\t    </FilterLink>\n\t\t    <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>\n      \t\t\tCompleted\n    \t\t</FilterLink>\n  \t\t</div>\n\t)\n\n\texport default Footer\n```\n\n这里用了一个逻辑组件 <FilterLink />来包裹按钮，同时传入了属性filter，先来看下actions里的VisibilityFilters\n\n/actions/index.js\n\n```\n\tlet nextTodoId = 0\n\texport const addTodo = text => ({\n\t  \ttype: 'ADD_TODO',\n\t  \tid: nextTodoId++,\n\t  \ttext\n\t})\n\n\texport const setVisibilityFilter = filter => ({\n  \t\ttype: 'SET_VISIBILITY_FILTER',\n  \t\tfilter\n\t})\n\n\texport const toggleTodo = id => ({\n  \t\ttype: 'TOGGLE_TODO',\n  \t\tid\n\t})\n\n\texport const VisibilityFilters = {\n  \t\tSHOW_ALL: 'SHOW_ALL',\n  \t\tSHOW_COMPLETED: 'SHOW_COMPLETED',\n  \t\tSHOW_ACTIVE: 'SHOW_ACTIVE'\n\t}\n```\n\n我们知道actions存放的是动作的描述，那么VisibilityFilters的三个对应属性分别传入 <FilterLink />中，不出意外这个组件里就将绑定action SET_VISIBILITY_FILTER和对应的 reducer了。\n\n/containers/FilterLink.js\n\n```\n\timport { connect } from 'react-redux'\n\timport { setVisibilityFilter } from '../actions'\n\timport Link from '../components/Link'\n\n\tconst mapStateToProps = (state, ownProps) => ({\n  \t\tactive: ownProps.filter === state.visibilityFilter\n\t})\n\n\tconst mapDispatchToProps = (dispatch, ownProps) => ({\n  \t\tonClick: () => dispatch(setVisibilityFilter(ownProps.filter))\n\t})\n\n\texport default connect(\n  \t\tmapStateToProps,\n  \t\tmapDispatchToProps\n\t)(Link)\n```\n\n这里的FilterLink组件使用 connect方法生成的，用于从 UI 组件生成容器组件。connect的意思，就是将这两种组件连起来。\n\nLink就是UI组件，而生成的FilterLink就是容器组件，Link只负责单纯的数据渲染，所有的逻辑都将在FilterLink组件里完成。\n\n这里的绑定的逻辑就有两部分组成：\n\n一是输入逻辑，即mapStateToProps，可以理解为state转化为组件pros的逻辑，这里是将state的visibilityFilter属性赋值给props的filter属性，用来影响Link组件中button的可点击状态。\n\n而是输出逻辑，即mapDispatchToProps，可以理解为动作的发生逻辑，这里绑定了个点击事件，点击的逻辑是派发一个setVisibilityFilter动作，会由actions接收，参数就是当前组件的filter属性。\n\n/components/Link.js\n\n```\n\timport React from 'react'\n\timport PropTypes from 'prop-types'\n\n\tconst Link = ({ active, children, onClick }) => (\n    \t<button\n\t       onClick={onClick}\n\t       disabled={active}\n\t       style={{ marginLeft: '4px', }}\n\t    >\n      \t\t{children}\n    \t</button>\n\t)\n\n\tLink.propTypes = {\n\t  \tactive: PropTypes.bool.isRequired,\n\t  \tchildren: PropTypes.node.isRequired,\n\t  \tonClick: PropTypes.func.isRequired\n\t}\n\n\texport default Link\n```\n\n/containers/AddTodo.js\n\n```\n\timport React from 'react'\n\timport { connect } from 'react-redux'\n\timport { addTodo } from '../actions'\n\n\tconst AddTodo = ({ dispatch }) => {\n  \t\tlet input\n\n  \t\treturn (\n    \t\t<div>\n      \t\t\t<form onSubmit={e => {\n        \t\t\te.preventDefault()\n        \t\t\tif (!input.value.trim()) {\n          \t\t\t\treturn\n        \t\t\t}\n        \t\t\tdispatch(addTodo(input.value))\n        \t\t\tinput.value = ''\n      \t\t\t}}>\n        \t\t\t<input ref={node => input = node} />\n        \t\t\t<button type=\"submit\">\n          \t\t\t\tAdd Todo\n        \t\t\t</button>\n      \t\t\t</form>\n    \t\t</div>\n  \t\t)\n\t}\n\n\texport default connect()(AddTodo)\n```\n\n这个组件就很简单了，就是一个表单，点击提交时派发一个addTodo动作等待被actions接受就可以了，参数为添加的事项名称，id会在actions里面动态添加。\n\n/containers/VisibleTodoList.js\n\n```\n\timport { connect } from 'react-redux'\n\timport { toggleTodo } from '../actions'\n\timport TodoList from '../components/TodoList'\n\n\tconst getVisibleTodos = (todos, filter) => {\n  \t\tswitch (filter) {\n    \t\tcase 'SHOW_ALL':\n      \t\t\treturn todos\n    \t\tcase 'SHOW_COMPLETED':\n      \t\t\treturn todos.filter(t => t.completed)\n    \t\tcase 'SHOW_ACTIVE':\n      \t\t\treturn todos.filter(t => !t.completed)\n    \t\tdefault:\n      \t\t\tthrow new Error('Unknown filter: ' + filter)\n  \t\t}\n\t}\n\n\tconst mapStateToProps = state => ({\n\t  \ttodos: getVisibleTodos(state.todos, state.visibilityFilter)\n\t})\n\n\tconst mapDispatchToProps = dispatch => ({\n\t  \ttoggleTodo: id => dispatch(toggleTodo(id))\n\t})\n\n\texport default connect(\n\t  \tmapStateToProps,\n\t  \tmapDispatchToProps\n\t)(TodoList)\n```\n\n这个组件与Footer类似\n\n输入逻辑是根据filter的值来决定todos数组中那些项显示出来\n\n输出逻辑则是点击列表项时派发一个toggleTodo动作，参数是这个列表项的id\n\n/components/TodoList.js\n\n```\n\timport React from 'react'\n\timport PropTypes from 'prop-types'\n\timport Todo from './Todo'\n\n\tconst TodoList = ({ todos, toggleTodo }) => (\n  \t\t<ul>\n    \t\t{todos.map(todo =>\n      \t\t\t<Todo\n        \t\t\tkey={todo.id}\n        \t\t\t{...todo}\n        \t\t\tonClick={() => toggleTodo(todo.id)}\n      \t\t\t\t/>\n    \t\t)}\n  \t\t</ul>\n\t)\n\n\tTodoList.propTypes = {\n \t\ttodos: PropTypes.arrayOf(PropTypes.shape({\n    \t\tid: PropTypes.number.isRequired,\n    \t\tcompleted: PropTypes.bool.isRequired,\n    \t\ttext: PropTypes.string.isRequired\n  \t\t}).isRequired).isRequired,\n  \t\ttoggleTodo: PropTypes.func.isRequired\n\t}\n\n\texport default TodoList\n```\n\n/components/Todo.js\n\n```\n\timport React from 'react'\n\timport PropTypes from 'prop-types'\n\n\tconst Todo = ({ onClick, completed, text }) => (\n  \t\t<li\n   \t \t\tonClick={onClick}\n    \t\tstyle={{ textDecoration: completed ? 'line-through' : 'none' }}\n  \t\t\t>\n    \t\t{text}\n  \t\t</li>\n\t)\n\n\tTodo.propTypes = {\n  \t\tonClick: PropTypes.func.isRequired,\n  \t\tcompleted: PropTypes.bool.isRequired,\n  \t\ttext: PropTypes.string.isRequired\n\t}\n\n\texport default Todo\n```\n\n这两个组件就是单纯的UI组件，将todos的数据渲染出来，并为每个todo绑定一个点击事件，用来派发toggleTodo动作。\n\n\n\n#### 总结\n\n通过对整个项目的分析，可以明显得感觉到，Redux通过将actions抽离并合并，将各种情况下的动作集合在一起统一管理，并通过reducer为这些动作添加逻辑，达到修改store的目的，从而渲染新的UI，等待用户操作，这样就形成了一个数据的单向闭环流动，使得每一个动作都可预测。","source":"_posts/redux-todos.md","raw":"---\nlayout: post\ntitle: \"Redux-todos代码分析\"\nsubtitle: \"官网示例todos\"\ndate: 2018-2-21\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- Redux\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\nRedux官方示例代码中给了一些examples，我将逐一进行学习，并记录下来，加深对redux的理解。\n\n[官方地址](https://github.com/reactjs/redux/tree/master/examples/todos)\n\n----------\n\n\n#### 目录结构\n-------------\n\n```\n\t---public\n\t\t-index.html\n\t---src\n\t\t---actions\n\t\t\t-index.js\n\t\t---components\n\t\t\t-App.js\n\t\t\t-Footer.js\n\t\t\t-Link.js\n\t\t\t-Todo.js\n\t\t\t-TodoList.js\n\t\t---containers\n\t\t\t-AddTodo.js\n\t\t\t-FilterLink.js\n\t\t\t-VisibleTodoList.js\n\t\t---reducers\n\t\t\t-index.js\n\t\t\t-todos.js\n\t\t\t-visibilityFilter.js\n\t\t-index.js\n\n```\n\n\n#### 项目入口\n-------------\n\n/public/index.html\n\n作为静态文件模板，这个文件主要就是提供一个入口，将React代码生成的视图插入进去\n\n```\n\t<div id=\"root\"></div>\n```\n\n/src/index.js\n\n```\n\timport React from 'react'\n\timport { render } from 'react-dom'\n\timport { createStore } from 'redux'\n\timport { Provider } from 'react-redux'\n\timport App from './components/App'\n\timport rootReducer from './reducers'\n\n\tconst store = createStore(rootReducer)\n\n\trender(\n  \t\t<Provider store={store}>\n    \t\t<App />\n  \t\t</Provider>,\n  \t\tdocument.getElementById('root')\n\t)\n```\n\n这是个典型的React入口函数，将根组件 <App /> 插入到html模板的 id为root的插槽中。\n\n这里的createStore则是Redux内置的方法，用来创建一个全局唯一的store，并传入根reducer来做配置。\n\nProvider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了。\n\n这个项目的state为：\n\n```\n\t{\n\t\ttodos:[\n\t\t\tcompleted: true,\n\t\t\tid: 0,\n\t\t\ttext: 'Learn about actions'\n\t\t],\n\t\tvisibleTodoFilter: \"SHOW_ALL\"\n\t}\n```\n\n下面按顺序查看代码。\n\n\n#### reducers\n-------------\n\n/src/reducers/index.js\n\n```\n\timport { combineReducers } from 'redux'\n\timport todos from './todos'\n\timport visibilityFilter from './visibilityFilter'\n\n\texport default combineReducers({\n  \t\ttodos,\n  \t\tvisibilityFilter\n\t})\n```\n\ncombineReducers() 所做的只是生成一个函数，这个函数来调用你的一系列 reducer，每个 reducer 根据它们的 key 来筛选出 state 中的一部分数据并处理，然后这个生成的函数再将所有 reducer 的结果合并成一个大的对象。\n\n这个写法等同于下面的写法：\n\n```\n\texport default function todoApp(state = {}, action) {\n  \t\treturn {\n    \t\tvisibilityFilter: visibilityFilter(state.visibilityFilter, action),\n    \t\ttodos: todos(state.todos, action)\n  \t\t}\n\t}\n```\n\n但是第一种写法是如何识别key并绑定的呢？？？此处存疑。\n\n接着看导入的两个reducer\n\n```\n\tconst visibilityFilter = (state = 'SHOW_ALL', action) => {\n  \t\tswitch (action.type) { \n    \t\tcase 'SET_VISIBILITY_FILTER':\n      \t\t\treturn action.filter\n    \tdefault:\n      \t\treturn state\n  \t\t}\n\t}\n\n\texport default visibilityFilter\n```\n\n这个reducer的操作就是根据改变筛选条件来返回新的state\n\n```\n\tconst todos = (state = [], action) => {\n  \t\tswitch (action.type) {\n    \t\tcase 'ADD_TODO':\n     \t \t\treturn [\n        \t\t\t...state,\n\t\t\t        {\n\t\t\t          \tid: action.id,\n\t\t\t          \ttext: action.text,\n\t\t\t          \tcompleted: false\n\t\t\t        }\n      \t\t\t]\n    \t\tcase 'TOGGLE_TODO':\n      \t\t\treturn state.map(todo =>\n        \t\t\t(todo.id === action.id)\n          \t\t\t? {...todo, completed: !todo.completed}\n          \t\t\t: todo\n      \t\t\t)\n   \t\t \tdefault:\n      \t\t\treturn state\n  \t\t}\n\t}\n\n\texport default todos\n```\n\nADD_TODO动作中，采用数组合并，添加一个新的待操作项，创建一个新的state的todos数组并返回\n\n而TODDLE_TODO动作中，则是对当前state进行遍历，查到id相同项，取反completed属性并返回\n\n这两个reducer对应了todos这个应用的三个用户会触发的事件，都做了对应action的处理，接下来进行绑定action\n\n\n#### components\n\n这个文件夹对应的含义是不含逻辑的组件，只接受props传值然后负责渲染\n\n/components/App.js\n\n```\n\timport React from 'react'\n\timport Footer from './Footer'\n\timport AddTodo from '../containers/AddTodo'\n\timport VisibleTodoList from '../containers/VisibleTodoList'\n\n\tconst App = () => (\n  \t\t<div>\n    \t\t<AddTodo />\n    \t\t<VisibleTodoList />\n    \t\t<Footer />\n  \t\t</div>\n\t)\n\n\texport default App\n```\n\n这个就是根组件，下面以此来看这三个子组件\n\n/components/Footer.js\n\n```\n\timport React from 'react'\n\timport FilterLink from '../containers/FilterLink'\n\timport { VisibilityFilters } from '../actions'\n\n\tconst Footer = () => (\n  \t\t<div>\n\t\t    <span>Show: </span>\n\t\t    <FilterLink filter={VisibilityFilters.SHOW_ALL}>\n      \t\t\tAll\n\t\t    </FilterLink>\n\t\t    <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>\n      \t\t\tActive\n\t\t    </FilterLink>\n\t\t    <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>\n      \t\t\tCompleted\n    \t\t</FilterLink>\n  \t\t</div>\n\t)\n\n\texport default Footer\n```\n\n这里用了一个逻辑组件 <FilterLink />来包裹按钮，同时传入了属性filter，先来看下actions里的VisibilityFilters\n\n/actions/index.js\n\n```\n\tlet nextTodoId = 0\n\texport const addTodo = text => ({\n\t  \ttype: 'ADD_TODO',\n\t  \tid: nextTodoId++,\n\t  \ttext\n\t})\n\n\texport const setVisibilityFilter = filter => ({\n  \t\ttype: 'SET_VISIBILITY_FILTER',\n  \t\tfilter\n\t})\n\n\texport const toggleTodo = id => ({\n  \t\ttype: 'TOGGLE_TODO',\n  \t\tid\n\t})\n\n\texport const VisibilityFilters = {\n  \t\tSHOW_ALL: 'SHOW_ALL',\n  \t\tSHOW_COMPLETED: 'SHOW_COMPLETED',\n  \t\tSHOW_ACTIVE: 'SHOW_ACTIVE'\n\t}\n```\n\n我们知道actions存放的是动作的描述，那么VisibilityFilters的三个对应属性分别传入 <FilterLink />中，不出意外这个组件里就将绑定action SET_VISIBILITY_FILTER和对应的 reducer了。\n\n/containers/FilterLink.js\n\n```\n\timport { connect } from 'react-redux'\n\timport { setVisibilityFilter } from '../actions'\n\timport Link from '../components/Link'\n\n\tconst mapStateToProps = (state, ownProps) => ({\n  \t\tactive: ownProps.filter === state.visibilityFilter\n\t})\n\n\tconst mapDispatchToProps = (dispatch, ownProps) => ({\n  \t\tonClick: () => dispatch(setVisibilityFilter(ownProps.filter))\n\t})\n\n\texport default connect(\n  \t\tmapStateToProps,\n  \t\tmapDispatchToProps\n\t)(Link)\n```\n\n这里的FilterLink组件使用 connect方法生成的，用于从 UI 组件生成容器组件。connect的意思，就是将这两种组件连起来。\n\nLink就是UI组件，而生成的FilterLink就是容器组件，Link只负责单纯的数据渲染，所有的逻辑都将在FilterLink组件里完成。\n\n这里的绑定的逻辑就有两部分组成：\n\n一是输入逻辑，即mapStateToProps，可以理解为state转化为组件pros的逻辑，这里是将state的visibilityFilter属性赋值给props的filter属性，用来影响Link组件中button的可点击状态。\n\n而是输出逻辑，即mapDispatchToProps，可以理解为动作的发生逻辑，这里绑定了个点击事件，点击的逻辑是派发一个setVisibilityFilter动作，会由actions接收，参数就是当前组件的filter属性。\n\n/components/Link.js\n\n```\n\timport React from 'react'\n\timport PropTypes from 'prop-types'\n\n\tconst Link = ({ active, children, onClick }) => (\n    \t<button\n\t       onClick={onClick}\n\t       disabled={active}\n\t       style={{ marginLeft: '4px', }}\n\t    >\n      \t\t{children}\n    \t</button>\n\t)\n\n\tLink.propTypes = {\n\t  \tactive: PropTypes.bool.isRequired,\n\t  \tchildren: PropTypes.node.isRequired,\n\t  \tonClick: PropTypes.func.isRequired\n\t}\n\n\texport default Link\n```\n\n/containers/AddTodo.js\n\n```\n\timport React from 'react'\n\timport { connect } from 'react-redux'\n\timport { addTodo } from '../actions'\n\n\tconst AddTodo = ({ dispatch }) => {\n  \t\tlet input\n\n  \t\treturn (\n    \t\t<div>\n      \t\t\t<form onSubmit={e => {\n        \t\t\te.preventDefault()\n        \t\t\tif (!input.value.trim()) {\n          \t\t\t\treturn\n        \t\t\t}\n        \t\t\tdispatch(addTodo(input.value))\n        \t\t\tinput.value = ''\n      \t\t\t}}>\n        \t\t\t<input ref={node => input = node} />\n        \t\t\t<button type=\"submit\">\n          \t\t\t\tAdd Todo\n        \t\t\t</button>\n      \t\t\t</form>\n    \t\t</div>\n  \t\t)\n\t}\n\n\texport default connect()(AddTodo)\n```\n\n这个组件就很简单了，就是一个表单，点击提交时派发一个addTodo动作等待被actions接受就可以了，参数为添加的事项名称，id会在actions里面动态添加。\n\n/containers/VisibleTodoList.js\n\n```\n\timport { connect } from 'react-redux'\n\timport { toggleTodo } from '../actions'\n\timport TodoList from '../components/TodoList'\n\n\tconst getVisibleTodos = (todos, filter) => {\n  \t\tswitch (filter) {\n    \t\tcase 'SHOW_ALL':\n      \t\t\treturn todos\n    \t\tcase 'SHOW_COMPLETED':\n      \t\t\treturn todos.filter(t => t.completed)\n    \t\tcase 'SHOW_ACTIVE':\n      \t\t\treturn todos.filter(t => !t.completed)\n    \t\tdefault:\n      \t\t\tthrow new Error('Unknown filter: ' + filter)\n  \t\t}\n\t}\n\n\tconst mapStateToProps = state => ({\n\t  \ttodos: getVisibleTodos(state.todos, state.visibilityFilter)\n\t})\n\n\tconst mapDispatchToProps = dispatch => ({\n\t  \ttoggleTodo: id => dispatch(toggleTodo(id))\n\t})\n\n\texport default connect(\n\t  \tmapStateToProps,\n\t  \tmapDispatchToProps\n\t)(TodoList)\n```\n\n这个组件与Footer类似\n\n输入逻辑是根据filter的值来决定todos数组中那些项显示出来\n\n输出逻辑则是点击列表项时派发一个toggleTodo动作，参数是这个列表项的id\n\n/components/TodoList.js\n\n```\n\timport React from 'react'\n\timport PropTypes from 'prop-types'\n\timport Todo from './Todo'\n\n\tconst TodoList = ({ todos, toggleTodo }) => (\n  \t\t<ul>\n    \t\t{todos.map(todo =>\n      \t\t\t<Todo\n        \t\t\tkey={todo.id}\n        \t\t\t{...todo}\n        \t\t\tonClick={() => toggleTodo(todo.id)}\n      \t\t\t\t/>\n    \t\t)}\n  \t\t</ul>\n\t)\n\n\tTodoList.propTypes = {\n \t\ttodos: PropTypes.arrayOf(PropTypes.shape({\n    \t\tid: PropTypes.number.isRequired,\n    \t\tcompleted: PropTypes.bool.isRequired,\n    \t\ttext: PropTypes.string.isRequired\n  \t\t}).isRequired).isRequired,\n  \t\ttoggleTodo: PropTypes.func.isRequired\n\t}\n\n\texport default TodoList\n```\n\n/components/Todo.js\n\n```\n\timport React from 'react'\n\timport PropTypes from 'prop-types'\n\n\tconst Todo = ({ onClick, completed, text }) => (\n  \t\t<li\n   \t \t\tonClick={onClick}\n    \t\tstyle={{ textDecoration: completed ? 'line-through' : 'none' }}\n  \t\t\t>\n    \t\t{text}\n  \t\t</li>\n\t)\n\n\tTodo.propTypes = {\n  \t\tonClick: PropTypes.func.isRequired,\n  \t\tcompleted: PropTypes.bool.isRequired,\n  \t\ttext: PropTypes.string.isRequired\n\t}\n\n\texport default Todo\n```\n\n这两个组件就是单纯的UI组件，将todos的数据渲染出来，并为每个todo绑定一个点击事件，用来派发toggleTodo动作。\n\n\n\n#### 总结\n\n通过对整个项目的分析，可以明显得感觉到，Redux通过将actions抽离并合并，将各种情况下的动作集合在一起统一管理，并通过reducer为这些动作添加逻辑，达到修改store的目的，从而渲染新的UI，等待用户操作，这样就形成了一个数据的单向闭环流动，使得每一个动作都可预测。","slug":"redux-todos","published":1,"updated":"2018-03-25T14:00:19.468Z","comments":1,"photos":[],"link":"","_id":"cjkvxydy5001t5xfa6cor0hq7","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>Redux官方示例代码中给了一些examples，我将逐一进行学习，并记录下来，加深对redux的理解。</p>\n<p><a href=\"https://github.com/reactjs/redux/tree/master/examples/todos\" target=\"_blank\" rel=\"noopener\">官方地址</a></p>\n<hr>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---public</span><br><span class=\"line\">\t-index.html</span><br><span class=\"line\">---src</span><br><span class=\"line\">\t---actions</span><br><span class=\"line\">\t\t-index.js</span><br><span class=\"line\">\t---components</span><br><span class=\"line\">\t\t-App.js</span><br><span class=\"line\">\t\t-Footer.js</span><br><span class=\"line\">\t\t-Link.js</span><br><span class=\"line\">\t\t-Todo.js</span><br><span class=\"line\">\t\t-TodoList.js</span><br><span class=\"line\">\t---containers</span><br><span class=\"line\">\t\t-AddTodo.js</span><br><span class=\"line\">\t\t-FilterLink.js</span><br><span class=\"line\">\t\t-VisibleTodoList.js</span><br><span class=\"line\">\t---reducers</span><br><span class=\"line\">\t\t-index.js</span><br><span class=\"line\">\t\t-todos.js</span><br><span class=\"line\">\t\t-visibilityFilter.js</span><br><span class=\"line\">\t-index.js</span><br></pre></td></tr></table></figure>\n<h4 id=\"项目入口\"><a href=\"#项目入口\" class=\"headerlink\" title=\"项目入口\"></a>项目入口</h4><hr>\n<p>/public/index.html</p>\n<p>作为静态文件模板，这个文件主要就是提供一个入口，将React代码生成的视图插入进去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>/src/index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &#123; render &#125; from &apos;react-dom&apos;</span><br><span class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;</span><br><span class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import App from &apos;./components/App&apos;</span><br><span class=\"line\">import rootReducer from &apos;./reducers&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = createStore(rootReducer)</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\"> \t\t&lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">   \t\t&lt;App /&gt;</span><br><span class=\"line\"> \t\t&lt;/Provider&gt;,</span><br><span class=\"line\"> \t\tdocument.getElementById(&apos;root&apos;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>这是个典型的React入口函数，将根组件 <app> 插入到html模板的 id为root的插槽中。</app></p>\n<p>这里的createStore则是Redux内置的方法，用来创建一个全局唯一的store，并传入根reducer来做配置。</p>\n<p>Provider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了。</p>\n<p>这个项目的state为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\ttodos:[</span><br><span class=\"line\">\t\tcompleted: true,</span><br><span class=\"line\">\t\tid: 0,</span><br><span class=\"line\">\t\ttext: &apos;Learn about actions&apos;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\tvisibleTodoFilter: &quot;SHOW_ALL&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面按顺序查看代码。</p>\n<h4 id=\"reducers\"><a href=\"#reducers\" class=\"headerlink\" title=\"reducers\"></a>reducers</h4><hr>\n<p>/src/reducers/index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; combineReducers &#125; from &apos;redux&apos;</span><br><span class=\"line\">import todos from &apos;./todos&apos;</span><br><span class=\"line\">import visibilityFilter from &apos;./visibilityFilter&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default combineReducers(&#123;</span><br><span class=\"line\"> \t\ttodos,</span><br><span class=\"line\"> \t\tvisibilityFilter</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>combineReducers() 所做的只是生成一个函数，这个函数来调用你的一系列 reducer，每个 reducer 根据它们的 key 来筛选出 state 中的一部分数据并处理，然后这个生成的函数再将所有 reducer 的结果合并成一个大的对象。</p>\n<p>这个写法等同于下面的写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function todoApp(state = &#123;&#125;, action) &#123;</span><br><span class=\"line\"> \t\treturn &#123;</span><br><span class=\"line\">   \t\tvisibilityFilter: visibilityFilter(state.visibilityFilter, action),</span><br><span class=\"line\">   \t\ttodos: todos(state.todos, action)</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是第一种写法是如何识别key并绑定的呢？？？此处存疑。</p>\n<p>接着看导入的两个reducer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const visibilityFilter = (state = &apos;SHOW_ALL&apos;, action) =&gt; &#123;</span><br><span class=\"line\"> \t\tswitch (action.type) &#123; </span><br><span class=\"line\">   \t\tcase &apos;SET_VISIBILITY_FILTER&apos;:</span><br><span class=\"line\">     \t\t\treturn action.filter</span><br><span class=\"line\">   \tdefault:</span><br><span class=\"line\">     \t\treturn state</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default visibilityFilter</span><br></pre></td></tr></table></figure>\n<p>这个reducer的操作就是根据改变筛选条件来返回新的state</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const todos = (state = [], action) =&gt; &#123;</span><br><span class=\"line\"> \t\tswitch (action.type) &#123;</span><br><span class=\"line\">   \t\tcase &apos;ADD_TODO&apos;:</span><br><span class=\"line\">    \t \t\treturn [</span><br><span class=\"line\">       \t\t\t...state,</span><br><span class=\"line\">\t\t        &#123;</span><br><span class=\"line\">\t\t          \tid: action.id,</span><br><span class=\"line\">\t\t          \ttext: action.text,</span><br><span class=\"line\">\t\t          \tcompleted: false</span><br><span class=\"line\">\t\t        &#125;</span><br><span class=\"line\">     \t\t\t]</span><br><span class=\"line\">   \t\tcase &apos;TOGGLE_TODO&apos;:</span><br><span class=\"line\">     \t\t\treturn state.map(todo =&gt;</span><br><span class=\"line\">       \t\t\t(todo.id === action.id)</span><br><span class=\"line\">         \t\t\t? &#123;...todo, completed: !todo.completed&#125;</span><br><span class=\"line\">         \t\t\t: todo</span><br><span class=\"line\">     \t\t\t)</span><br><span class=\"line\">  \t\t \tdefault:</span><br><span class=\"line\">     \t\t\treturn state</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default todos</span><br></pre></td></tr></table></figure>\n<p>ADD_TODO动作中，采用数组合并，添加一个新的待操作项，创建一个新的state的todos数组并返回</p>\n<p>而TODDLE_TODO动作中，则是对当前state进行遍历，查到id相同项，取反completed属性并返回</p>\n<p>这两个reducer对应了todos这个应用的三个用户会触发的事件，都做了对应action的处理，接下来进行绑定action</p>\n<h4 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h4><p>这个文件夹对应的含义是不含逻辑的组件，只接受props传值然后负责渲染</p>\n<p>/components/App.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import Footer from &apos;./Footer&apos;</span><br><span class=\"line\">import AddTodo from &apos;../containers/AddTodo&apos;</span><br><span class=\"line\">import VisibleTodoList from &apos;../containers/VisibleTodoList&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const App = () =&gt; (</span><br><span class=\"line\"> \t\t&lt;div&gt;</span><br><span class=\"line\">   \t\t&lt;AddTodo /&gt;</span><br><span class=\"line\">   \t\t&lt;VisibleTodoList /&gt;</span><br><span class=\"line\">   \t\t&lt;Footer /&gt;</span><br><span class=\"line\"> \t\t&lt;/div&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">export default App</span><br></pre></td></tr></table></figure>\n<p>这个就是根组件，下面以此来看这三个子组件</p>\n<p>/components/Footer.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import FilterLink from &apos;../containers/FilterLink&apos;</span><br><span class=\"line\">import &#123; VisibilityFilters &#125; from &apos;../actions&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const Footer = () =&gt; (</span><br><span class=\"line\"> \t\t&lt;div&gt;</span><br><span class=\"line\">\t    &lt;span&gt;Show: &lt;/span&gt;</span><br><span class=\"line\">\t    &lt;FilterLink filter=&#123;VisibilityFilters.SHOW_ALL&#125;&gt;</span><br><span class=\"line\">     \t\t\tAll</span><br><span class=\"line\">\t    &lt;/FilterLink&gt;</span><br><span class=\"line\">\t    &lt;FilterLink filter=&#123;VisibilityFilters.SHOW_ACTIVE&#125;&gt;</span><br><span class=\"line\">     \t\t\tActive</span><br><span class=\"line\">\t    &lt;/FilterLink&gt;</span><br><span class=\"line\">\t    &lt;FilterLink filter=&#123;VisibilityFilters.SHOW_COMPLETED&#125;&gt;</span><br><span class=\"line\">     \t\t\tCompleted</span><br><span class=\"line\">   \t\t&lt;/FilterLink&gt;</span><br><span class=\"line\"> \t\t&lt;/div&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">export default Footer</span><br></pre></td></tr></table></figure>\n<p>这里用了一个逻辑组件 <filterlink>来包裹按钮，同时传入了属性filter，先来看下actions里的VisibilityFilters</filterlink></p>\n<p>/actions/index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nextTodoId = 0</span><br><span class=\"line\">export const addTodo = text =&gt; (&#123;</span><br><span class=\"line\">  \ttype: &apos;ADD_TODO&apos;,</span><br><span class=\"line\">  \tid: nextTodoId++,</span><br><span class=\"line\">  \ttext</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export const setVisibilityFilter = filter =&gt; (&#123;</span><br><span class=\"line\"> \t\ttype: &apos;SET_VISIBILITY_FILTER&apos;,</span><br><span class=\"line\"> \t\tfilter</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export const toggleTodo = id =&gt; (&#123;</span><br><span class=\"line\"> \t\ttype: &apos;TOGGLE_TODO&apos;,</span><br><span class=\"line\"> \t\tid</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export const VisibilityFilters = &#123;</span><br><span class=\"line\"> \t\tSHOW_ALL: &apos;SHOW_ALL&apos;,</span><br><span class=\"line\"> \t\tSHOW_COMPLETED: &apos;SHOW_COMPLETED&apos;,</span><br><span class=\"line\"> \t\tSHOW_ACTIVE: &apos;SHOW_ACTIVE&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们知道actions存放的是动作的描述，那么VisibilityFilters的三个对应属性分别传入 <filterlink>中，不出意外这个组件里就将绑定action SET_VISIBILITY_FILTER和对应的 reducer了。</filterlink></p>\n<p>/containers/FilterLink.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import &#123; setVisibilityFilter &#125; from &apos;../actions&apos;</span><br><span class=\"line\">import Link from &apos;../components/Link&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const mapStateToProps = (state, ownProps) =&gt; (&#123;</span><br><span class=\"line\"> \t\tactive: ownProps.filter === state.visibilityFilter</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const mapDispatchToProps = (dispatch, ownProps) =&gt; (&#123;</span><br><span class=\"line\"> \t\tonClick: () =&gt; dispatch(setVisibilityFilter(ownProps.filter))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default connect(</span><br><span class=\"line\"> \t\tmapStateToProps,</span><br><span class=\"line\"> \t\tmapDispatchToProps</span><br><span class=\"line\">)(Link)</span><br></pre></td></tr></table></figure>\n<p>这里的FilterLink组件使用 connect方法生成的，用于从 UI 组件生成容器组件。connect的意思，就是将这两种组件连起来。</p>\n<p>Link就是UI组件，而生成的FilterLink就是容器组件，Link只负责单纯的数据渲染，所有的逻辑都将在FilterLink组件里完成。</p>\n<p>这里的绑定的逻辑就有两部分组成：</p>\n<p>一是输入逻辑，即mapStateToProps，可以理解为state转化为组件pros的逻辑，这里是将state的visibilityFilter属性赋值给props的filter属性，用来影响Link组件中button的可点击状态。</p>\n<p>而是输出逻辑，即mapDispatchToProps，可以理解为动作的发生逻辑，这里绑定了个点击事件，点击的逻辑是派发一个setVisibilityFilter动作，会由actions接收，参数就是当前组件的filter属性。</p>\n<p>/components/Link.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import PropTypes from &apos;prop-types&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const Link = (&#123; active, children, onClick &#125;) =&gt; (</span><br><span class=\"line\">   \t&lt;button</span><br><span class=\"line\">       onClick=&#123;onClick&#125;</span><br><span class=\"line\">       disabled=&#123;active&#125;</span><br><span class=\"line\">       style=&#123;&#123; marginLeft: &apos;4px&apos;, &#125;&#125;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">     \t\t&#123;children&#125;</span><br><span class=\"line\">   \t&lt;/button&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">Link.propTypes = &#123;</span><br><span class=\"line\">  \tactive: PropTypes.bool.isRequired,</span><br><span class=\"line\">  \tchildren: PropTypes.node.isRequired,</span><br><span class=\"line\">  \tonClick: PropTypes.func.isRequired</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Link</span><br></pre></td></tr></table></figure>\n<p>/containers/AddTodo.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import &#123; addTodo &#125; from &apos;../actions&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const AddTodo = (&#123; dispatch &#125;) =&gt; &#123;</span><br><span class=\"line\"> \t\tlet input</span><br><span class=\"line\"></span><br><span class=\"line\"> \t\treturn (</span><br><span class=\"line\">   \t\t&lt;div&gt;</span><br><span class=\"line\">     \t\t\t&lt;form onSubmit=&#123;e =&gt; &#123;</span><br><span class=\"line\">       \t\t\te.preventDefault()</span><br><span class=\"line\">       \t\t\tif (!input.value.trim()) &#123;</span><br><span class=\"line\">         \t\t\t\treturn</span><br><span class=\"line\">       \t\t\t&#125;</span><br><span class=\"line\">       \t\t\tdispatch(addTodo(input.value))</span><br><span class=\"line\">       \t\t\tinput.value = &apos;&apos;</span><br><span class=\"line\">     \t\t\t&#125;&#125;&gt;</span><br><span class=\"line\">       \t\t\t&lt;input ref=&#123;node =&gt; input = node&#125; /&gt;</span><br><span class=\"line\">       \t\t\t&lt;button type=&quot;submit&quot;&gt;</span><br><span class=\"line\">         \t\t\t\tAdd Todo</span><br><span class=\"line\">       \t\t\t&lt;/button&gt;</span><br><span class=\"line\">     \t\t\t&lt;/form&gt;</span><br><span class=\"line\">   \t\t&lt;/div&gt;</span><br><span class=\"line\"> \t\t)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default connect()(AddTodo)</span><br></pre></td></tr></table></figure>\n<p>这个组件就很简单了，就是一个表单，点击提交时派发一个addTodo动作等待被actions接受就可以了，参数为添加的事项名称，id会在actions里面动态添加。</p>\n<p>/containers/VisibleTodoList.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import &#123; toggleTodo &#125; from &apos;../actions&apos;</span><br><span class=\"line\">import TodoList from &apos;../components/TodoList&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const getVisibleTodos = (todos, filter) =&gt; &#123;</span><br><span class=\"line\"> \t\tswitch (filter) &#123;</span><br><span class=\"line\">   \t\tcase &apos;SHOW_ALL&apos;:</span><br><span class=\"line\">     \t\t\treturn todos</span><br><span class=\"line\">   \t\tcase &apos;SHOW_COMPLETED&apos;:</span><br><span class=\"line\">     \t\t\treturn todos.filter(t =&gt; t.completed)</span><br><span class=\"line\">   \t\tcase &apos;SHOW_ACTIVE&apos;:</span><br><span class=\"line\">     \t\t\treturn todos.filter(t =&gt; !t.completed)</span><br><span class=\"line\">   \t\tdefault:</span><br><span class=\"line\">     \t\t\tthrow new Error(&apos;Unknown filter: &apos; + filter)</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const mapStateToProps = state =&gt; (&#123;</span><br><span class=\"line\">  \ttodos: getVisibleTodos(state.todos, state.visibilityFilter)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const mapDispatchToProps = dispatch =&gt; (&#123;</span><br><span class=\"line\">  \ttoggleTodo: id =&gt; dispatch(toggleTodo(id))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default connect(</span><br><span class=\"line\">  \tmapStateToProps,</span><br><span class=\"line\">  \tmapDispatchToProps</span><br><span class=\"line\">)(TodoList)</span><br></pre></td></tr></table></figure>\n<p>这个组件与Footer类似</p>\n<p>输入逻辑是根据filter的值来决定todos数组中那些项显示出来</p>\n<p>输出逻辑则是点击列表项时派发一个toggleTodo动作，参数是这个列表项的id</p>\n<p>/components/TodoList.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import PropTypes from &apos;prop-types&apos;</span><br><span class=\"line\">import Todo from &apos;./Todo&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const TodoList = (&#123; todos, toggleTodo &#125;) =&gt; (</span><br><span class=\"line\"> \t\t&lt;ul&gt;</span><br><span class=\"line\">   \t\t&#123;todos.map(todo =&gt;</span><br><span class=\"line\">     \t\t\t&lt;Todo</span><br><span class=\"line\">       \t\t\tkey=&#123;todo.id&#125;</span><br><span class=\"line\">       \t\t\t&#123;...todo&#125;</span><br><span class=\"line\">       \t\t\tonClick=&#123;() =&gt; toggleTodo(todo.id)&#125;</span><br><span class=\"line\">     \t\t\t\t/&gt;</span><br><span class=\"line\">   \t\t)&#125;</span><br><span class=\"line\"> \t\t&lt;/ul&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">TodoList.propTypes = &#123;</span><br><span class=\"line\">\t\ttodos: PropTypes.arrayOf(PropTypes.shape(&#123;</span><br><span class=\"line\">   \t\tid: PropTypes.number.isRequired,</span><br><span class=\"line\">   \t\tcompleted: PropTypes.bool.isRequired,</span><br><span class=\"line\">   \t\ttext: PropTypes.string.isRequired</span><br><span class=\"line\"> \t\t&#125;).isRequired).isRequired,</span><br><span class=\"line\"> \t\ttoggleTodo: PropTypes.func.isRequired</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default TodoList</span><br></pre></td></tr></table></figure>\n<p>/components/Todo.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import PropTypes from &apos;prop-types&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const Todo = (&#123; onClick, completed, text &#125;) =&gt; (</span><br><span class=\"line\"> \t\t&lt;li</span><br><span class=\"line\">  \t \t\tonClick=&#123;onClick&#125;</span><br><span class=\"line\">   \t\tstyle=&#123;&#123; textDecoration: completed ? &apos;line-through&apos; : &apos;none&apos; &#125;&#125;</span><br><span class=\"line\"> \t\t\t&gt;</span><br><span class=\"line\">   \t\t&#123;text&#125;</span><br><span class=\"line\"> \t\t&lt;/li&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">Todo.propTypes = &#123;</span><br><span class=\"line\"> \t\tonClick: PropTypes.func.isRequired,</span><br><span class=\"line\"> \t\tcompleted: PropTypes.bool.isRequired,</span><br><span class=\"line\"> \t\ttext: PropTypes.string.isRequired</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Todo</span><br></pre></td></tr></table></figure>\n<p>这两个组件就是单纯的UI组件，将todos的数据渲染出来，并为每个todo绑定一个点击事件，用来派发toggleTodo动作。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>通过对整个项目的分析，可以明显得感觉到，Redux通过将actions抽离并合并，将各种情况下的动作集合在一起统一管理，并通过reducer为这些动作添加逻辑，达到修改store的目的，从而渲染新的UI，等待用户操作，这样就形成了一个数据的单向闭环流动，使得每一个动作都可预测。</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>Redux官方示例代码中给了一些examples，我将逐一进行学习，并记录下来，加深对redux的理解。</p>\n<p><a href=\"https://github.com/reactjs/redux/tree/master/examples/todos\" target=\"_blank\" rel=\"noopener\">官方地址</a></p>\n<hr>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---public</span><br><span class=\"line\">\t-index.html</span><br><span class=\"line\">---src</span><br><span class=\"line\">\t---actions</span><br><span class=\"line\">\t\t-index.js</span><br><span class=\"line\">\t---components</span><br><span class=\"line\">\t\t-App.js</span><br><span class=\"line\">\t\t-Footer.js</span><br><span class=\"line\">\t\t-Link.js</span><br><span class=\"line\">\t\t-Todo.js</span><br><span class=\"line\">\t\t-TodoList.js</span><br><span class=\"line\">\t---containers</span><br><span class=\"line\">\t\t-AddTodo.js</span><br><span class=\"line\">\t\t-FilterLink.js</span><br><span class=\"line\">\t\t-VisibleTodoList.js</span><br><span class=\"line\">\t---reducers</span><br><span class=\"line\">\t\t-index.js</span><br><span class=\"line\">\t\t-todos.js</span><br><span class=\"line\">\t\t-visibilityFilter.js</span><br><span class=\"line\">\t-index.js</span><br></pre></td></tr></table></figure>\n<h4 id=\"项目入口\"><a href=\"#项目入口\" class=\"headerlink\" title=\"项目入口\"></a>项目入口</h4><hr>\n<p>/public/index.html</p>\n<p>作为静态文件模板，这个文件主要就是提供一个入口，将React代码生成的视图插入进去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>/src/index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &#123; render &#125; from &apos;react-dom&apos;</span><br><span class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;</span><br><span class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import App from &apos;./components/App&apos;</span><br><span class=\"line\">import rootReducer from &apos;./reducers&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = createStore(rootReducer)</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\"> \t\t&lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">   \t\t&lt;App /&gt;</span><br><span class=\"line\"> \t\t&lt;/Provider&gt;,</span><br><span class=\"line\"> \t\tdocument.getElementById(&apos;root&apos;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>这是个典型的React入口函数，将根组件 <app> 插入到html模板的 id为root的插槽中。</app></p>\n<p>这里的createStore则是Redux内置的方法，用来创建一个全局唯一的store，并传入根reducer来做配置。</p>\n<p>Provider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了。</p>\n<p>这个项目的state为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\ttodos:[</span><br><span class=\"line\">\t\tcompleted: true,</span><br><span class=\"line\">\t\tid: 0,</span><br><span class=\"line\">\t\ttext: &apos;Learn about actions&apos;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\tvisibleTodoFilter: &quot;SHOW_ALL&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面按顺序查看代码。</p>\n<h4 id=\"reducers\"><a href=\"#reducers\" class=\"headerlink\" title=\"reducers\"></a>reducers</h4><hr>\n<p>/src/reducers/index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; combineReducers &#125; from &apos;redux&apos;</span><br><span class=\"line\">import todos from &apos;./todos&apos;</span><br><span class=\"line\">import visibilityFilter from &apos;./visibilityFilter&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default combineReducers(&#123;</span><br><span class=\"line\"> \t\ttodos,</span><br><span class=\"line\"> \t\tvisibilityFilter</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>combineReducers() 所做的只是生成一个函数，这个函数来调用你的一系列 reducer，每个 reducer 根据它们的 key 来筛选出 state 中的一部分数据并处理，然后这个生成的函数再将所有 reducer 的结果合并成一个大的对象。</p>\n<p>这个写法等同于下面的写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function todoApp(state = &#123;&#125;, action) &#123;</span><br><span class=\"line\"> \t\treturn &#123;</span><br><span class=\"line\">   \t\tvisibilityFilter: visibilityFilter(state.visibilityFilter, action),</span><br><span class=\"line\">   \t\ttodos: todos(state.todos, action)</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是第一种写法是如何识别key并绑定的呢？？？此处存疑。</p>\n<p>接着看导入的两个reducer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const visibilityFilter = (state = &apos;SHOW_ALL&apos;, action) =&gt; &#123;</span><br><span class=\"line\"> \t\tswitch (action.type) &#123; </span><br><span class=\"line\">   \t\tcase &apos;SET_VISIBILITY_FILTER&apos;:</span><br><span class=\"line\">     \t\t\treturn action.filter</span><br><span class=\"line\">   \tdefault:</span><br><span class=\"line\">     \t\treturn state</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default visibilityFilter</span><br></pre></td></tr></table></figure>\n<p>这个reducer的操作就是根据改变筛选条件来返回新的state</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const todos = (state = [], action) =&gt; &#123;</span><br><span class=\"line\"> \t\tswitch (action.type) &#123;</span><br><span class=\"line\">   \t\tcase &apos;ADD_TODO&apos;:</span><br><span class=\"line\">    \t \t\treturn [</span><br><span class=\"line\">       \t\t\t...state,</span><br><span class=\"line\">\t\t        &#123;</span><br><span class=\"line\">\t\t          \tid: action.id,</span><br><span class=\"line\">\t\t          \ttext: action.text,</span><br><span class=\"line\">\t\t          \tcompleted: false</span><br><span class=\"line\">\t\t        &#125;</span><br><span class=\"line\">     \t\t\t]</span><br><span class=\"line\">   \t\tcase &apos;TOGGLE_TODO&apos;:</span><br><span class=\"line\">     \t\t\treturn state.map(todo =&gt;</span><br><span class=\"line\">       \t\t\t(todo.id === action.id)</span><br><span class=\"line\">         \t\t\t? &#123;...todo, completed: !todo.completed&#125;</span><br><span class=\"line\">         \t\t\t: todo</span><br><span class=\"line\">     \t\t\t)</span><br><span class=\"line\">  \t\t \tdefault:</span><br><span class=\"line\">     \t\t\treturn state</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default todos</span><br></pre></td></tr></table></figure>\n<p>ADD_TODO动作中，采用数组合并，添加一个新的待操作项，创建一个新的state的todos数组并返回</p>\n<p>而TODDLE_TODO动作中，则是对当前state进行遍历，查到id相同项，取反completed属性并返回</p>\n<p>这两个reducer对应了todos这个应用的三个用户会触发的事件，都做了对应action的处理，接下来进行绑定action</p>\n<h4 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h4><p>这个文件夹对应的含义是不含逻辑的组件，只接受props传值然后负责渲染</p>\n<p>/components/App.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import Footer from &apos;./Footer&apos;</span><br><span class=\"line\">import AddTodo from &apos;../containers/AddTodo&apos;</span><br><span class=\"line\">import VisibleTodoList from &apos;../containers/VisibleTodoList&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const App = () =&gt; (</span><br><span class=\"line\"> \t\t&lt;div&gt;</span><br><span class=\"line\">   \t\t&lt;AddTodo /&gt;</span><br><span class=\"line\">   \t\t&lt;VisibleTodoList /&gt;</span><br><span class=\"line\">   \t\t&lt;Footer /&gt;</span><br><span class=\"line\"> \t\t&lt;/div&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">export default App</span><br></pre></td></tr></table></figure>\n<p>这个就是根组件，下面以此来看这三个子组件</p>\n<p>/components/Footer.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import FilterLink from &apos;../containers/FilterLink&apos;</span><br><span class=\"line\">import &#123; VisibilityFilters &#125; from &apos;../actions&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const Footer = () =&gt; (</span><br><span class=\"line\"> \t\t&lt;div&gt;</span><br><span class=\"line\">\t    &lt;span&gt;Show: &lt;/span&gt;</span><br><span class=\"line\">\t    &lt;FilterLink filter=&#123;VisibilityFilters.SHOW_ALL&#125;&gt;</span><br><span class=\"line\">     \t\t\tAll</span><br><span class=\"line\">\t    &lt;/FilterLink&gt;</span><br><span class=\"line\">\t    &lt;FilterLink filter=&#123;VisibilityFilters.SHOW_ACTIVE&#125;&gt;</span><br><span class=\"line\">     \t\t\tActive</span><br><span class=\"line\">\t    &lt;/FilterLink&gt;</span><br><span class=\"line\">\t    &lt;FilterLink filter=&#123;VisibilityFilters.SHOW_COMPLETED&#125;&gt;</span><br><span class=\"line\">     \t\t\tCompleted</span><br><span class=\"line\">   \t\t&lt;/FilterLink&gt;</span><br><span class=\"line\"> \t\t&lt;/div&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">export default Footer</span><br></pre></td></tr></table></figure>\n<p>这里用了一个逻辑组件 <filterlink>来包裹按钮，同时传入了属性filter，先来看下actions里的VisibilityFilters</filterlink></p>\n<p>/actions/index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nextTodoId = 0</span><br><span class=\"line\">export const addTodo = text =&gt; (&#123;</span><br><span class=\"line\">  \ttype: &apos;ADD_TODO&apos;,</span><br><span class=\"line\">  \tid: nextTodoId++,</span><br><span class=\"line\">  \ttext</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export const setVisibilityFilter = filter =&gt; (&#123;</span><br><span class=\"line\"> \t\ttype: &apos;SET_VISIBILITY_FILTER&apos;,</span><br><span class=\"line\"> \t\tfilter</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export const toggleTodo = id =&gt; (&#123;</span><br><span class=\"line\"> \t\ttype: &apos;TOGGLE_TODO&apos;,</span><br><span class=\"line\"> \t\tid</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export const VisibilityFilters = &#123;</span><br><span class=\"line\"> \t\tSHOW_ALL: &apos;SHOW_ALL&apos;,</span><br><span class=\"line\"> \t\tSHOW_COMPLETED: &apos;SHOW_COMPLETED&apos;,</span><br><span class=\"line\"> \t\tSHOW_ACTIVE: &apos;SHOW_ACTIVE&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们知道actions存放的是动作的描述，那么VisibilityFilters的三个对应属性分别传入 <filterlink>中，不出意外这个组件里就将绑定action SET_VISIBILITY_FILTER和对应的 reducer了。</filterlink></p>\n<p>/containers/FilterLink.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import &#123; setVisibilityFilter &#125; from &apos;../actions&apos;</span><br><span class=\"line\">import Link from &apos;../components/Link&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const mapStateToProps = (state, ownProps) =&gt; (&#123;</span><br><span class=\"line\"> \t\tactive: ownProps.filter === state.visibilityFilter</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const mapDispatchToProps = (dispatch, ownProps) =&gt; (&#123;</span><br><span class=\"line\"> \t\tonClick: () =&gt; dispatch(setVisibilityFilter(ownProps.filter))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default connect(</span><br><span class=\"line\"> \t\tmapStateToProps,</span><br><span class=\"line\"> \t\tmapDispatchToProps</span><br><span class=\"line\">)(Link)</span><br></pre></td></tr></table></figure>\n<p>这里的FilterLink组件使用 connect方法生成的，用于从 UI 组件生成容器组件。connect的意思，就是将这两种组件连起来。</p>\n<p>Link就是UI组件，而生成的FilterLink就是容器组件，Link只负责单纯的数据渲染，所有的逻辑都将在FilterLink组件里完成。</p>\n<p>这里的绑定的逻辑就有两部分组成：</p>\n<p>一是输入逻辑，即mapStateToProps，可以理解为state转化为组件pros的逻辑，这里是将state的visibilityFilter属性赋值给props的filter属性，用来影响Link组件中button的可点击状态。</p>\n<p>而是输出逻辑，即mapDispatchToProps，可以理解为动作的发生逻辑，这里绑定了个点击事件，点击的逻辑是派发一个setVisibilityFilter动作，会由actions接收，参数就是当前组件的filter属性。</p>\n<p>/components/Link.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import PropTypes from &apos;prop-types&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const Link = (&#123; active, children, onClick &#125;) =&gt; (</span><br><span class=\"line\">   \t&lt;button</span><br><span class=\"line\">       onClick=&#123;onClick&#125;</span><br><span class=\"line\">       disabled=&#123;active&#125;</span><br><span class=\"line\">       style=&#123;&#123; marginLeft: &apos;4px&apos;, &#125;&#125;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">     \t\t&#123;children&#125;</span><br><span class=\"line\">   \t&lt;/button&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">Link.propTypes = &#123;</span><br><span class=\"line\">  \tactive: PropTypes.bool.isRequired,</span><br><span class=\"line\">  \tchildren: PropTypes.node.isRequired,</span><br><span class=\"line\">  \tonClick: PropTypes.func.isRequired</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Link</span><br></pre></td></tr></table></figure>\n<p>/containers/AddTodo.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import &#123; addTodo &#125; from &apos;../actions&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const AddTodo = (&#123; dispatch &#125;) =&gt; &#123;</span><br><span class=\"line\"> \t\tlet input</span><br><span class=\"line\"></span><br><span class=\"line\"> \t\treturn (</span><br><span class=\"line\">   \t\t&lt;div&gt;</span><br><span class=\"line\">     \t\t\t&lt;form onSubmit=&#123;e =&gt; &#123;</span><br><span class=\"line\">       \t\t\te.preventDefault()</span><br><span class=\"line\">       \t\t\tif (!input.value.trim()) &#123;</span><br><span class=\"line\">         \t\t\t\treturn</span><br><span class=\"line\">       \t\t\t&#125;</span><br><span class=\"line\">       \t\t\tdispatch(addTodo(input.value))</span><br><span class=\"line\">       \t\t\tinput.value = &apos;&apos;</span><br><span class=\"line\">     \t\t\t&#125;&#125;&gt;</span><br><span class=\"line\">       \t\t\t&lt;input ref=&#123;node =&gt; input = node&#125; /&gt;</span><br><span class=\"line\">       \t\t\t&lt;button type=&quot;submit&quot;&gt;</span><br><span class=\"line\">         \t\t\t\tAdd Todo</span><br><span class=\"line\">       \t\t\t&lt;/button&gt;</span><br><span class=\"line\">     \t\t\t&lt;/form&gt;</span><br><span class=\"line\">   \t\t&lt;/div&gt;</span><br><span class=\"line\"> \t\t)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default connect()(AddTodo)</span><br></pre></td></tr></table></figure>\n<p>这个组件就很简单了，就是一个表单，点击提交时派发一个addTodo动作等待被actions接受就可以了，参数为添加的事项名称，id会在actions里面动态添加。</p>\n<p>/containers/VisibleTodoList.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import &#123; toggleTodo &#125; from &apos;../actions&apos;</span><br><span class=\"line\">import TodoList from &apos;../components/TodoList&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const getVisibleTodos = (todos, filter) =&gt; &#123;</span><br><span class=\"line\"> \t\tswitch (filter) &#123;</span><br><span class=\"line\">   \t\tcase &apos;SHOW_ALL&apos;:</span><br><span class=\"line\">     \t\t\treturn todos</span><br><span class=\"line\">   \t\tcase &apos;SHOW_COMPLETED&apos;:</span><br><span class=\"line\">     \t\t\treturn todos.filter(t =&gt; t.completed)</span><br><span class=\"line\">   \t\tcase &apos;SHOW_ACTIVE&apos;:</span><br><span class=\"line\">     \t\t\treturn todos.filter(t =&gt; !t.completed)</span><br><span class=\"line\">   \t\tdefault:</span><br><span class=\"line\">     \t\t\tthrow new Error(&apos;Unknown filter: &apos; + filter)</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const mapStateToProps = state =&gt; (&#123;</span><br><span class=\"line\">  \ttodos: getVisibleTodos(state.todos, state.visibilityFilter)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const mapDispatchToProps = dispatch =&gt; (&#123;</span><br><span class=\"line\">  \ttoggleTodo: id =&gt; dispatch(toggleTodo(id))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default connect(</span><br><span class=\"line\">  \tmapStateToProps,</span><br><span class=\"line\">  \tmapDispatchToProps</span><br><span class=\"line\">)(TodoList)</span><br></pre></td></tr></table></figure>\n<p>这个组件与Footer类似</p>\n<p>输入逻辑是根据filter的值来决定todos数组中那些项显示出来</p>\n<p>输出逻辑则是点击列表项时派发一个toggleTodo动作，参数是这个列表项的id</p>\n<p>/components/TodoList.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import PropTypes from &apos;prop-types&apos;</span><br><span class=\"line\">import Todo from &apos;./Todo&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const TodoList = (&#123; todos, toggleTodo &#125;) =&gt; (</span><br><span class=\"line\"> \t\t&lt;ul&gt;</span><br><span class=\"line\">   \t\t&#123;todos.map(todo =&gt;</span><br><span class=\"line\">     \t\t\t&lt;Todo</span><br><span class=\"line\">       \t\t\tkey=&#123;todo.id&#125;</span><br><span class=\"line\">       \t\t\t&#123;...todo&#125;</span><br><span class=\"line\">       \t\t\tonClick=&#123;() =&gt; toggleTodo(todo.id)&#125;</span><br><span class=\"line\">     \t\t\t\t/&gt;</span><br><span class=\"line\">   \t\t)&#125;</span><br><span class=\"line\"> \t\t&lt;/ul&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">TodoList.propTypes = &#123;</span><br><span class=\"line\">\t\ttodos: PropTypes.arrayOf(PropTypes.shape(&#123;</span><br><span class=\"line\">   \t\tid: PropTypes.number.isRequired,</span><br><span class=\"line\">   \t\tcompleted: PropTypes.bool.isRequired,</span><br><span class=\"line\">   \t\ttext: PropTypes.string.isRequired</span><br><span class=\"line\"> \t\t&#125;).isRequired).isRequired,</span><br><span class=\"line\"> \t\ttoggleTodo: PropTypes.func.isRequired</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default TodoList</span><br></pre></td></tr></table></figure>\n<p>/components/Todo.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import PropTypes from &apos;prop-types&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const Todo = (&#123; onClick, completed, text &#125;) =&gt; (</span><br><span class=\"line\"> \t\t&lt;li</span><br><span class=\"line\">  \t \t\tonClick=&#123;onClick&#125;</span><br><span class=\"line\">   \t\tstyle=&#123;&#123; textDecoration: completed ? &apos;line-through&apos; : &apos;none&apos; &#125;&#125;</span><br><span class=\"line\"> \t\t\t&gt;</span><br><span class=\"line\">   \t\t&#123;text&#125;</span><br><span class=\"line\"> \t\t&lt;/li&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">Todo.propTypes = &#123;</span><br><span class=\"line\"> \t\tonClick: PropTypes.func.isRequired,</span><br><span class=\"line\"> \t\tcompleted: PropTypes.bool.isRequired,</span><br><span class=\"line\"> \t\ttext: PropTypes.string.isRequired</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Todo</span><br></pre></td></tr></table></figure>\n<p>这两个组件就是单纯的UI组件，将todos的数据渲染出来，并为每个todo绑定一个点击事件，用来派发toggleTodo动作。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>通过对整个项目的分析，可以明显得感觉到，Redux通过将actions抽离并合并，将各种情况下的动作集合在一起统一管理，并通过reducer为这些动作添加逻辑，达到修改store的目的，从而渲染新的UI，等待用户操作，这样就形成了一个数据的单向闭环流动，使得每一个动作都可预测。</p>\n"},{"layout":"post","title":"San学习笔记 一","subtitle":"基本用法","date":"2018-01-04T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 数据相关\n-------------\n\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<p>Hello {{name}}!</p>',\n\n\t    initData: function () {\n\t        return {\n\t            name: 'San'\n\t        };\n\t    }\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n```\n\n可以看到，通常情况实用 San 会经过这么几步：\n\n* 我们先定义了一个 San 的组件，在定义时指定了组件的 内容模板 与 初始数据 。\n* 初始化组件对象\n* 让组件在相应的地方渲染\n\n列表渲染(s-for)\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    attached: function () {\n\t        this.data.set('list', ['san', 'er', 'esui', 'etpl', 'esl']);\n\t    }\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n```\n\n列表渲染(s-if)\n\nSan 的条件判断不是严格的 === false。所以，一切 JavaScript 的假值都会认为条件不成立：0、空字符串、null、undefined、NaN等。\n\n```\n    <span s-if=\"isOK\">Hello San!</span>\n```\n\ns-elif 指令可以给 s-if 增加一个额外条件分支块。s-elif 指令的值可以是任何类型的表达式。\n\n```\n    <span s-if=\"isActive\">Active</span>\n\t<span s-elif=\"isOnline\">Pending</span>\n\t<span s-else>Offline</span>\n```\n\n虚拟元素 template ，在渲染时不会包含自身，只会渲染其内容。\n\n```\n    <template s-if=\"num > 10000\">\n        <h2>biiig</h2>\n        <p>{{num}}</p>\n    </template>\n```\n\n\n#### 数据的绑定\n\n双向绑定({=  =})\n\n```\n    var MyApp = san.defineComponent({\n\t    template: ''\n\t        + '<div>'\n\t        +   '<input value=\"{= name =}\" placeholder=\"please input\">'\n\t        +   'Hello {{name}}!'\n\t        + '</div>'\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n\n\t<input type=\"text\" value=\"{= name =}\">\n\n\t<select value=\"{= online =}\">\n\t    <option value=\"errorrik\">errorrik</option>\n\t    <option value=\"otakustay\">otakustay</option>\n\t    <option value=\"firede\">firede</option>\n\t</select>\n```\n\n属性绑定\n\n```\n    <ui-label text=\"{{jokeName}}\"></ui-label>\n```\n\n输出原封不动的 HTML，不希望经过 HTML 转义。\n\n```\n    <p s-html=\"rawHTML\"></p>    //通过指令 s-html\n\t<p>{{rawHTML | raw}}</p>\t//通过过滤器raw\n```\n\n\n#### 数据的操作\n-------------\n\ninitData 方法：可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。\n\n```\n    san.defineComponent({\n\t    initData: function () {\n\t        return {\n\t            width: 200,\n\t            top: 100,\n\t            left: -1000\n\t        };\n\t    }\n\t});\n```\n\nset 方法：是最常用的操作数据的方法，作用相当于 JavaScript 中的赋值 (=)。\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        requestUser().then(this.userReceived.bind(this));\n\t    },\n\n\t    userReceived: function (data) {\n\t        this.data.set('user', data);\n\t    },\n\n\t    changeEmail: function (email) {\n\t        this.data.set('user.email', email);\n\t    }\n\t});\n```\n\nmerge 方法：将目标数据对象（target）和传入数据对象（source）的键进行合并。\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        requestUser().then(this.updateUserInfo.bind(this));\n\t    },\n\n\t    updateUserInfo: function (data) {\n\t        this.data.merge('user', data);\n\t    }\n\t});\n```\n\napply 方法：接受一个函数作为参数，传入当前的值到函数，然后用新返回的值更新它。\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        this.data.set('number', {\n\t            value: 1\n\t        });\n\t        this.updateNumber();\n\t    },\n\n\t    updateNumber: function (data) {\n\t        this.data.apply('number', function (number) {\n\t            return {\n\t                value: number.value * 2\n\t            };\n\t        })\n\t    }\n\t});\n```\n\n还有一些数组方法：\n\n修改数组项还是直接使用 set 方法。\n\npush：在数组末尾插入一条数据。\n\n```\n    san.defineComponent({\n\t    addUser: function (name) {\n\t        this.data.push('users', {name: name});\n\t    }\n\t});\n```\n\npop：在数组末尾弹出一条数据。\n\n```\n    san.defineComponent({\n\t    rmLast: function () {\n\t        this.data.pop('users');\n\t    }\n\t});\n```\n\nunshift：在数组开始插入一条数据。\n\n```\n    san.defineComponent({\n\t    addUser: function (name) {\n\t        this.data.unshift('users', {name: name});\n\t    }\n\t});\n```\n\nshift：在数组开始弹出一条数据。\n\n```\n    san.defineComponent({\n\t    rmFirst: function () {\n\t        this.data.shift('users');\n\t    }\n\t});\n```\n\nremove：移除一条数据。只有当数组项与传入项完全相等(===)时，数组项才会被移除。\n\n```\n    san.defineComponent({\n\t    rm: function (user) {\n\t        this.data.remove('users', user);\n\t    }\n\t});\n```\n\nremoveAt：通过数据项的索引移除一条数据。\n\n```\n    san.defineComponent({\n\t    rmAt: function (index) {\n\t        this.data.removeAt('users', index);\n\t    }\n\t});\n```\n\nsplice：向数组中添加或删除项目。\n\n```\n    san.defineComponent({\n\t    rm: function (index, deleteCount) {\n\t        this.data.splice('users', [index, deleteCount]);\n\t    }\n\t});\n```\n\n\n#### 数据的校验\n-------------\n\n指定校验规则，需要使用 DataTypes 进行声明：\n\n```\n    import san, {DataTypes} from 'san';\n\n\tlet MyComponent = san.defineComponent({\n\n\t    dataTypes: {\n\t        name: DataTypes.string\n\t    }\n\n\t});\n```\n\n","source":"_posts/san1.md","raw":"---\nlayout: post\ntitle: \"San学习笔记 一\"\nsubtitle: \"基本用法\"\ndate: 2018-1-5\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - San\n---\n\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 数据相关\n-------------\n\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<p>Hello {{name}}!</p>',\n\n\t    initData: function () {\n\t        return {\n\t            name: 'San'\n\t        };\n\t    }\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n```\n\n可以看到，通常情况实用 San 会经过这么几步：\n\n* 我们先定义了一个 San 的组件，在定义时指定了组件的 内容模板 与 初始数据 。\n* 初始化组件对象\n* 让组件在相应的地方渲染\n\n列表渲染(s-for)\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    attached: function () {\n\t        this.data.set('list', ['san', 'er', 'esui', 'etpl', 'esl']);\n\t    }\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n```\n\n列表渲染(s-if)\n\nSan 的条件判断不是严格的 === false。所以，一切 JavaScript 的假值都会认为条件不成立：0、空字符串、null、undefined、NaN等。\n\n```\n    <span s-if=\"isOK\">Hello San!</span>\n```\n\ns-elif 指令可以给 s-if 增加一个额外条件分支块。s-elif 指令的值可以是任何类型的表达式。\n\n```\n    <span s-if=\"isActive\">Active</span>\n\t<span s-elif=\"isOnline\">Pending</span>\n\t<span s-else>Offline</span>\n```\n\n虚拟元素 template ，在渲染时不会包含自身，只会渲染其内容。\n\n```\n    <template s-if=\"num > 10000\">\n        <h2>biiig</h2>\n        <p>{{num}}</p>\n    </template>\n```\n\n\n#### 数据的绑定\n\n双向绑定({=  =})\n\n```\n    var MyApp = san.defineComponent({\n\t    template: ''\n\t        + '<div>'\n\t        +   '<input value=\"{= name =}\" placeholder=\"please input\">'\n\t        +   'Hello {{name}}!'\n\t        + '</div>'\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n\n\t<input type=\"text\" value=\"{= name =}\">\n\n\t<select value=\"{= online =}\">\n\t    <option value=\"errorrik\">errorrik</option>\n\t    <option value=\"otakustay\">otakustay</option>\n\t    <option value=\"firede\">firede</option>\n\t</select>\n```\n\n属性绑定\n\n```\n    <ui-label text=\"{{jokeName}}\"></ui-label>\n```\n\n输出原封不动的 HTML，不希望经过 HTML 转义。\n\n```\n    <p s-html=\"rawHTML\"></p>    //通过指令 s-html\n\t<p>{{rawHTML | raw}}</p>\t//通过过滤器raw\n```\n\n\n#### 数据的操作\n-------------\n\ninitData 方法：可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。\n\n```\n    san.defineComponent({\n\t    initData: function () {\n\t        return {\n\t            width: 200,\n\t            top: 100,\n\t            left: -1000\n\t        };\n\t    }\n\t});\n```\n\nset 方法：是最常用的操作数据的方法，作用相当于 JavaScript 中的赋值 (=)。\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        requestUser().then(this.userReceived.bind(this));\n\t    },\n\n\t    userReceived: function (data) {\n\t        this.data.set('user', data);\n\t    },\n\n\t    changeEmail: function (email) {\n\t        this.data.set('user.email', email);\n\t    }\n\t});\n```\n\nmerge 方法：将目标数据对象（target）和传入数据对象（source）的键进行合并。\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        requestUser().then(this.updateUserInfo.bind(this));\n\t    },\n\n\t    updateUserInfo: function (data) {\n\t        this.data.merge('user', data);\n\t    }\n\t});\n```\n\napply 方法：接受一个函数作为参数，传入当前的值到函数，然后用新返回的值更新它。\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        this.data.set('number', {\n\t            value: 1\n\t        });\n\t        this.updateNumber();\n\t    },\n\n\t    updateNumber: function (data) {\n\t        this.data.apply('number', function (number) {\n\t            return {\n\t                value: number.value * 2\n\t            };\n\t        })\n\t    }\n\t});\n```\n\n还有一些数组方法：\n\n修改数组项还是直接使用 set 方法。\n\npush：在数组末尾插入一条数据。\n\n```\n    san.defineComponent({\n\t    addUser: function (name) {\n\t        this.data.push('users', {name: name});\n\t    }\n\t});\n```\n\npop：在数组末尾弹出一条数据。\n\n```\n    san.defineComponent({\n\t    rmLast: function () {\n\t        this.data.pop('users');\n\t    }\n\t});\n```\n\nunshift：在数组开始插入一条数据。\n\n```\n    san.defineComponent({\n\t    addUser: function (name) {\n\t        this.data.unshift('users', {name: name});\n\t    }\n\t});\n```\n\nshift：在数组开始弹出一条数据。\n\n```\n    san.defineComponent({\n\t    rmFirst: function () {\n\t        this.data.shift('users');\n\t    }\n\t});\n```\n\nremove：移除一条数据。只有当数组项与传入项完全相等(===)时，数组项才会被移除。\n\n```\n    san.defineComponent({\n\t    rm: function (user) {\n\t        this.data.remove('users', user);\n\t    }\n\t});\n```\n\nremoveAt：通过数据项的索引移除一条数据。\n\n```\n    san.defineComponent({\n\t    rmAt: function (index) {\n\t        this.data.removeAt('users', index);\n\t    }\n\t});\n```\n\nsplice：向数组中添加或删除项目。\n\n```\n    san.defineComponent({\n\t    rm: function (index, deleteCount) {\n\t        this.data.splice('users', [index, deleteCount]);\n\t    }\n\t});\n```\n\n\n#### 数据的校验\n-------------\n\n指定校验规则，需要使用 DataTypes 进行声明：\n\n```\n    import san, {DataTypes} from 'san';\n\n\tlet MyComponent = san.defineComponent({\n\n\t    dataTypes: {\n\t        name: DataTypes.string\n\t    }\n\n\t});\n```\n\n","slug":"san1","published":1,"updated":"2018-01-28T07:49:39.007Z","comments":1,"photos":[],"link":"","_id":"cjkvxydy6001v5xfamgk9htbg","content":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"数据相关\"><a href=\"#数据相关\" class=\"headerlink\" title=\"数据相关\"></a>数据相关</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;p&gt;Hello &#123;&#123;name&#125;&#125;!&lt;/p&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            name: &apos;San&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>可以看到，通常情况实用 San 会经过这么几步：</p>\n<ul>\n<li>我们先定义了一个 San 的组件，在定义时指定了组件的 内容模板 与 初始数据 。</li>\n<li>初始化组件对象</li>\n<li>让组件在相应的地方渲染</li>\n</ul>\n<p>列表渲染(s-for)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>列表渲染(s-if)</p>\n<p>San 的条件判断不是严格的 === false。所以，一切 JavaScript 的假值都会认为条件不成立：0、空字符串、null、undefined、NaN等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span s-if=&quot;isOK&quot;&gt;Hello San!&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<p>s-elif 指令可以给 s-if 增加一个额外条件分支块。s-elif 指令的值可以是任何类型的表达式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;span s-if=&quot;isActive&quot;&gt;Active&lt;/span&gt;</span><br><span class=\"line\">&lt;span s-elif=&quot;isOnline&quot;&gt;Pending&lt;/span&gt;</span><br><span class=\"line\">&lt;span s-else&gt;Offline&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<p>虚拟元素 template ，在渲染时不会包含自身，只会渲染其内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template s-if=&quot;num &gt; 10000&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;biiig&lt;/h2&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的绑定\"><a href=\"#数据的绑定\" class=\"headerlink\" title=\"数据的绑定\"></a>数据的绑定</h4><p>双向绑定({=  =})</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;input value=&quot;&#123;= name =&#125;&quot; placeholder=&quot;please input&quot;&gt;&apos;</span><br><span class=\"line\">        +   &apos;Hello &#123;&#123;name&#125;&#125;!&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;&#123;= name =&#125;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;select value=&quot;&#123;= online =&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;option value=&quot;errorrik&quot;&gt;errorrik&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;otakustay&quot;&gt;otakustay&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;firede&quot;&gt;firede&lt;/option&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<p>属性绑定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ui-label text=&quot;&#123;&#123;jokeName&#125;&#125;&quot;&gt;&lt;/ui-label&gt;</span><br></pre></td></tr></table></figure>\n<p>输出原封不动的 HTML，不希望经过 HTML 转义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;p s-html=&quot;rawHTML&quot;&gt;&lt;/p&gt;    //通过指令 s-html</span><br><span class=\"line\">&lt;p&gt;&#123;&#123;rawHTML | raw&#125;&#125;&lt;/p&gt;\t//通过过滤器raw</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的操作\"><a href=\"#数据的操作\" class=\"headerlink\" title=\"数据的操作\"></a>数据的操作</h4><hr>\n<p>initData 方法：可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            width: 200,</span><br><span class=\"line\">            top: 100,</span><br><span class=\"line\">            left: -1000</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>set 方法：是最常用的操作数据的方法，作用相当于 JavaScript 中的赋值 (=)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        requestUser().then(this.userReceived.bind(this));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    userReceived: function (data) &#123;</span><br><span class=\"line\">        this.data.set(&apos;user&apos;, data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    changeEmail: function (email) &#123;</span><br><span class=\"line\">        this.data.set(&apos;user.email&apos;, email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>merge 方法：将目标数据对象（target）和传入数据对象（source）的键进行合并。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        requestUser().then(this.updateUserInfo.bind(this));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    updateUserInfo: function (data) &#123;</span><br><span class=\"line\">        this.data.merge(&apos;user&apos;, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>apply 方法：接受一个函数作为参数，传入当前的值到函数，然后用新返回的值更新它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;number&apos;, &#123;</span><br><span class=\"line\">            value: 1</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        this.updateNumber();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    updateNumber: function (data) &#123;</span><br><span class=\"line\">        this.data.apply(&apos;number&apos;, function (number) &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                value: number.value * 2</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>还有一些数组方法：</p>\n<p>修改数组项还是直接使用 set 方法。</p>\n<p>push：在数组末尾插入一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    addUser: function (name) &#123;</span><br><span class=\"line\">        this.data.push(&apos;users&apos;, &#123;name: name&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>pop：在数组末尾弹出一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rmLast: function () &#123;</span><br><span class=\"line\">        this.data.pop(&apos;users&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>unshift：在数组开始插入一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    addUser: function (name) &#123;</span><br><span class=\"line\">        this.data.unshift(&apos;users&apos;, &#123;name: name&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>shift：在数组开始弹出一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rmFirst: function () &#123;</span><br><span class=\"line\">        this.data.shift(&apos;users&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>remove：移除一条数据。只有当数组项与传入项完全相等(===)时，数组项才会被移除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rm: function (user) &#123;</span><br><span class=\"line\">        this.data.remove(&apos;users&apos;, user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>removeAt：通过数据项的索引移除一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rmAt: function (index) &#123;</span><br><span class=\"line\">        this.data.removeAt(&apos;users&apos;, index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>splice：向数组中添加或删除项目。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rm: function (index, deleteCount) &#123;</span><br><span class=\"line\">        this.data.splice(&apos;users&apos;, [index, deleteCount]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的校验\"><a href=\"#数据的校验\" class=\"headerlink\" title=\"数据的校验\"></a>数据的校验</h4><hr>\n<p>指定校验规则，需要使用 DataTypes 进行声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   import san, &#123;DataTypes&#125; from &apos;san&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">let MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    dataTypes: &#123;</span><br><span class=\"line\">        name: DataTypes.string</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"数据相关\"><a href=\"#数据相关\" class=\"headerlink\" title=\"数据相关\"></a>数据相关</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;p&gt;Hello &#123;&#123;name&#125;&#125;!&lt;/p&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            name: &apos;San&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>可以看到，通常情况实用 San 会经过这么几步：</p>\n<ul>\n<li>我们先定义了一个 San 的组件，在定义时指定了组件的 内容模板 与 初始数据 。</li>\n<li>初始化组件对象</li>\n<li>让组件在相应的地方渲染</li>\n</ul>\n<p>列表渲染(s-for)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>列表渲染(s-if)</p>\n<p>San 的条件判断不是严格的 === false。所以，一切 JavaScript 的假值都会认为条件不成立：0、空字符串、null、undefined、NaN等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span s-if=&quot;isOK&quot;&gt;Hello San!&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<p>s-elif 指令可以给 s-if 增加一个额外条件分支块。s-elif 指令的值可以是任何类型的表达式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;span s-if=&quot;isActive&quot;&gt;Active&lt;/span&gt;</span><br><span class=\"line\">&lt;span s-elif=&quot;isOnline&quot;&gt;Pending&lt;/span&gt;</span><br><span class=\"line\">&lt;span s-else&gt;Offline&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<p>虚拟元素 template ，在渲染时不会包含自身，只会渲染其内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template s-if=&quot;num &gt; 10000&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;biiig&lt;/h2&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的绑定\"><a href=\"#数据的绑定\" class=\"headerlink\" title=\"数据的绑定\"></a>数据的绑定</h4><p>双向绑定({=  =})</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;input value=&quot;&#123;= name =&#125;&quot; placeholder=&quot;please input&quot;&gt;&apos;</span><br><span class=\"line\">        +   &apos;Hello &#123;&#123;name&#125;&#125;!&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;&#123;= name =&#125;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;select value=&quot;&#123;= online =&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;option value=&quot;errorrik&quot;&gt;errorrik&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;otakustay&quot;&gt;otakustay&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;firede&quot;&gt;firede&lt;/option&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<p>属性绑定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ui-label text=&quot;&#123;&#123;jokeName&#125;&#125;&quot;&gt;&lt;/ui-label&gt;</span><br></pre></td></tr></table></figure>\n<p>输出原封不动的 HTML，不希望经过 HTML 转义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;p s-html=&quot;rawHTML&quot;&gt;&lt;/p&gt;    //通过指令 s-html</span><br><span class=\"line\">&lt;p&gt;&#123;&#123;rawHTML | raw&#125;&#125;&lt;/p&gt;\t//通过过滤器raw</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的操作\"><a href=\"#数据的操作\" class=\"headerlink\" title=\"数据的操作\"></a>数据的操作</h4><hr>\n<p>initData 方法：可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            width: 200,</span><br><span class=\"line\">            top: 100,</span><br><span class=\"line\">            left: -1000</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>set 方法：是最常用的操作数据的方法，作用相当于 JavaScript 中的赋值 (=)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        requestUser().then(this.userReceived.bind(this));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    userReceived: function (data) &#123;</span><br><span class=\"line\">        this.data.set(&apos;user&apos;, data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    changeEmail: function (email) &#123;</span><br><span class=\"line\">        this.data.set(&apos;user.email&apos;, email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>merge 方法：将目标数据对象（target）和传入数据对象（source）的键进行合并。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        requestUser().then(this.updateUserInfo.bind(this));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    updateUserInfo: function (data) &#123;</span><br><span class=\"line\">        this.data.merge(&apos;user&apos;, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>apply 方法：接受一个函数作为参数，传入当前的值到函数，然后用新返回的值更新它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;number&apos;, &#123;</span><br><span class=\"line\">            value: 1</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        this.updateNumber();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    updateNumber: function (data) &#123;</span><br><span class=\"line\">        this.data.apply(&apos;number&apos;, function (number) &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                value: number.value * 2</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>还有一些数组方法：</p>\n<p>修改数组项还是直接使用 set 方法。</p>\n<p>push：在数组末尾插入一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    addUser: function (name) &#123;</span><br><span class=\"line\">        this.data.push(&apos;users&apos;, &#123;name: name&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>pop：在数组末尾弹出一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rmLast: function () &#123;</span><br><span class=\"line\">        this.data.pop(&apos;users&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>unshift：在数组开始插入一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    addUser: function (name) &#123;</span><br><span class=\"line\">        this.data.unshift(&apos;users&apos;, &#123;name: name&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>shift：在数组开始弹出一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rmFirst: function () &#123;</span><br><span class=\"line\">        this.data.shift(&apos;users&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>remove：移除一条数据。只有当数组项与传入项完全相等(===)时，数组项才会被移除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rm: function (user) &#123;</span><br><span class=\"line\">        this.data.remove(&apos;users&apos;, user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>removeAt：通过数据项的索引移除一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rmAt: function (index) &#123;</span><br><span class=\"line\">        this.data.removeAt(&apos;users&apos;, index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>splice：向数组中添加或删除项目。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rm: function (index, deleteCount) &#123;</span><br><span class=\"line\">        this.data.splice(&apos;users&apos;, [index, deleteCount]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的校验\"><a href=\"#数据的校验\" class=\"headerlink\" title=\"数据的校验\"></a>数据的校验</h4><hr>\n<p>指定校验规则，需要使用 DataTypes 进行声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   import san, &#123;DataTypes&#125; from &apos;san&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">let MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    dataTypes: &#123;</span><br><span class=\"line\">        name: DataTypes.string</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"San学习笔记 二","subtitle":"事件处理及表单提交","date":"2018-01-05T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 事件处理\n-------------\n\n通过 on- 前缀，可以将事件的处理绑定到组件的方法上，无论是 DOM 事件还是组件的自定义事件，都通过 on- 前缀绑定，没有语法区分。\n\non- + 事件名 将 DOM 元素的事件绑定到组件方法上。当 DOM 事件触发时，组件方法将被调用，this 指向组件实例。\n\n```\n    san.defineComponent({\n\t    template: '\n\t    \t<ul>\n\t\t\t    <li s-for=\"item, index in todos\">\n\t\t\t        <h3>{{ item.title }}</h3>\n\t\t\t        <p>{{ item.desc }}</p>\n\t\t\t        <i class=\"fa fa-trash-o\" on-click=\"rmTodo(item)\"></i>\n\t\t\t    </li>\n\t\t\t</ul>',\n\n\t    rmTodo: function (todo) {\n\t        service.rmTodo(todo.id);\n\t        this.data.remove('todos', todo);\n\t    }\n\t});\n```\n\n$event 是 San 保留的一个特殊变量，指定 $event 将引用到 DOM Event 对象。从而你可以拿到事件触发的 DOM 对象、鼠标事件的鼠标位置等事件信息。\n\n```\n\tsan.defineComponent({\n\t    template: '<button type=\"button\" on-click=\"clicker($event)\">click here</button>',\n\n\t    clicker: function (e) {\n\t        alert(e.target.tagName); // BUTTON\n\t    }\n\t});\n```\n\n\n自定义事件的绑定\n\n```\n\t//定义一个Label组件，此组件会通过调用 fire 方法来派发一个事件\n\tvar Label = san.defineComponent({\n\t    template: '<template class=\"ui-label\" title=\"{{text}}\">{{text}}</template>',\n\n\t    attached: function () {\n\t        this.fire('done', this.data.get('text') + ' done');\n\t    }\n\t});\n\n\tvar MyComponent = san.defineComponent({\n    \tcomponents: {\n\t        'ui-label': Label  \t//这里引入自定义组件Label\n\t    },\n\n\t    template: '<div><ui-label bind-text=\"name\" on-done=\"labelDone($event)\"></ui-label></div>',\n\t    //这里绑定了text为字符串name，绑定了done事件\n\n\t    labelDone: function (doneMsg) {\n\t        alert(doneMsg);\t//组件自身的done事件会派发一个事件，发出一个字符串\n\t    }\n\t});\t\n```\n\n\n\n#### 修饰符\n\n在元素的事件声明中使用 capture 修饰符，事件将被绑定到捕获阶段。\n\n```\n    var MyComponent = san.defineComponent({\n\t    template: ''\n\t        + '<div on-click=\"capture:mainClick\">'\n\t            + '<button on-click=\"capture:btnClick\">click</button>'\n\t        + '</div>',\n\n\t    mainClick: function (title) {\n\t        alert('Main');\n\t    },\n\n\t    btnClick: function (title) {\n\t        alert('Button');\n\t    }\n\t});\n\t// 会先触发mainClick事件再触发btnClick事件，因为是按点击事件的捕获顺序执行的\n```\n\n在组件的事件声明中使用 native 修饰符，事件将被绑定到组件根元素的 DOM 事件。\n\n```\n    var Button = san.defineComponent({\n\t    template: '<a class=\"my-button\"><slot/></a>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'ui-button': Button\n\t    },\n\n\t    template: '<div><ui-button on-click=\"native:clicker(title)\">{{title}}</ui-button></div>',\n\n\t    initData: function () {\n            return {\n                title: 'San'\n            };\n        },\n\n\t    clicker: function (title) {\n\t        alert(title);\n\t    }\n\t});\n\t//点击会显示：San\n```\n\n\n#### 表单\n-------------\n\n输入框的绑定方法比较简单，直接对输入框的 value 属性应用双向绑定就行了。\n\n```\n    <input type=\"text\" value=\"{= name =}\">\n```\n\ncheckbox\n\ncheckbox 常见的使用场景是分组，在组件模板中，我们把需要分组的 checkbox 将 checked 属性双向绑定到同名的组件数据中。\n\n我们期望 checkbox 绑定到的数据项是一个 Array<string> 。当 checkbox 被选中时，其 value 会被添加到绑定的数据项中；当 checkbox 被取消选中时，其 value 会从绑定数据项中移除。\n\n```\n    san.defineComponent({\n\t    template: '<div>\n\t\t    <label><input type=\"checkbox\" on-click=\"chooseone\" value=\"errorrik\" checked=\"{= online =}\">errorrik</label>\n\t\t    <label><input type=\"checkbox\" on-click=\"chooseone\" value=\"otakustay\" checked=\"{= online =}\">otakustay</label>\n\t\t    <label><input type=\"checkbox\" on-click=\"chooseone\" value=\"firede\" checked=\"{= online =}\">firede</label>\n\t\t</div>',\n\n\t    initData: function () {\n\t        return {\n\t            online: []\n\t        };\n\t    },\n\n\t    chooseone: function () {\n            console.log(this.data.get('online'));\n        },\n\n\t    attached: function () {\n\t        this.data.set('online', ['errorrik', 'otakustay']);\n\t    }\n\t});\n```\n\nradio\n\n与 checkbox 类似，我们在组件模板中，把需要分组的 radio 将 checked 属性绑定到同名的组件数据中。\n\n你需要手工指定分组 radio 的 name 属性，使浏览器能处理 radio 选择的互斥。可以把它设置成与绑定数据的名称相同。\n\n我们期望 radio 绑定到的数据项是一个 string 。当 radio 被选中时，绑定的数据项值被设置成选中的 radio 的 value 属性值。\n\n```\n    san.defineComponent({\n\t    template: '<div>\n\t\t    <label><input type=\"radio\" on-click=\"chooseone\" value=\"errorrik\"  checked=\"{= online =}\" name=\"online\">errorrik</label>\n\t\t    <label><input type=\"radio\" on-click=\"chooseone\" value=\"otakustay\" checked=\"{= online =}\" name=\"online\">otakustay</label>\n\t\t    <label><input type=\"radio\" on-click=\"chooseone\" value=\"firede\"    checked=\"{= online =}\" name=\"online\">firede</label>\n\t\t</div>',\n\n\t    initData: function () {\n\t        return {\n\t            online: 'errorrik'\n\t        };\n\t    },\n\n\t    chooseone: function () {\n            console.log(this.data.get('online'));\n        },\n\t});\n```\n\nselect\n\nselect 的使用方式和输入框类似，直接对 value 属性应用双向绑定。\n\n在浏览器中，select 的 value 属性并不控制其选中项，select 的选中项是由 option 的 selected 属性控制的。考虑到开发的方便，开发者不需要编写 option 的 selected 属性，San 会在下一个视图更新时间片中刷新 select 的选中状态。\n\n```\n    san.defineComponent({\n\t    template: '<select value=\"{= online =}\" on-change=\"chooseone\">\n\t\t    <option value=\"errorrik\">errorrik</option>\n\t\t    <option value=\"otakustay\">otakustay</option>\n\t\t    <option value=\"firede\">firede</option>\n\t\t</select>',\n\n\t    initData: function () {\n\t        return {\n\t            online: 'errorrik'\n\t        };\n\t    },\n\n\t    chooseone: function () {\n            console.log(this.data.get('online'));\n        },\n\t});\n```","source":"_posts/san2.md","raw":"---\nlayout: post\ntitle: \"San学习笔记 二\"\nsubtitle: \"事件处理及表单提交\"\ndate: 2018-1-6\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - San\n---\n\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 事件处理\n-------------\n\n通过 on- 前缀，可以将事件的处理绑定到组件的方法上，无论是 DOM 事件还是组件的自定义事件，都通过 on- 前缀绑定，没有语法区分。\n\non- + 事件名 将 DOM 元素的事件绑定到组件方法上。当 DOM 事件触发时，组件方法将被调用，this 指向组件实例。\n\n```\n    san.defineComponent({\n\t    template: '\n\t    \t<ul>\n\t\t\t    <li s-for=\"item, index in todos\">\n\t\t\t        <h3>{{ item.title }}</h3>\n\t\t\t        <p>{{ item.desc }}</p>\n\t\t\t        <i class=\"fa fa-trash-o\" on-click=\"rmTodo(item)\"></i>\n\t\t\t    </li>\n\t\t\t</ul>',\n\n\t    rmTodo: function (todo) {\n\t        service.rmTodo(todo.id);\n\t        this.data.remove('todos', todo);\n\t    }\n\t});\n```\n\n$event 是 San 保留的一个特殊变量，指定 $event 将引用到 DOM Event 对象。从而你可以拿到事件触发的 DOM 对象、鼠标事件的鼠标位置等事件信息。\n\n```\n\tsan.defineComponent({\n\t    template: '<button type=\"button\" on-click=\"clicker($event)\">click here</button>',\n\n\t    clicker: function (e) {\n\t        alert(e.target.tagName); // BUTTON\n\t    }\n\t});\n```\n\n\n自定义事件的绑定\n\n```\n\t//定义一个Label组件，此组件会通过调用 fire 方法来派发一个事件\n\tvar Label = san.defineComponent({\n\t    template: '<template class=\"ui-label\" title=\"{{text}}\">{{text}}</template>',\n\n\t    attached: function () {\n\t        this.fire('done', this.data.get('text') + ' done');\n\t    }\n\t});\n\n\tvar MyComponent = san.defineComponent({\n    \tcomponents: {\n\t        'ui-label': Label  \t//这里引入自定义组件Label\n\t    },\n\n\t    template: '<div><ui-label bind-text=\"name\" on-done=\"labelDone($event)\"></ui-label></div>',\n\t    //这里绑定了text为字符串name，绑定了done事件\n\n\t    labelDone: function (doneMsg) {\n\t        alert(doneMsg);\t//组件自身的done事件会派发一个事件，发出一个字符串\n\t    }\n\t});\t\n```\n\n\n\n#### 修饰符\n\n在元素的事件声明中使用 capture 修饰符，事件将被绑定到捕获阶段。\n\n```\n    var MyComponent = san.defineComponent({\n\t    template: ''\n\t        + '<div on-click=\"capture:mainClick\">'\n\t            + '<button on-click=\"capture:btnClick\">click</button>'\n\t        + '</div>',\n\n\t    mainClick: function (title) {\n\t        alert('Main');\n\t    },\n\n\t    btnClick: function (title) {\n\t        alert('Button');\n\t    }\n\t});\n\t// 会先触发mainClick事件再触发btnClick事件，因为是按点击事件的捕获顺序执行的\n```\n\n在组件的事件声明中使用 native 修饰符，事件将被绑定到组件根元素的 DOM 事件。\n\n```\n    var Button = san.defineComponent({\n\t    template: '<a class=\"my-button\"><slot/></a>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'ui-button': Button\n\t    },\n\n\t    template: '<div><ui-button on-click=\"native:clicker(title)\">{{title}}</ui-button></div>',\n\n\t    initData: function () {\n            return {\n                title: 'San'\n            };\n        },\n\n\t    clicker: function (title) {\n\t        alert(title);\n\t    }\n\t});\n\t//点击会显示：San\n```\n\n\n#### 表单\n-------------\n\n输入框的绑定方法比较简单，直接对输入框的 value 属性应用双向绑定就行了。\n\n```\n    <input type=\"text\" value=\"{= name =}\">\n```\n\ncheckbox\n\ncheckbox 常见的使用场景是分组，在组件模板中，我们把需要分组的 checkbox 将 checked 属性双向绑定到同名的组件数据中。\n\n我们期望 checkbox 绑定到的数据项是一个 Array<string> 。当 checkbox 被选中时，其 value 会被添加到绑定的数据项中；当 checkbox 被取消选中时，其 value 会从绑定数据项中移除。\n\n```\n    san.defineComponent({\n\t    template: '<div>\n\t\t    <label><input type=\"checkbox\" on-click=\"chooseone\" value=\"errorrik\" checked=\"{= online =}\">errorrik</label>\n\t\t    <label><input type=\"checkbox\" on-click=\"chooseone\" value=\"otakustay\" checked=\"{= online =}\">otakustay</label>\n\t\t    <label><input type=\"checkbox\" on-click=\"chooseone\" value=\"firede\" checked=\"{= online =}\">firede</label>\n\t\t</div>',\n\n\t    initData: function () {\n\t        return {\n\t            online: []\n\t        };\n\t    },\n\n\t    chooseone: function () {\n            console.log(this.data.get('online'));\n        },\n\n\t    attached: function () {\n\t        this.data.set('online', ['errorrik', 'otakustay']);\n\t    }\n\t});\n```\n\nradio\n\n与 checkbox 类似，我们在组件模板中，把需要分组的 radio 将 checked 属性绑定到同名的组件数据中。\n\n你需要手工指定分组 radio 的 name 属性，使浏览器能处理 radio 选择的互斥。可以把它设置成与绑定数据的名称相同。\n\n我们期望 radio 绑定到的数据项是一个 string 。当 radio 被选中时，绑定的数据项值被设置成选中的 radio 的 value 属性值。\n\n```\n    san.defineComponent({\n\t    template: '<div>\n\t\t    <label><input type=\"radio\" on-click=\"chooseone\" value=\"errorrik\"  checked=\"{= online =}\" name=\"online\">errorrik</label>\n\t\t    <label><input type=\"radio\" on-click=\"chooseone\" value=\"otakustay\" checked=\"{= online =}\" name=\"online\">otakustay</label>\n\t\t    <label><input type=\"radio\" on-click=\"chooseone\" value=\"firede\"    checked=\"{= online =}\" name=\"online\">firede</label>\n\t\t</div>',\n\n\t    initData: function () {\n\t        return {\n\t            online: 'errorrik'\n\t        };\n\t    },\n\n\t    chooseone: function () {\n            console.log(this.data.get('online'));\n        },\n\t});\n```\n\nselect\n\nselect 的使用方式和输入框类似，直接对 value 属性应用双向绑定。\n\n在浏览器中，select 的 value 属性并不控制其选中项，select 的选中项是由 option 的 selected 属性控制的。考虑到开发的方便，开发者不需要编写 option 的 selected 属性，San 会在下一个视图更新时间片中刷新 select 的选中状态。\n\n```\n    san.defineComponent({\n\t    template: '<select value=\"{= online =}\" on-change=\"chooseone\">\n\t\t    <option value=\"errorrik\">errorrik</option>\n\t\t    <option value=\"otakustay\">otakustay</option>\n\t\t    <option value=\"firede\">firede</option>\n\t\t</select>',\n\n\t    initData: function () {\n\t        return {\n\t            online: 'errorrik'\n\t        };\n\t    },\n\n\t    chooseone: function () {\n            console.log(this.data.get('online'));\n        },\n\t});\n```","slug":"san2","published":1,"updated":"2018-01-28T08:57:07.472Z","comments":1,"photos":[],"link":"","_id":"cjkvxydy7001x5xfag2vdyluk","content":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><hr>\n<p>通过 on- 前缀，可以将事件的处理绑定到组件的方法上，无论是 DOM 事件还是组件的自定义事件，都通过 on- 前缀绑定，没有语法区分。</p>\n<p>on- + 事件名 将 DOM 元素的事件绑定到组件方法上。当 DOM 事件触发时，组件方法将被调用，this 指向组件实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;</span><br><span class=\"line\">    \t&lt;ul&gt;</span><br><span class=\"line\">\t\t    &lt;li s-for=&quot;item, index in todos&quot;&gt;</span><br><span class=\"line\">\t\t        &lt;h3&gt;&#123;&#123; item.title &#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\">\t\t        &lt;p&gt;&#123;&#123; item.desc &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">\t\t        &lt;i class=&quot;fa fa-trash-o&quot; on-click=&quot;rmTodo(item)&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">\t\t    &lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    rmTodo: function (todo) &#123;</span><br><span class=\"line\">        service.rmTodo(todo.id);</span><br><span class=\"line\">        this.data.remove(&apos;todos&apos;, todo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>$event 是 San 保留的一个特殊变量，指定 $event 将引用到 DOM Event 对象。从而你可以拿到事件触发的 DOM 对象、鼠标事件的鼠标位置等事件信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;button type=&quot;button&quot; on-click=&quot;clicker($event)&quot;&gt;click here&lt;/button&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    clicker: function (e) &#123;</span><br><span class=\"line\">        alert(e.target.tagName); // BUTTON</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>自定义事件的绑定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个Label组件，此组件会通过调用 fire 方法来派发一个事件</span><br><span class=\"line\">var Label = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;template class=&quot;ui-label&quot; title=&quot;&#123;&#123;text&#125;&#125;&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/template&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.fire(&apos;done&apos;, this.data.get(&apos;text&apos;) + &apos; done&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">   \tcomponents: &#123;</span><br><span class=\"line\">        &apos;ui-label&apos;: Label  \t//这里引入自定义组件Label</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-label bind-text=&quot;name&quot; on-done=&quot;labelDone($event)&quot;&gt;&lt;/ui-label&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\">    //这里绑定了text为字符串name，绑定了done事件</span><br><span class=\"line\"></span><br><span class=\"line\">    labelDone: function (doneMsg) &#123;</span><br><span class=\"line\">        alert(doneMsg);\t//组件自身的done事件会派发一个事件，发出一个字符串</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><p>在元素的事件声明中使用 capture 修饰符，事件将被绑定到捕获阶段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div on-click=&quot;capture:mainClick&quot;&gt;&apos;</span><br><span class=\"line\">            + &apos;&lt;button on-click=&quot;capture:btnClick&quot;&gt;click&lt;/button&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    mainClick: function (title) &#123;</span><br><span class=\"line\">        alert(&apos;Main&apos;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    btnClick: function (title) &#123;</span><br><span class=\"line\">        alert(&apos;Button&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 会先触发mainClick事件再触发btnClick事件，因为是按点击事件的捕获顺序执行的</span><br></pre></td></tr></table></figure>\n<p>在组件的事件声明中使用 native 修饰符，事件将被绑定到组件根元素的 DOM 事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Button = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;a class=&quot;my-button&quot;&gt;&lt;slot/&gt;&lt;/a&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;ui-button&apos;: Button</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-button on-click=&quot;native:clicker(title)&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/ui-button&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">           return &#123;</span><br><span class=\"line\">               title: &apos;San&apos;</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    clicker: function (title) &#123;</span><br><span class=\"line\">        alert(title);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//点击会显示：San</span><br></pre></td></tr></table></figure>\n<h4 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h4><hr>\n<p>输入框的绑定方法比较简单，直接对输入框的 value 属性应用双向绑定就行了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;&#123;= name =&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>checkbox</p>\n<p>checkbox 常见的使用场景是分组，在组件模板中，我们把需要分组的 checkbox 将 checked 属性双向绑定到同名的组件数据中。</p>\n<p>我们期望 checkbox 绑定到的数据项是一个 Array<string> 。当 checkbox 被选中时，其 value 会被添加到绑定的数据项中；当 checkbox 被取消选中时，其 value 会从绑定数据项中移除。</string></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;checkbox&quot; on-click=&quot;chooseone&quot; value=&quot;errorrik&quot; checked=&quot;&#123;= online =&#125;&quot;&gt;errorrik&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;checkbox&quot; on-click=&quot;chooseone&quot; value=&quot;otakustay&quot; checked=&quot;&#123;= online =&#125;&quot;&gt;otakustay&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;checkbox&quot; on-click=&quot;chooseone&quot; value=&quot;firede&quot; checked=&quot;&#123;= online =&#125;&quot;&gt;firede&lt;/label&gt;</span><br><span class=\"line\">\t&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            online: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chooseone: function () &#123;</span><br><span class=\"line\">           console.log(this.data.get(&apos;online&apos;));</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;online&apos;, [&apos;errorrik&apos;, &apos;otakustay&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>radio</p>\n<p>与 checkbox 类似，我们在组件模板中，把需要分组的 radio 将 checked 属性绑定到同名的组件数据中。</p>\n<p>你需要手工指定分组 radio 的 name 属性，使浏览器能处理 radio 选择的互斥。可以把它设置成与绑定数据的名称相同。</p>\n<p>我们期望 radio 绑定到的数据项是一个 string 。当 radio 被选中时，绑定的数据项值被设置成选中的 radio 的 value 属性值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;radio&quot; on-click=&quot;chooseone&quot; value=&quot;errorrik&quot;  checked=&quot;&#123;= online =&#125;&quot; name=&quot;online&quot;&gt;errorrik&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;radio&quot; on-click=&quot;chooseone&quot; value=&quot;otakustay&quot; checked=&quot;&#123;= online =&#125;&quot; name=&quot;online&quot;&gt;otakustay&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;radio&quot; on-click=&quot;chooseone&quot; value=&quot;firede&quot;    checked=&quot;&#123;= online =&#125;&quot; name=&quot;online&quot;&gt;firede&lt;/label&gt;</span><br><span class=\"line\">\t&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            online: &apos;errorrik&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chooseone: function () &#123;</span><br><span class=\"line\">           console.log(this.data.get(&apos;online&apos;));</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>select</p>\n<p>select 的使用方式和输入框类似，直接对 value 属性应用双向绑定。</p>\n<p>在浏览器中，select 的 value 属性并不控制其选中项，select 的选中项是由 option 的 selected 属性控制的。考虑到开发的方便，开发者不需要编写 option 的 selected 属性，San 会在下一个视图更新时间片中刷新 select 的选中状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;select value=&quot;&#123;= online =&#125;&quot; on-change=&quot;chooseone&quot;&gt;</span><br><span class=\"line\">\t    &lt;option value=&quot;errorrik&quot;&gt;errorrik&lt;/option&gt;</span><br><span class=\"line\">\t    &lt;option value=&quot;otakustay&quot;&gt;otakustay&lt;/option&gt;</span><br><span class=\"line\">\t    &lt;option value=&quot;firede&quot;&gt;firede&lt;/option&gt;</span><br><span class=\"line\">\t&lt;/select&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            online: &apos;errorrik&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chooseone: function () &#123;</span><br><span class=\"line\">           console.log(this.data.get(&apos;online&apos;));</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><hr>\n<p>通过 on- 前缀，可以将事件的处理绑定到组件的方法上，无论是 DOM 事件还是组件的自定义事件，都通过 on- 前缀绑定，没有语法区分。</p>\n<p>on- + 事件名 将 DOM 元素的事件绑定到组件方法上。当 DOM 事件触发时，组件方法将被调用，this 指向组件实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;</span><br><span class=\"line\">    \t&lt;ul&gt;</span><br><span class=\"line\">\t\t    &lt;li s-for=&quot;item, index in todos&quot;&gt;</span><br><span class=\"line\">\t\t        &lt;h3&gt;&#123;&#123; item.title &#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\">\t\t        &lt;p&gt;&#123;&#123; item.desc &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">\t\t        &lt;i class=&quot;fa fa-trash-o&quot; on-click=&quot;rmTodo(item)&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">\t\t    &lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    rmTodo: function (todo) &#123;</span><br><span class=\"line\">        service.rmTodo(todo.id);</span><br><span class=\"line\">        this.data.remove(&apos;todos&apos;, todo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>$event 是 San 保留的一个特殊变量，指定 $event 将引用到 DOM Event 对象。从而你可以拿到事件触发的 DOM 对象、鼠标事件的鼠标位置等事件信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;button type=&quot;button&quot; on-click=&quot;clicker($event)&quot;&gt;click here&lt;/button&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    clicker: function (e) &#123;</span><br><span class=\"line\">        alert(e.target.tagName); // BUTTON</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>自定义事件的绑定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个Label组件，此组件会通过调用 fire 方法来派发一个事件</span><br><span class=\"line\">var Label = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;template class=&quot;ui-label&quot; title=&quot;&#123;&#123;text&#125;&#125;&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/template&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.fire(&apos;done&apos;, this.data.get(&apos;text&apos;) + &apos; done&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">   \tcomponents: &#123;</span><br><span class=\"line\">        &apos;ui-label&apos;: Label  \t//这里引入自定义组件Label</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-label bind-text=&quot;name&quot; on-done=&quot;labelDone($event)&quot;&gt;&lt;/ui-label&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\">    //这里绑定了text为字符串name，绑定了done事件</span><br><span class=\"line\"></span><br><span class=\"line\">    labelDone: function (doneMsg) &#123;</span><br><span class=\"line\">        alert(doneMsg);\t//组件自身的done事件会派发一个事件，发出一个字符串</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><p>在元素的事件声明中使用 capture 修饰符，事件将被绑定到捕获阶段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div on-click=&quot;capture:mainClick&quot;&gt;&apos;</span><br><span class=\"line\">            + &apos;&lt;button on-click=&quot;capture:btnClick&quot;&gt;click&lt;/button&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    mainClick: function (title) &#123;</span><br><span class=\"line\">        alert(&apos;Main&apos;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    btnClick: function (title) &#123;</span><br><span class=\"line\">        alert(&apos;Button&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 会先触发mainClick事件再触发btnClick事件，因为是按点击事件的捕获顺序执行的</span><br></pre></td></tr></table></figure>\n<p>在组件的事件声明中使用 native 修饰符，事件将被绑定到组件根元素的 DOM 事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Button = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;a class=&quot;my-button&quot;&gt;&lt;slot/&gt;&lt;/a&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;ui-button&apos;: Button</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-button on-click=&quot;native:clicker(title)&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/ui-button&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">           return &#123;</span><br><span class=\"line\">               title: &apos;San&apos;</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    clicker: function (title) &#123;</span><br><span class=\"line\">        alert(title);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//点击会显示：San</span><br></pre></td></tr></table></figure>\n<h4 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h4><hr>\n<p>输入框的绑定方法比较简单，直接对输入框的 value 属性应用双向绑定就行了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;&#123;= name =&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>checkbox</p>\n<p>checkbox 常见的使用场景是分组，在组件模板中，我们把需要分组的 checkbox 将 checked 属性双向绑定到同名的组件数据中。</p>\n<p>我们期望 checkbox 绑定到的数据项是一个 Array<string> 。当 checkbox 被选中时，其 value 会被添加到绑定的数据项中；当 checkbox 被取消选中时，其 value 会从绑定数据项中移除。</string></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;checkbox&quot; on-click=&quot;chooseone&quot; value=&quot;errorrik&quot; checked=&quot;&#123;= online =&#125;&quot;&gt;errorrik&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;checkbox&quot; on-click=&quot;chooseone&quot; value=&quot;otakustay&quot; checked=&quot;&#123;= online =&#125;&quot;&gt;otakustay&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;checkbox&quot; on-click=&quot;chooseone&quot; value=&quot;firede&quot; checked=&quot;&#123;= online =&#125;&quot;&gt;firede&lt;/label&gt;</span><br><span class=\"line\">\t&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            online: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chooseone: function () &#123;</span><br><span class=\"line\">           console.log(this.data.get(&apos;online&apos;));</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;online&apos;, [&apos;errorrik&apos;, &apos;otakustay&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>radio</p>\n<p>与 checkbox 类似，我们在组件模板中，把需要分组的 radio 将 checked 属性绑定到同名的组件数据中。</p>\n<p>你需要手工指定分组 radio 的 name 属性，使浏览器能处理 radio 选择的互斥。可以把它设置成与绑定数据的名称相同。</p>\n<p>我们期望 radio 绑定到的数据项是一个 string 。当 radio 被选中时，绑定的数据项值被设置成选中的 radio 的 value 属性值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;radio&quot; on-click=&quot;chooseone&quot; value=&quot;errorrik&quot;  checked=&quot;&#123;= online =&#125;&quot; name=&quot;online&quot;&gt;errorrik&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;radio&quot; on-click=&quot;chooseone&quot; value=&quot;otakustay&quot; checked=&quot;&#123;= online =&#125;&quot; name=&quot;online&quot;&gt;otakustay&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;radio&quot; on-click=&quot;chooseone&quot; value=&quot;firede&quot;    checked=&quot;&#123;= online =&#125;&quot; name=&quot;online&quot;&gt;firede&lt;/label&gt;</span><br><span class=\"line\">\t&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            online: &apos;errorrik&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chooseone: function () &#123;</span><br><span class=\"line\">           console.log(this.data.get(&apos;online&apos;));</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>select</p>\n<p>select 的使用方式和输入框类似，直接对 value 属性应用双向绑定。</p>\n<p>在浏览器中，select 的 value 属性并不控制其选中项，select 的选中项是由 option 的 selected 属性控制的。考虑到开发的方便，开发者不需要编写 option 的 selected 属性，San 会在下一个视图更新时间片中刷新 select 的选中状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;select value=&quot;&#123;= online =&#125;&quot; on-change=&quot;chooseone&quot;&gt;</span><br><span class=\"line\">\t    &lt;option value=&quot;errorrik&quot;&gt;errorrik&lt;/option&gt;</span><br><span class=\"line\">\t    &lt;option value=&quot;otakustay&quot;&gt;otakustay&lt;/option&gt;</span><br><span class=\"line\">\t    &lt;option value=&quot;firede&quot;&gt;firede&lt;/option&gt;</span><br><span class=\"line\">\t&lt;/select&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            online: &apos;errorrik&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chooseone: function () &#123;</span><br><span class=\"line\">           console.log(this.data.get(&apos;online&apos;));</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"San学习笔记 三","subtitle":"插槽","date":"2018-01-08T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 插槽\n-------------\n\n在视图模板中可以通过 slot 声明一个插槽的位置，其位置的内容可以由外层组件定义。\n\n```\n    var Panel = san.defineComponent({\n\t    template: '<div>'\n\t        + '  <div class=\"head\" on-click=\"toggle\">title</div>'\n\t        + '  <p><slot></slot></p>'\n\t        + '</div>',\n\n\t    initData: function () {\n\t        return {name: 'Panel'};\n\t    }\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'ui-panel': Panel\n\t    },\n\n\t    template: '<div><ui-panel>I am {{name}}</ui-panel></div>',\n\n\t    initData: function () {\n\t        return {name: 'MyComponent'};\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t  <div class=\"head\">title</div>\n\t  <p>I am MyComponent</p>\n\t</div>\n\t*/\n```\n\n可以看到，MyComponent组件中传入的信息插在了Panel组件提供的slot插槽中，并且其数据环境为 声明时的环境，即name取值为'MyComponent'\n\n那么如果想要给组件的不同位置插入信息该怎么办呢？就需要对插槽进行命名。\n\n一个视图模板的声明可以包含一个默认 slot 和多个命名 slot。外层组件的元素通过 slot=\"name\" 的属性声明，可以指定自身的插入点。\n\n```\n    var Tab = san.defineComponent({\n\t    template: '<div>'\n\t        + '  <header><slot name=\"title\"></slot></header>'\n\t        + '  <main><slot></slot></main>'\n\t        + '</div>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'ui-tab': Tab\n\t    },\n\n\t    template: '<div><ui-tab>'\n\t        + '<h3 slot=\"title\">1</h3><p>one</p>'\n\t        + '<h3 slot=\"title\">2</h3><p>two<a slot=\"title\">slot fail</a></p>'\n\t        + '</ui-tab></div>'\n\t});\n\n\t/* MyComponent渲染结果，a 元素无法被插入 title slot\n\t<div>\n\t  <header><h3>1</h3><h3>2</h3></header>\n\t  <main><p>one</p><p>two<a>slot fail</a></p></main>\n\t</div>\n\t*/\n```\n\n可见拥有title的slot属性的信息被插入到了组件的name=‘title’的插槽中，但是这里有个问题，那就是 外层组件的替换元素，只有在直接子元素上才能声明 slot=\"name\" 指定自身的插入点。\n\n\n在 slot 声明时应用 if 或 for 指令，可以让插槽根据组件数据动态化。\n\npanel 的 hidden 属性为 true 时，panel 中默认插槽将不会渲染，仅包含 title 插槽，通过 slot 方法获取的数组长度为 0。\n\n也就是说，传入panel的hidden属性为true，所以除了name=\"title\"之外的slot都不会渲染，所以最终只出现了title部分，而desc部分没有渲染出来。\n\n而for指令的用法类似if指令。\n\n```\n    var Panel = san.defineComponent({\n\t    template: '<div><slot name=\"title\"/><slot s-if=\"!hidden\"/></div>',\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t      'x-panel': Panel\n\t    },\n\n\t    template: ''\n\t        + '<div>'\n\t          + '<x-panel hidden=\"{{folderHidden}}\" s-ref=\"panel\">'\n\t              + '<b slot=\"title\">{{name}}</b>'\n\t              + '<p>{{desc}}</p>'\n\t          + '</x-panel>'\n\t        + '</div>',\n\n\t    attached: function () {\n\t        // 0\n\t        this.ref('panel').slot().length\n\t    }\n\t});\n\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        folderHidden: true,\n\t        desc: 'MVVM component framework',\n\t        name: 'San'\n\t    }\n\t});\n\n\t/* MyComponent渲染结果，hidden为true所以不包含default slot\n\t<div>\n\t    <b>San</b>\n\t</div>\n\t*/\n```\n\n\n#### scoped 插槽\n\n如果 slot 声明中包含 1 个以上 var- 数据前缀声明，该 slot 为 scoped slot。scoped slot 具有独立的 数据环境，其中仅包含 var- 声明的数据。scoped 数据声明的形式为 var-name=”expression”。\n\nscoped slot 通常用于组件的视图部分期望由 外部传入视图结构，渲染过程使用组件内部数据。\n\n但是在此例子中组件使用的数据依旧是外部传入的，有点混淆，其实是从MyComponent中定义了组件结构，并在对应的信息位置放置了变量，这些变量都将在Men组件内部来定义，组件中的p标签并没有意义，去除结果也是一样的，这里只是负责把数据定义出来就可以了\n\n```\n    var Men = san.defineComponent({\n\t    template: '<div>'\n\t      + '<slot s-for=\"item in data\" var-n=\"item.name\" var-email=\"item.email\" var-sex=\"item.sex ? \\'male\\' : \\'female\\'\">'\n\t        + '<p>{{n}},{{sex}},{{email}}</p>'\n\t      + '</slot>'\n\t      + '</div>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'x-men': Men\n\t    },\n\n\t    template: '<div><x-men data=\"{{men}}\" s-ref=\"men\">'\n\t          + '<h3>{{n}}</h3>'\n\t          + '<p><b>{{sex}}</b><u>{{email}}</u></p>'\n\t        + '</x-men></div>',\n\n\t    attached: function () {\n\t        var slots = this.ref('men').slot();\n\n\t        // 3\n\t        slots.length\n\n\t        // truthy\n\t        slots[0].isInserted\n\n\t        // truthy\n\t        contentSlot.isScoped\n\t    }\n\t});\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        men: [\n\t            {name: 'errorrik', sex: 1, email: 'errorrik@gmail.com'},\n\t            {name: 'leeight', sex: 0, email: 'leeight@gmail.com'},\n\t            {name: 'otakustay', email: 'otakustay@gmail.com', sex: 1}\n\t        ]\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t    <h3>errorrik</h3>\n\t    <p><b>male</b><u>errorrik@gmail.com</u></p>\n\t    <h3>leeight</h3>\n\t    <p><b>female</b><u>leeight@gmail.com</u></p>\n\t    <h3>otakustay</h3>\n\t    <p><b>male</b><u>otakustay@gmail.com</u></p>\n\t</div>\n\t*/\n```\n\nscoped slot 中，除了可以访问 var- 声明的数据外，还可以访问当前环境的数据。\n\n* 使用 slot 默认内容时，可以访问组件内部环境数据\n* 外层组件定义的 slot 内容，可以访问外层组件环境的数据\n\n```\n    var Man = san.defineComponent({\n\t    template: '<p>'\n\t      +   '<slot var-n=\"who.name\" var-email=\"who.email\">'\n\t      +     '{{n}},{{email}},{{country}}'\n\t      +   '</slot>'\n\t      + '</p>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'x-man': Man\n\t    },\n\n\t    template: ''\n\t        + '<div><x-man who=\"{{man}}\" country=\"{{country}}\">'\n\t        +   '<b>{{n}} - {{province}}</b>'\n\t        +   '<u>{{email}}</u>'\n\t        + '</x-man></div>'\n\t});\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        man: {\n\t            name: 'errorrik', \n\t            email: 'errorrik@gmail.com'\n\t        },\n\t        country: 'China',\n\t        province: 'HN'\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t    <p>\n\t        <b>errorrik - HN</b>\n\t        <u>errorrik@gmail.com</u>\n\t    </p>\n\t</div>\n\t*/\n```\n\n这里组件中的n,province和email三个变量中province未在组件内部进行定义，所以可以取到父组件中定义的内容，即HN，但是如果稍加修改如下\n\n```\n\t<slot var-n=\"who.name\" var-email=\"who.email\" var-province=\"who.province\">\n\t\t'{{n}},{{email}},{{country}},{{province}}'\n\n\tman: {\n        name: 'errorrik', \n        email: 'errorrik@gmail.com',\n        province: 'CN'\n    },\n```\n\n即在组件内部定义一个province变量，那么就可以覆盖掉父组件中的对应值，可见slot优先使用组件内部值\n\n\n#### 动态命名\n-------------\n\nslot 声明中，组件可以使用当前的数据环境进行命名，从而提供动态的插槽。插槽的动态命名常用于 组件结构根据数据生成 的场景下，比如表格组件。\n\n这里table组件中就进行了动态命名，当name=“col-name”时，父组件定义的b标签就会插入进去，从而实现在列表中加粗姓名的效果。\n\n```\n    var Table = san.defineComponent({\n\t    template: ''\n\t        + '<table>'\n\t        +   '<thead><tr><th s-for=\"col in columns\">{{col.label}}</th></tr></thead>'\n\t        +   '<tbody>'\n\t        +     '<tr s-for=\"row in datasource\">'\n\t        +       '<td s-for=\"col in columns\">'\n\t        +         '<slot name=\"col-{{col.name}}\" var-row=\"row\" var-col=\"col\">{{row[col.name]}}</slot>'\n\t        +       '</td>'\n\t        + '    </tr>'\n\t        +   '</tbody>'\n\t        + '</table>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'x-table': Table\n\t    },\n\n\t    template: ''\n\t        + '<div>'\n\t        +   '<x-table columns=\"{{columns}}\" datasource=\"{{list}}\">'\n\t        +     '<b slot=\"col-name\">{{row.name}}</b>'\n\t        +   '</x-table>'\n\t        + '</div>'\n\n\t});\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        columns: [\n\t            {name: 'name', label: '名'},\n\t            {name: 'email', label: '邮'}\n\t        ],\n\t        list: [\n\t            {name: 'errorrik', email: 'errorrik@gmail.com'},\n\t            {name: 'leeight', email: 'leeight@gmail.com'}\n\t        ]\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t    <table>\n\t        <thead>\n\t            <tr>\n\t                <th>名</th>\n\t                <th>邮</th>\n\t            </tr>\n\t        </thead>\n\t        <tbody>\n\t            <tr>\n\t                <td><b>errorrik</b></td>\n\t                <td>errorrik@gmail.com</td>\n\t            </tr>\n\t            <tr>\n\t                <td><b>leeight</b></td>\n\t                <td>leeight@gmail.com</td>\n\t            </tr>\n\t        </tbody>\n\t    </table>\n\t</div>\n\t*/\n```\n\n","source":"_posts/san3.md","raw":"---\nlayout: post\ntitle: \"San学习笔记 三\"\nsubtitle: \"插槽\"\ndate: 2018-1-9\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - San\n---\n\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 插槽\n-------------\n\n在视图模板中可以通过 slot 声明一个插槽的位置，其位置的内容可以由外层组件定义。\n\n```\n    var Panel = san.defineComponent({\n\t    template: '<div>'\n\t        + '  <div class=\"head\" on-click=\"toggle\">title</div>'\n\t        + '  <p><slot></slot></p>'\n\t        + '</div>',\n\n\t    initData: function () {\n\t        return {name: 'Panel'};\n\t    }\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'ui-panel': Panel\n\t    },\n\n\t    template: '<div><ui-panel>I am {{name}}</ui-panel></div>',\n\n\t    initData: function () {\n\t        return {name: 'MyComponent'};\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t  <div class=\"head\">title</div>\n\t  <p>I am MyComponent</p>\n\t</div>\n\t*/\n```\n\n可以看到，MyComponent组件中传入的信息插在了Panel组件提供的slot插槽中，并且其数据环境为 声明时的环境，即name取值为'MyComponent'\n\n那么如果想要给组件的不同位置插入信息该怎么办呢？就需要对插槽进行命名。\n\n一个视图模板的声明可以包含一个默认 slot 和多个命名 slot。外层组件的元素通过 slot=\"name\" 的属性声明，可以指定自身的插入点。\n\n```\n    var Tab = san.defineComponent({\n\t    template: '<div>'\n\t        + '  <header><slot name=\"title\"></slot></header>'\n\t        + '  <main><slot></slot></main>'\n\t        + '</div>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'ui-tab': Tab\n\t    },\n\n\t    template: '<div><ui-tab>'\n\t        + '<h3 slot=\"title\">1</h3><p>one</p>'\n\t        + '<h3 slot=\"title\">2</h3><p>two<a slot=\"title\">slot fail</a></p>'\n\t        + '</ui-tab></div>'\n\t});\n\n\t/* MyComponent渲染结果，a 元素无法被插入 title slot\n\t<div>\n\t  <header><h3>1</h3><h3>2</h3></header>\n\t  <main><p>one</p><p>two<a>slot fail</a></p></main>\n\t</div>\n\t*/\n```\n\n可见拥有title的slot属性的信息被插入到了组件的name=‘title’的插槽中，但是这里有个问题，那就是 外层组件的替换元素，只有在直接子元素上才能声明 slot=\"name\" 指定自身的插入点。\n\n\n在 slot 声明时应用 if 或 for 指令，可以让插槽根据组件数据动态化。\n\npanel 的 hidden 属性为 true 时，panel 中默认插槽将不会渲染，仅包含 title 插槽，通过 slot 方法获取的数组长度为 0。\n\n也就是说，传入panel的hidden属性为true，所以除了name=\"title\"之外的slot都不会渲染，所以最终只出现了title部分，而desc部分没有渲染出来。\n\n而for指令的用法类似if指令。\n\n```\n    var Panel = san.defineComponent({\n\t    template: '<div><slot name=\"title\"/><slot s-if=\"!hidden\"/></div>',\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t      'x-panel': Panel\n\t    },\n\n\t    template: ''\n\t        + '<div>'\n\t          + '<x-panel hidden=\"{{folderHidden}}\" s-ref=\"panel\">'\n\t              + '<b slot=\"title\">{{name}}</b>'\n\t              + '<p>{{desc}}</p>'\n\t          + '</x-panel>'\n\t        + '</div>',\n\n\t    attached: function () {\n\t        // 0\n\t        this.ref('panel').slot().length\n\t    }\n\t});\n\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        folderHidden: true,\n\t        desc: 'MVVM component framework',\n\t        name: 'San'\n\t    }\n\t});\n\n\t/* MyComponent渲染结果，hidden为true所以不包含default slot\n\t<div>\n\t    <b>San</b>\n\t</div>\n\t*/\n```\n\n\n#### scoped 插槽\n\n如果 slot 声明中包含 1 个以上 var- 数据前缀声明，该 slot 为 scoped slot。scoped slot 具有独立的 数据环境，其中仅包含 var- 声明的数据。scoped 数据声明的形式为 var-name=”expression”。\n\nscoped slot 通常用于组件的视图部分期望由 外部传入视图结构，渲染过程使用组件内部数据。\n\n但是在此例子中组件使用的数据依旧是外部传入的，有点混淆，其实是从MyComponent中定义了组件结构，并在对应的信息位置放置了变量，这些变量都将在Men组件内部来定义，组件中的p标签并没有意义，去除结果也是一样的，这里只是负责把数据定义出来就可以了\n\n```\n    var Men = san.defineComponent({\n\t    template: '<div>'\n\t      + '<slot s-for=\"item in data\" var-n=\"item.name\" var-email=\"item.email\" var-sex=\"item.sex ? \\'male\\' : \\'female\\'\">'\n\t        + '<p>{{n}},{{sex}},{{email}}</p>'\n\t      + '</slot>'\n\t      + '</div>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'x-men': Men\n\t    },\n\n\t    template: '<div><x-men data=\"{{men}}\" s-ref=\"men\">'\n\t          + '<h3>{{n}}</h3>'\n\t          + '<p><b>{{sex}}</b><u>{{email}}</u></p>'\n\t        + '</x-men></div>',\n\n\t    attached: function () {\n\t        var slots = this.ref('men').slot();\n\n\t        // 3\n\t        slots.length\n\n\t        // truthy\n\t        slots[0].isInserted\n\n\t        // truthy\n\t        contentSlot.isScoped\n\t    }\n\t});\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        men: [\n\t            {name: 'errorrik', sex: 1, email: 'errorrik@gmail.com'},\n\t            {name: 'leeight', sex: 0, email: 'leeight@gmail.com'},\n\t            {name: 'otakustay', email: 'otakustay@gmail.com', sex: 1}\n\t        ]\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t    <h3>errorrik</h3>\n\t    <p><b>male</b><u>errorrik@gmail.com</u></p>\n\t    <h3>leeight</h3>\n\t    <p><b>female</b><u>leeight@gmail.com</u></p>\n\t    <h3>otakustay</h3>\n\t    <p><b>male</b><u>otakustay@gmail.com</u></p>\n\t</div>\n\t*/\n```\n\nscoped slot 中，除了可以访问 var- 声明的数据外，还可以访问当前环境的数据。\n\n* 使用 slot 默认内容时，可以访问组件内部环境数据\n* 外层组件定义的 slot 内容，可以访问外层组件环境的数据\n\n```\n    var Man = san.defineComponent({\n\t    template: '<p>'\n\t      +   '<slot var-n=\"who.name\" var-email=\"who.email\">'\n\t      +     '{{n}},{{email}},{{country}}'\n\t      +   '</slot>'\n\t      + '</p>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'x-man': Man\n\t    },\n\n\t    template: ''\n\t        + '<div><x-man who=\"{{man}}\" country=\"{{country}}\">'\n\t        +   '<b>{{n}} - {{province}}</b>'\n\t        +   '<u>{{email}}</u>'\n\t        + '</x-man></div>'\n\t});\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        man: {\n\t            name: 'errorrik', \n\t            email: 'errorrik@gmail.com'\n\t        },\n\t        country: 'China',\n\t        province: 'HN'\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t    <p>\n\t        <b>errorrik - HN</b>\n\t        <u>errorrik@gmail.com</u>\n\t    </p>\n\t</div>\n\t*/\n```\n\n这里组件中的n,province和email三个变量中province未在组件内部进行定义，所以可以取到父组件中定义的内容，即HN，但是如果稍加修改如下\n\n```\n\t<slot var-n=\"who.name\" var-email=\"who.email\" var-province=\"who.province\">\n\t\t'{{n}},{{email}},{{country}},{{province}}'\n\n\tman: {\n        name: 'errorrik', \n        email: 'errorrik@gmail.com',\n        province: 'CN'\n    },\n```\n\n即在组件内部定义一个province变量，那么就可以覆盖掉父组件中的对应值，可见slot优先使用组件内部值\n\n\n#### 动态命名\n-------------\n\nslot 声明中，组件可以使用当前的数据环境进行命名，从而提供动态的插槽。插槽的动态命名常用于 组件结构根据数据生成 的场景下，比如表格组件。\n\n这里table组件中就进行了动态命名，当name=“col-name”时，父组件定义的b标签就会插入进去，从而实现在列表中加粗姓名的效果。\n\n```\n    var Table = san.defineComponent({\n\t    template: ''\n\t        + '<table>'\n\t        +   '<thead><tr><th s-for=\"col in columns\">{{col.label}}</th></tr></thead>'\n\t        +   '<tbody>'\n\t        +     '<tr s-for=\"row in datasource\">'\n\t        +       '<td s-for=\"col in columns\">'\n\t        +         '<slot name=\"col-{{col.name}}\" var-row=\"row\" var-col=\"col\">{{row[col.name]}}</slot>'\n\t        +       '</td>'\n\t        + '    </tr>'\n\t        +   '</tbody>'\n\t        + '</table>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'x-table': Table\n\t    },\n\n\t    template: ''\n\t        + '<div>'\n\t        +   '<x-table columns=\"{{columns}}\" datasource=\"{{list}}\">'\n\t        +     '<b slot=\"col-name\">{{row.name}}</b>'\n\t        +   '</x-table>'\n\t        + '</div>'\n\n\t});\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        columns: [\n\t            {name: 'name', label: '名'},\n\t            {name: 'email', label: '邮'}\n\t        ],\n\t        list: [\n\t            {name: 'errorrik', email: 'errorrik@gmail.com'},\n\t            {name: 'leeight', email: 'leeight@gmail.com'}\n\t        ]\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t    <table>\n\t        <thead>\n\t            <tr>\n\t                <th>名</th>\n\t                <th>邮</th>\n\t            </tr>\n\t        </thead>\n\t        <tbody>\n\t            <tr>\n\t                <td><b>errorrik</b></td>\n\t                <td>errorrik@gmail.com</td>\n\t            </tr>\n\t            <tr>\n\t                <td><b>leeight</b></td>\n\t                <td>leeight@gmail.com</td>\n\t            </tr>\n\t        </tbody>\n\t    </table>\n\t</div>\n\t*/\n```\n\n","slug":"san3","published":1,"updated":"2018-01-31T04:59:51.367Z","comments":1,"photos":[],"link":"","_id":"cjkvxydy800205xfav72oyrn5","content":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><hr>\n<p>在视图模板中可以通过 slot 声明一个插槽的位置，其位置的内容可以由外层组件定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Panel = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;div class=&quot;head&quot; on-click=&quot;toggle&quot;&gt;title&lt;/div&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;p&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;name: &apos;Panel&apos;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;ui-panel&apos;: Panel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-panel&gt;I am &#123;&#123;name&#125;&#125;&lt;/ui-panel&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;name: &apos;MyComponent&apos;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;head&quot;&gt;title&lt;/div&gt;</span><br><span class=\"line\">  &lt;p&gt;I am MyComponent&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>可以看到，MyComponent组件中传入的信息插在了Panel组件提供的slot插槽中，并且其数据环境为 声明时的环境，即name取值为’MyComponent’</p>\n<p>那么如果想要给组件的不同位置插入信息该怎么办呢？就需要对插槽进行命名。</p>\n<p>一个视图模板的声明可以包含一个默认 slot 和多个命名 slot。外层组件的元素通过 slot=”name” 的属性声明，可以指定自身的插入点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Tab = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;header&gt;&lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;&lt;/header&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;main&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/main&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;ui-tab&apos;: Tab</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-tab&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;h3 slot=&quot;title&quot;&gt;1&lt;/h3&gt;&lt;p&gt;one&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;h3 slot=&quot;title&quot;&gt;2&lt;/h3&gt;&lt;p&gt;two&lt;a slot=&quot;title&quot;&gt;slot fail&lt;/a&gt;&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/ui-tab&gt;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果，a 元素无法被插入 title slot</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;header&gt;&lt;h3&gt;1&lt;/h3&gt;&lt;h3&gt;2&lt;/h3&gt;&lt;/header&gt;</span><br><span class=\"line\">  &lt;main&gt;&lt;p&gt;one&lt;/p&gt;&lt;p&gt;two&lt;a&gt;slot fail&lt;/a&gt;&lt;/p&gt;&lt;/main&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>可见拥有title的slot属性的信息被插入到了组件的name=‘title’的插槽中，但是这里有个问题，那就是 外层组件的替换元素，只有在直接子元素上才能声明 slot=”name” 指定自身的插入点。</p>\n<p>在 slot 声明时应用 if 或 for 指令，可以让插槽根据组件数据动态化。</p>\n<p>panel 的 hidden 属性为 true 时，panel 中默认插槽将不会渲染，仅包含 title 插槽，通过 slot 方法获取的数组长度为 0。</p>\n<p>也就是说，传入panel的hidden属性为true，所以除了name=”title”之外的slot都不会渲染，所以最终只出现了title部分，而desc部分没有渲染出来。</p>\n<p>而for指令的用法类似if指令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Panel = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;slot name=&quot;title&quot;/&gt;&lt;slot s-if=&quot;!hidden&quot;/&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      &apos;x-panel&apos;: Panel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;x-panel hidden=&quot;&#123;&#123;folderHidden&#125;&#125;&quot; s-ref=&quot;panel&quot;&gt;&apos;</span><br><span class=\"line\">              + &apos;&lt;b slot=&quot;title&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/b&gt;&apos;</span><br><span class=\"line\">              + &apos;&lt;p&gt;&#123;&#123;desc&#125;&#125;&lt;/p&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;/x-panel&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        // 0</span><br><span class=\"line\">        this.ref(&apos;panel&apos;).slot().length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        folderHidden: true,</span><br><span class=\"line\">        desc: &apos;MVVM component framework&apos;,</span><br><span class=\"line\">        name: &apos;San&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果，hidden为true所以不包含default slot</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;b&gt;San&lt;/b&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<h4 id=\"scoped-插槽\"><a href=\"#scoped-插槽\" class=\"headerlink\" title=\"scoped 插槽\"></a>scoped 插槽</h4><p>如果 slot 声明中包含 1 个以上 var- 数据前缀声明，该 slot 为 scoped slot。scoped slot 具有独立的 数据环境，其中仅包含 var- 声明的数据。scoped 数据声明的形式为 var-name=”expression”。</p>\n<p>scoped slot 通常用于组件的视图部分期望由 外部传入视图结构，渲染过程使用组件内部数据。</p>\n<p>但是在此例子中组件使用的数据依旧是外部传入的，有点混淆，其实是从MyComponent中定义了组件结构，并在对应的信息位置放置了变量，这些变量都将在Men组件内部来定义，组件中的p标签并没有意义，去除结果也是一样的，这里只是负责把数据定义出来就可以了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Men = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;slot s-for=&quot;item in data&quot; var-n=&quot;item.name&quot; var-email=&quot;item.email&quot; var-sex=&quot;item.sex ? \\&apos;male\\&apos; : \\&apos;female\\&apos;&quot;&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;p&gt;&#123;&#123;n&#125;&#125;,&#123;&#123;sex&#125;&#125;,&#123;&#123;email&#125;&#125;&lt;/p&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;/slot&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;x-men&apos;: Men</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;x-men data=&quot;&#123;&#123;men&#125;&#125;&quot; s-ref=&quot;men&quot;&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;h3&gt;&#123;&#123;n&#125;&#125;&lt;/h3&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;p&gt;&lt;b&gt;&#123;&#123;sex&#125;&#125;&lt;/b&gt;&lt;u&gt;&#123;&#123;email&#125;&#125;&lt;/u&gt;&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/x-men&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        var slots = this.ref(&apos;men&apos;).slot();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 3</span><br><span class=\"line\">        slots.length</span><br><span class=\"line\"></span><br><span class=\"line\">        // truthy</span><br><span class=\"line\">        slots[0].isInserted</span><br><span class=\"line\"></span><br><span class=\"line\">        // truthy</span><br><span class=\"line\">        contentSlot.isScoped</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        men: [</span><br><span class=\"line\">            &#123;name: &apos;errorrik&apos;, sex: 1, email: &apos;errorrik@gmail.com&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;leeight&apos;, sex: 0, email: &apos;leeight@gmail.com&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;otakustay&apos;, email: &apos;otakustay@gmail.com&apos;, sex: 1&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;h3&gt;errorrik&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;b&gt;male&lt;/b&gt;&lt;u&gt;errorrik@gmail.com&lt;/u&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;h3&gt;leeight&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;b&gt;female&lt;/b&gt;&lt;u&gt;leeight@gmail.com&lt;/u&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;h3&gt;otakustay&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;b&gt;male&lt;/b&gt;&lt;u&gt;otakustay@gmail.com&lt;/u&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>scoped slot 中，除了可以访问 var- 声明的数据外，还可以访问当前环境的数据。</p>\n<ul>\n<li>使用 slot 默认内容时，可以访问组件内部环境数据</li>\n<li>外层组件定义的 slot 内容，可以访问外层组件环境的数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Man = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;p&gt;&apos;</span><br><span class=\"line\">      +   &apos;&lt;slot var-n=&quot;who.name&quot; var-email=&quot;who.email&quot;&gt;&apos;</span><br><span class=\"line\">      +     &apos;&#123;&#123;n&#125;&#125;,&#123;&#123;email&#125;&#125;,&#123;&#123;country&#125;&#125;&apos;</span><br><span class=\"line\">      +   &apos;&lt;/slot&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;/p&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;x-man&apos;: Man</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&lt;x-man who=&quot;&#123;&#123;man&#125;&#125;&quot; country=&quot;&#123;&#123;country&#125;&#125;&quot;&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;b&gt;&#123;&#123;n&#125;&#125; - &#123;&#123;province&#125;&#125;&lt;/b&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;u&gt;&#123;&#123;email&#125;&#125;&lt;/u&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/x-man&gt;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        man: &#123;</span><br><span class=\"line\">            name: &apos;errorrik&apos;, </span><br><span class=\"line\">            email: &apos;errorrik@gmail.com&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        country: &apos;China&apos;,</span><br><span class=\"line\">        province: &apos;HN&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">        &lt;b&gt;errorrik - HN&lt;/b&gt;</span><br><span class=\"line\">        &lt;u&gt;errorrik@gmail.com&lt;/u&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>这里组件中的n,province和email三个变量中province未在组件内部进行定义，所以可以取到父组件中定义的内容，即HN，但是如果稍加修改如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;slot var-n=&quot;who.name&quot; var-email=&quot;who.email&quot; var-province=&quot;who.province&quot;&gt;</span><br><span class=\"line\">\t&apos;&#123;&#123;n&#125;&#125;,&#123;&#123;email&#125;&#125;,&#123;&#123;country&#125;&#125;,&#123;&#123;province&#125;&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">man: &#123;</span><br><span class=\"line\">       name: &apos;errorrik&apos;, </span><br><span class=\"line\">       email: &apos;errorrik@gmail.com&apos;,</span><br><span class=\"line\">       province: &apos;CN&apos;</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n<p>即在组件内部定义一个province变量，那么就可以覆盖掉父组件中的对应值，可见slot优先使用组件内部值</p>\n<h4 id=\"动态命名\"><a href=\"#动态命名\" class=\"headerlink\" title=\"动态命名\"></a>动态命名</h4><hr>\n<p>slot 声明中，组件可以使用当前的数据环境进行命名，从而提供动态的插槽。插槽的动态命名常用于 组件结构根据数据生成 的场景下，比如表格组件。</p>\n<p>这里table组件中就进行了动态命名，当name=“col-name”时，父组件定义的b标签就会插入进去，从而实现在列表中加粗姓名的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Table = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;table&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;thead&gt;&lt;tr&gt;&lt;th s-for=&quot;col in columns&quot;&gt;&#123;&#123;col.label&#125;&#125;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;tbody&gt;&apos;</span><br><span class=\"line\">        +     &apos;&lt;tr s-for=&quot;row in datasource&quot;&gt;&apos;</span><br><span class=\"line\">        +       &apos;&lt;td s-for=&quot;col in columns&quot;&gt;&apos;</span><br><span class=\"line\">        +         &apos;&lt;slot name=&quot;col-&#123;&#123;col.name&#125;&#125;&quot; var-row=&quot;row&quot; var-col=&quot;col&quot;&gt;&#123;&#123;row[col.name]&#125;&#125;&lt;/slot&gt;&apos;</span><br><span class=\"line\">        +       &apos;&lt;/td&gt;&apos;</span><br><span class=\"line\">        + &apos;    &lt;/tr&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;/tbody&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/table&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;x-table&apos;: Table</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;x-table columns=&quot;&#123;&#123;columns&#125;&#125;&quot; datasource=&quot;&#123;&#123;list&#125;&#125;&quot;&gt;&apos;</span><br><span class=\"line\">        +     &apos;&lt;b slot=&quot;col-name&quot;&gt;&#123;&#123;row.name&#125;&#125;&lt;/b&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;/x-table&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        columns: [</span><br><span class=\"line\">            &#123;name: &apos;name&apos;, label: &apos;名&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;email&apos;, label: &apos;邮&apos;&#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        list: [</span><br><span class=\"line\">            &#123;name: &apos;errorrik&apos;, email: &apos;errorrik@gmail.com&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;leeight&apos;, email: &apos;leeight@gmail.com&apos;&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;table&gt;</span><br><span class=\"line\">        &lt;thead&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th&gt;名&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;邮&lt;/th&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/thead&gt;</span><br><span class=\"line\">        &lt;tbody&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;&lt;b&gt;errorrik&lt;/b&gt;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;errorrik@gmail.com&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;&lt;b&gt;leeight&lt;/b&gt;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;leeight@gmail.com&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/tbody&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><hr>\n<p>在视图模板中可以通过 slot 声明一个插槽的位置，其位置的内容可以由外层组件定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Panel = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;div class=&quot;head&quot; on-click=&quot;toggle&quot;&gt;title&lt;/div&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;p&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;name: &apos;Panel&apos;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;ui-panel&apos;: Panel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-panel&gt;I am &#123;&#123;name&#125;&#125;&lt;/ui-panel&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;name: &apos;MyComponent&apos;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;head&quot;&gt;title&lt;/div&gt;</span><br><span class=\"line\">  &lt;p&gt;I am MyComponent&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>可以看到，MyComponent组件中传入的信息插在了Panel组件提供的slot插槽中，并且其数据环境为 声明时的环境，即name取值为’MyComponent’</p>\n<p>那么如果想要给组件的不同位置插入信息该怎么办呢？就需要对插槽进行命名。</p>\n<p>一个视图模板的声明可以包含一个默认 slot 和多个命名 slot。外层组件的元素通过 slot=”name” 的属性声明，可以指定自身的插入点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Tab = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;header&gt;&lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;&lt;/header&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;main&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/main&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;ui-tab&apos;: Tab</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-tab&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;h3 slot=&quot;title&quot;&gt;1&lt;/h3&gt;&lt;p&gt;one&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;h3 slot=&quot;title&quot;&gt;2&lt;/h3&gt;&lt;p&gt;two&lt;a slot=&quot;title&quot;&gt;slot fail&lt;/a&gt;&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/ui-tab&gt;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果，a 元素无法被插入 title slot</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;header&gt;&lt;h3&gt;1&lt;/h3&gt;&lt;h3&gt;2&lt;/h3&gt;&lt;/header&gt;</span><br><span class=\"line\">  &lt;main&gt;&lt;p&gt;one&lt;/p&gt;&lt;p&gt;two&lt;a&gt;slot fail&lt;/a&gt;&lt;/p&gt;&lt;/main&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>可见拥有title的slot属性的信息被插入到了组件的name=‘title’的插槽中，但是这里有个问题，那就是 外层组件的替换元素，只有在直接子元素上才能声明 slot=”name” 指定自身的插入点。</p>\n<p>在 slot 声明时应用 if 或 for 指令，可以让插槽根据组件数据动态化。</p>\n<p>panel 的 hidden 属性为 true 时，panel 中默认插槽将不会渲染，仅包含 title 插槽，通过 slot 方法获取的数组长度为 0。</p>\n<p>也就是说，传入panel的hidden属性为true，所以除了name=”title”之外的slot都不会渲染，所以最终只出现了title部分，而desc部分没有渲染出来。</p>\n<p>而for指令的用法类似if指令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Panel = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;slot name=&quot;title&quot;/&gt;&lt;slot s-if=&quot;!hidden&quot;/&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      &apos;x-panel&apos;: Panel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;x-panel hidden=&quot;&#123;&#123;folderHidden&#125;&#125;&quot; s-ref=&quot;panel&quot;&gt;&apos;</span><br><span class=\"line\">              + &apos;&lt;b slot=&quot;title&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/b&gt;&apos;</span><br><span class=\"line\">              + &apos;&lt;p&gt;&#123;&#123;desc&#125;&#125;&lt;/p&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;/x-panel&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        // 0</span><br><span class=\"line\">        this.ref(&apos;panel&apos;).slot().length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        folderHidden: true,</span><br><span class=\"line\">        desc: &apos;MVVM component framework&apos;,</span><br><span class=\"line\">        name: &apos;San&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果，hidden为true所以不包含default slot</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;b&gt;San&lt;/b&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<h4 id=\"scoped-插槽\"><a href=\"#scoped-插槽\" class=\"headerlink\" title=\"scoped 插槽\"></a>scoped 插槽</h4><p>如果 slot 声明中包含 1 个以上 var- 数据前缀声明，该 slot 为 scoped slot。scoped slot 具有独立的 数据环境，其中仅包含 var- 声明的数据。scoped 数据声明的形式为 var-name=”expression”。</p>\n<p>scoped slot 通常用于组件的视图部分期望由 外部传入视图结构，渲染过程使用组件内部数据。</p>\n<p>但是在此例子中组件使用的数据依旧是外部传入的，有点混淆，其实是从MyComponent中定义了组件结构，并在对应的信息位置放置了变量，这些变量都将在Men组件内部来定义，组件中的p标签并没有意义，去除结果也是一样的，这里只是负责把数据定义出来就可以了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Men = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;slot s-for=&quot;item in data&quot; var-n=&quot;item.name&quot; var-email=&quot;item.email&quot; var-sex=&quot;item.sex ? \\&apos;male\\&apos; : \\&apos;female\\&apos;&quot;&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;p&gt;&#123;&#123;n&#125;&#125;,&#123;&#123;sex&#125;&#125;,&#123;&#123;email&#125;&#125;&lt;/p&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;/slot&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;x-men&apos;: Men</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;x-men data=&quot;&#123;&#123;men&#125;&#125;&quot; s-ref=&quot;men&quot;&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;h3&gt;&#123;&#123;n&#125;&#125;&lt;/h3&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;p&gt;&lt;b&gt;&#123;&#123;sex&#125;&#125;&lt;/b&gt;&lt;u&gt;&#123;&#123;email&#125;&#125;&lt;/u&gt;&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/x-men&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        var slots = this.ref(&apos;men&apos;).slot();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 3</span><br><span class=\"line\">        slots.length</span><br><span class=\"line\"></span><br><span class=\"line\">        // truthy</span><br><span class=\"line\">        slots[0].isInserted</span><br><span class=\"line\"></span><br><span class=\"line\">        // truthy</span><br><span class=\"line\">        contentSlot.isScoped</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        men: [</span><br><span class=\"line\">            &#123;name: &apos;errorrik&apos;, sex: 1, email: &apos;errorrik@gmail.com&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;leeight&apos;, sex: 0, email: &apos;leeight@gmail.com&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;otakustay&apos;, email: &apos;otakustay@gmail.com&apos;, sex: 1&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;h3&gt;errorrik&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;b&gt;male&lt;/b&gt;&lt;u&gt;errorrik@gmail.com&lt;/u&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;h3&gt;leeight&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;b&gt;female&lt;/b&gt;&lt;u&gt;leeight@gmail.com&lt;/u&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;h3&gt;otakustay&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;b&gt;male&lt;/b&gt;&lt;u&gt;otakustay@gmail.com&lt;/u&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>scoped slot 中，除了可以访问 var- 声明的数据外，还可以访问当前环境的数据。</p>\n<ul>\n<li>使用 slot 默认内容时，可以访问组件内部环境数据</li>\n<li>外层组件定义的 slot 内容，可以访问外层组件环境的数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Man = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;p&gt;&apos;</span><br><span class=\"line\">      +   &apos;&lt;slot var-n=&quot;who.name&quot; var-email=&quot;who.email&quot;&gt;&apos;</span><br><span class=\"line\">      +     &apos;&#123;&#123;n&#125;&#125;,&#123;&#123;email&#125;&#125;,&#123;&#123;country&#125;&#125;&apos;</span><br><span class=\"line\">      +   &apos;&lt;/slot&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;/p&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;x-man&apos;: Man</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&lt;x-man who=&quot;&#123;&#123;man&#125;&#125;&quot; country=&quot;&#123;&#123;country&#125;&#125;&quot;&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;b&gt;&#123;&#123;n&#125;&#125; - &#123;&#123;province&#125;&#125;&lt;/b&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;u&gt;&#123;&#123;email&#125;&#125;&lt;/u&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/x-man&gt;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        man: &#123;</span><br><span class=\"line\">            name: &apos;errorrik&apos;, </span><br><span class=\"line\">            email: &apos;errorrik@gmail.com&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        country: &apos;China&apos;,</span><br><span class=\"line\">        province: &apos;HN&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">        &lt;b&gt;errorrik - HN&lt;/b&gt;</span><br><span class=\"line\">        &lt;u&gt;errorrik@gmail.com&lt;/u&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>这里组件中的n,province和email三个变量中province未在组件内部进行定义，所以可以取到父组件中定义的内容，即HN，但是如果稍加修改如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;slot var-n=&quot;who.name&quot; var-email=&quot;who.email&quot; var-province=&quot;who.province&quot;&gt;</span><br><span class=\"line\">\t&apos;&#123;&#123;n&#125;&#125;,&#123;&#123;email&#125;&#125;,&#123;&#123;country&#125;&#125;,&#123;&#123;province&#125;&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">man: &#123;</span><br><span class=\"line\">       name: &apos;errorrik&apos;, </span><br><span class=\"line\">       email: &apos;errorrik@gmail.com&apos;,</span><br><span class=\"line\">       province: &apos;CN&apos;</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n<p>即在组件内部定义一个province变量，那么就可以覆盖掉父组件中的对应值，可见slot优先使用组件内部值</p>\n<h4 id=\"动态命名\"><a href=\"#动态命名\" class=\"headerlink\" title=\"动态命名\"></a>动态命名</h4><hr>\n<p>slot 声明中，组件可以使用当前的数据环境进行命名，从而提供动态的插槽。插槽的动态命名常用于 组件结构根据数据生成 的场景下，比如表格组件。</p>\n<p>这里table组件中就进行了动态命名，当name=“col-name”时，父组件定义的b标签就会插入进去，从而实现在列表中加粗姓名的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Table = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;table&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;thead&gt;&lt;tr&gt;&lt;th s-for=&quot;col in columns&quot;&gt;&#123;&#123;col.label&#125;&#125;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;tbody&gt;&apos;</span><br><span class=\"line\">        +     &apos;&lt;tr s-for=&quot;row in datasource&quot;&gt;&apos;</span><br><span class=\"line\">        +       &apos;&lt;td s-for=&quot;col in columns&quot;&gt;&apos;</span><br><span class=\"line\">        +         &apos;&lt;slot name=&quot;col-&#123;&#123;col.name&#125;&#125;&quot; var-row=&quot;row&quot; var-col=&quot;col&quot;&gt;&#123;&#123;row[col.name]&#125;&#125;&lt;/slot&gt;&apos;</span><br><span class=\"line\">        +       &apos;&lt;/td&gt;&apos;</span><br><span class=\"line\">        + &apos;    &lt;/tr&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;/tbody&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/table&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;x-table&apos;: Table</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;x-table columns=&quot;&#123;&#123;columns&#125;&#125;&quot; datasource=&quot;&#123;&#123;list&#125;&#125;&quot;&gt;&apos;</span><br><span class=\"line\">        +     &apos;&lt;b slot=&quot;col-name&quot;&gt;&#123;&#123;row.name&#125;&#125;&lt;/b&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;/x-table&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        columns: [</span><br><span class=\"line\">            &#123;name: &apos;name&apos;, label: &apos;名&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;email&apos;, label: &apos;邮&apos;&#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        list: [</span><br><span class=\"line\">            &#123;name: &apos;errorrik&apos;, email: &apos;errorrik@gmail.com&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;leeight&apos;, email: &apos;leeight@gmail.com&apos;&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;table&gt;</span><br><span class=\"line\">        &lt;thead&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th&gt;名&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;邮&lt;/th&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/thead&gt;</span><br><span class=\"line\">        &lt;tbody&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;&lt;b&gt;errorrik&lt;/b&gt;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;errorrik@gmail.com&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;&lt;b&gt;leeight&lt;/b&gt;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;leeight@gmail.com&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/tbody&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"San学习笔记 四","subtitle":"过渡","date":"2018-01-10T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 过渡\n-------------\n\n在元素上通过 s-transition 指令，可以声明过渡动画控制器。\n\n```\n    san.defineComponent({\n\t    template: '<div><button s-transition=\"opacityTransition\">click</button></div>',\n\n\t    opacityTransition: {\n\t        // 过渡动画控制器\n\t        // ...\n\t    }\n\t});\n```\n\ns-transition 只能应用在具体的元素中。template 这种没有具体元素的标签上应用 s-transition 将没有效果。\n\n\n#### 动画控制器\n\n过渡动画控制器是一个包含 enter 和 leave 方法的对象。\n\nenter 和 leave 方法的签名为 function({HTMLElement}el, {Function}done)。san 会把要过渡的元素传给过渡动画控制器，控制器在完成动画后调用 done 回调函数。\n\n```\n    san.defineComponent({\n\t    template: `\n\t        <div>\n\t            <button on-click=\"toggle\">toggle</button>\n\t            <button s-if=\"isShow\" s-transition=\"opacityTrans\">Hello San!</button>\n\t            <button s-else s-transition=\"opacityTrans\">Hello ER!</button>\n\t        </div>\n\t    `,\n\n\t    toggle: function () {\n\t        this.data.set('isShow', !this.data.get('isShow'));\n\t    },\n\n\t    opacityTrans: {\n\t        enter: function (el, done) {\n\t            var steps = 20;\n\t            var currentStep = 0;\n\n\t            function goStep() {\n\t                if (currentStep >= steps) {\n\t                    el.style.opacity = 1;\n\t                    done();\n\t                    return;\n\t                }\n\n\t                el.style.opacity = 1 / steps * currentStep++;\n\t                requestAnimationFrame(goStep);\n\t            }\n\n\t            goStep();\n\t        },\n\n\t        leave: function (el, done) {\n\t            var steps = 20;\n\t            var currentStep = 0;\n\n\t            function goStep() {\n\t                if (currentStep >= steps) {\n\t                    el.style.opacity = 0;\n\t                    done();\n\t                    return;\n\t                }\n\n\t                el.style.opacity = 1 - 1 / steps * currentStep++;\n\t                requestAnimationFrame(goStep);\n\t            }\n\n\t            goStep();\n\t        }\n\t    }\n\t});\n```\n\nsan 把动画控制器留给应用方实现，框架本身不内置动画控制效果。应用方可以：\n\n* 使用 css 动画，在 transitionend 或 animationend 事件监听中回调 done\n* 使用 requestAnimationFrame 控制动画，完成后回调 done\n* 在老旧浏览器使用 setTimeout / setInterval 控制动画，完成后回调 done\n* 发挥想象力\n\n\n过渡动画控制器 Creator调用支持传入参数\n\n```\n    san.defineComponent({\n\t    template: `\n\t        <div>\n\t            <button on-click=\"toggle\">toggle</button>\n\t            <button on-click=\"toggleTrans\">toggle transition</button>\n\t            <button s-if=\"isShow\" s-transition=\"opacityTrans(noTransition)\">Hello San!</button>\n\t            <button s-else s-transition=\"opacityTrans(noTransition)\">Hello ER!</button>\n\t        </div>\n\t    `,\n\n\t    toggle: function () {\n\t        this.data.set('isShow', !this.data.get('isShow'));\n\t    },\n\n\t    toggleTrans: function () {\n\t        this.data.set('noTransition', !this.data.get('noTransition'));\n\t    },\n\n\t    initData: function () {\n\t        return {\n\t            noTransition: false\n\t        };\n\t    },\n\n\t    opacityTrans: function (disabled) {\n\t        return {\n\t            enter: function (el, done) {\n\t                if (disabled) {\n\t                    done();\n\t                    return;\n\t                }\n\n\t                var steps = 20;\n\t                var currentStep = 0;\n\n\t                function goStep() {\n\t                    if (currentStep >= steps) {\n\t                        el.style.opacity = 1;\n\t                        done();\n\t                        return;\n\t                    }\n\n\t                    el.style.opacity = 1 / steps * currentStep++;\n\t                    requestAnimationFrame(goStep);\n\t                }\n\n\t                goStep();\n\t            },\n\n\t            leave: function (el, done) {\n\t                if (disabled) {\n\t                    done();\n\t                    return;\n\t                }\n\n\t                var steps = 20;\n\t                var currentStep = 0;\n\n\t                function goStep() {\n\t                    if (currentStep >= steps) {\n\t                        el.style.opacity = 0;\n\t                        done();\n\t                        return;\n\t                    }\n\n\t                    el.style.opacity = 1 - 1 / steps * currentStep++;\n\t                    requestAnimationFrame(goStep);\n\t                }\n\n\t                goStep();\n\t            }\n\t        }\n\t    }\n\t});\n```\n\n","source":"_posts/san4.md","raw":"---\nlayout: post\ntitle: \"San学习笔记 四\"\nsubtitle: \"过渡\"\ndate: 2018-1-11\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - San\n---\n\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 过渡\n-------------\n\n在元素上通过 s-transition 指令，可以声明过渡动画控制器。\n\n```\n    san.defineComponent({\n\t    template: '<div><button s-transition=\"opacityTransition\">click</button></div>',\n\n\t    opacityTransition: {\n\t        // 过渡动画控制器\n\t        // ...\n\t    }\n\t});\n```\n\ns-transition 只能应用在具体的元素中。template 这种没有具体元素的标签上应用 s-transition 将没有效果。\n\n\n#### 动画控制器\n\n过渡动画控制器是一个包含 enter 和 leave 方法的对象。\n\nenter 和 leave 方法的签名为 function({HTMLElement}el, {Function}done)。san 会把要过渡的元素传给过渡动画控制器，控制器在完成动画后调用 done 回调函数。\n\n```\n    san.defineComponent({\n\t    template: `\n\t        <div>\n\t            <button on-click=\"toggle\">toggle</button>\n\t            <button s-if=\"isShow\" s-transition=\"opacityTrans\">Hello San!</button>\n\t            <button s-else s-transition=\"opacityTrans\">Hello ER!</button>\n\t        </div>\n\t    `,\n\n\t    toggle: function () {\n\t        this.data.set('isShow', !this.data.get('isShow'));\n\t    },\n\n\t    opacityTrans: {\n\t        enter: function (el, done) {\n\t            var steps = 20;\n\t            var currentStep = 0;\n\n\t            function goStep() {\n\t                if (currentStep >= steps) {\n\t                    el.style.opacity = 1;\n\t                    done();\n\t                    return;\n\t                }\n\n\t                el.style.opacity = 1 / steps * currentStep++;\n\t                requestAnimationFrame(goStep);\n\t            }\n\n\t            goStep();\n\t        },\n\n\t        leave: function (el, done) {\n\t            var steps = 20;\n\t            var currentStep = 0;\n\n\t            function goStep() {\n\t                if (currentStep >= steps) {\n\t                    el.style.opacity = 0;\n\t                    done();\n\t                    return;\n\t                }\n\n\t                el.style.opacity = 1 - 1 / steps * currentStep++;\n\t                requestAnimationFrame(goStep);\n\t            }\n\n\t            goStep();\n\t        }\n\t    }\n\t});\n```\n\nsan 把动画控制器留给应用方实现，框架本身不内置动画控制效果。应用方可以：\n\n* 使用 css 动画，在 transitionend 或 animationend 事件监听中回调 done\n* 使用 requestAnimationFrame 控制动画，完成后回调 done\n* 在老旧浏览器使用 setTimeout / setInterval 控制动画，完成后回调 done\n* 发挥想象力\n\n\n过渡动画控制器 Creator调用支持传入参数\n\n```\n    san.defineComponent({\n\t    template: `\n\t        <div>\n\t            <button on-click=\"toggle\">toggle</button>\n\t            <button on-click=\"toggleTrans\">toggle transition</button>\n\t            <button s-if=\"isShow\" s-transition=\"opacityTrans(noTransition)\">Hello San!</button>\n\t            <button s-else s-transition=\"opacityTrans(noTransition)\">Hello ER!</button>\n\t        </div>\n\t    `,\n\n\t    toggle: function () {\n\t        this.data.set('isShow', !this.data.get('isShow'));\n\t    },\n\n\t    toggleTrans: function () {\n\t        this.data.set('noTransition', !this.data.get('noTransition'));\n\t    },\n\n\t    initData: function () {\n\t        return {\n\t            noTransition: false\n\t        };\n\t    },\n\n\t    opacityTrans: function (disabled) {\n\t        return {\n\t            enter: function (el, done) {\n\t                if (disabled) {\n\t                    done();\n\t                    return;\n\t                }\n\n\t                var steps = 20;\n\t                var currentStep = 0;\n\n\t                function goStep() {\n\t                    if (currentStep >= steps) {\n\t                        el.style.opacity = 1;\n\t                        done();\n\t                        return;\n\t                    }\n\n\t                    el.style.opacity = 1 / steps * currentStep++;\n\t                    requestAnimationFrame(goStep);\n\t                }\n\n\t                goStep();\n\t            },\n\n\t            leave: function (el, done) {\n\t                if (disabled) {\n\t                    done();\n\t                    return;\n\t                }\n\n\t                var steps = 20;\n\t                var currentStep = 0;\n\n\t                function goStep() {\n\t                    if (currentStep >= steps) {\n\t                        el.style.opacity = 0;\n\t                        done();\n\t                        return;\n\t                    }\n\n\t                    el.style.opacity = 1 - 1 / steps * currentStep++;\n\t                    requestAnimationFrame(goStep);\n\t                }\n\n\t                goStep();\n\t            }\n\t        }\n\t    }\n\t});\n```\n\n","slug":"san4","published":1,"updated":"2018-02-02T04:24:54.407Z","comments":1,"photos":[],"link":"","_id":"cjkvxydy900225xfae9awe974","content":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"过渡\"><a href=\"#过渡\" class=\"headerlink\" title=\"过渡\"></a>过渡</h3><hr>\n<p>在元素上通过 s-transition 指令，可以声明过渡动画控制器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;button s-transition=&quot;opacityTransition&quot;&gt;click&lt;/button&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    opacityTransition: &#123;</span><br><span class=\"line\">        // 过渡动画控制器</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>s-transition 只能应用在具体的元素中。template 这种没有具体元素的标签上应用 s-transition 将没有效果。</p>\n<h4 id=\"动画控制器\"><a href=\"#动画控制器\" class=\"headerlink\" title=\"动画控制器\"></a>动画控制器</h4><p>过渡动画控制器是一个包含 enter 和 leave 方法的对象。</p>\n<p>enter 和 leave 方法的签名为 function({HTMLElement}el, {Function}done)。san 会把要过渡的元素传给过渡动画控制器，控制器在完成动画后调用 done 回调函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: `</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;button on-click=&quot;toggle&quot;&gt;toggle&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-if=&quot;isShow&quot; s-transition=&quot;opacityTrans&quot;&gt;Hello San!&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-else s-transition=&quot;opacityTrans&quot;&gt;Hello ER!&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    `,</span><br><span class=\"line\"></span><br><span class=\"line\">    toggle: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;isShow&apos;, !this.data.get(&apos;isShow&apos;));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    opacityTrans: &#123;</span><br><span class=\"line\">        enter: function (el, done) &#123;</span><br><span class=\"line\">            var steps = 20;</span><br><span class=\"line\">            var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            function goStep() &#123;</span><br><span class=\"line\">                if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                    el.style.opacity = 1;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                el.style.opacity = 1 / steps * currentStep++;</span><br><span class=\"line\">                requestAnimationFrame(goStep);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            goStep();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        leave: function (el, done) &#123;</span><br><span class=\"line\">            var steps = 20;</span><br><span class=\"line\">            var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            function goStep() &#123;</span><br><span class=\"line\">                if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                    el.style.opacity = 0;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                el.style.opacity = 1 - 1 / steps * currentStep++;</span><br><span class=\"line\">                requestAnimationFrame(goStep);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            goStep();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>san 把动画控制器留给应用方实现，框架本身不内置动画控制效果。应用方可以：</p>\n<ul>\n<li>使用 css 动画，在 transitionend 或 animationend 事件监听中回调 done</li>\n<li>使用 requestAnimationFrame 控制动画，完成后回调 done</li>\n<li>在老旧浏览器使用 setTimeout / setInterval 控制动画，完成后回调 done</li>\n<li>发挥想象力</li>\n</ul>\n<p>过渡动画控制器 Creator调用支持传入参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: `</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;button on-click=&quot;toggle&quot;&gt;toggle&lt;/button&gt;</span><br><span class=\"line\">            &lt;button on-click=&quot;toggleTrans&quot;&gt;toggle transition&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-if=&quot;isShow&quot; s-transition=&quot;opacityTrans(noTransition)&quot;&gt;Hello San!&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-else s-transition=&quot;opacityTrans(noTransition)&quot;&gt;Hello ER!&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    `,</span><br><span class=\"line\"></span><br><span class=\"line\">    toggle: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;isShow&apos;, !this.data.get(&apos;isShow&apos;));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    toggleTrans: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;noTransition&apos;, !this.data.get(&apos;noTransition&apos;));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            noTransition: false</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    opacityTrans: function (disabled) &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            enter: function (el, done) &#123;</span><br><span class=\"line\">                if (disabled) &#123;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                var steps = 20;</span><br><span class=\"line\">                var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">                function goStep() &#123;</span><br><span class=\"line\">                    if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                        el.style.opacity = 1;</span><br><span class=\"line\">                        done();</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    el.style.opacity = 1 / steps * currentStep++;</span><br><span class=\"line\">                    requestAnimationFrame(goStep);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                goStep();</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            leave: function (el, done) &#123;</span><br><span class=\"line\">                if (disabled) &#123;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                var steps = 20;</span><br><span class=\"line\">                var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">                function goStep() &#123;</span><br><span class=\"line\">                    if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                        el.style.opacity = 0;</span><br><span class=\"line\">                        done();</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    el.style.opacity = 1 - 1 / steps * currentStep++;</span><br><span class=\"line\">                    requestAnimationFrame(goStep);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                goStep();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"过渡\"><a href=\"#过渡\" class=\"headerlink\" title=\"过渡\"></a>过渡</h3><hr>\n<p>在元素上通过 s-transition 指令，可以声明过渡动画控制器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;button s-transition=&quot;opacityTransition&quot;&gt;click&lt;/button&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    opacityTransition: &#123;</span><br><span class=\"line\">        // 过渡动画控制器</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>s-transition 只能应用在具体的元素中。template 这种没有具体元素的标签上应用 s-transition 将没有效果。</p>\n<h4 id=\"动画控制器\"><a href=\"#动画控制器\" class=\"headerlink\" title=\"动画控制器\"></a>动画控制器</h4><p>过渡动画控制器是一个包含 enter 和 leave 方法的对象。</p>\n<p>enter 和 leave 方法的签名为 function({HTMLElement}el, {Function}done)。san 会把要过渡的元素传给过渡动画控制器，控制器在完成动画后调用 done 回调函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: `</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;button on-click=&quot;toggle&quot;&gt;toggle&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-if=&quot;isShow&quot; s-transition=&quot;opacityTrans&quot;&gt;Hello San!&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-else s-transition=&quot;opacityTrans&quot;&gt;Hello ER!&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    `,</span><br><span class=\"line\"></span><br><span class=\"line\">    toggle: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;isShow&apos;, !this.data.get(&apos;isShow&apos;));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    opacityTrans: &#123;</span><br><span class=\"line\">        enter: function (el, done) &#123;</span><br><span class=\"line\">            var steps = 20;</span><br><span class=\"line\">            var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            function goStep() &#123;</span><br><span class=\"line\">                if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                    el.style.opacity = 1;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                el.style.opacity = 1 / steps * currentStep++;</span><br><span class=\"line\">                requestAnimationFrame(goStep);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            goStep();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        leave: function (el, done) &#123;</span><br><span class=\"line\">            var steps = 20;</span><br><span class=\"line\">            var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            function goStep() &#123;</span><br><span class=\"line\">                if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                    el.style.opacity = 0;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                el.style.opacity = 1 - 1 / steps * currentStep++;</span><br><span class=\"line\">                requestAnimationFrame(goStep);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            goStep();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>san 把动画控制器留给应用方实现，框架本身不内置动画控制效果。应用方可以：</p>\n<ul>\n<li>使用 css 动画，在 transitionend 或 animationend 事件监听中回调 done</li>\n<li>使用 requestAnimationFrame 控制动画，完成后回调 done</li>\n<li>在老旧浏览器使用 setTimeout / setInterval 控制动画，完成后回调 done</li>\n<li>发挥想象力</li>\n</ul>\n<p>过渡动画控制器 Creator调用支持传入参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: `</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;button on-click=&quot;toggle&quot;&gt;toggle&lt;/button&gt;</span><br><span class=\"line\">            &lt;button on-click=&quot;toggleTrans&quot;&gt;toggle transition&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-if=&quot;isShow&quot; s-transition=&quot;opacityTrans(noTransition)&quot;&gt;Hello San!&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-else s-transition=&quot;opacityTrans(noTransition)&quot;&gt;Hello ER!&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    `,</span><br><span class=\"line\"></span><br><span class=\"line\">    toggle: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;isShow&apos;, !this.data.get(&apos;isShow&apos;));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    toggleTrans: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;noTransition&apos;, !this.data.get(&apos;noTransition&apos;));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            noTransition: false</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    opacityTrans: function (disabled) &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            enter: function (el, done) &#123;</span><br><span class=\"line\">                if (disabled) &#123;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                var steps = 20;</span><br><span class=\"line\">                var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">                function goStep() &#123;</span><br><span class=\"line\">                    if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                        el.style.opacity = 1;</span><br><span class=\"line\">                        done();</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    el.style.opacity = 1 / steps * currentStep++;</span><br><span class=\"line\">                    requestAnimationFrame(goStep);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                goStep();</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            leave: function (el, done) &#123;</span><br><span class=\"line\">                if (disabled) &#123;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                var steps = 20;</span><br><span class=\"line\">                var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">                function goStep() &#123;</span><br><span class=\"line\">                    if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                        el.style.opacity = 0;</span><br><span class=\"line\">                        done();</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    el.style.opacity = 1 - 1 / steps * currentStep++;</span><br><span class=\"line\">                    requestAnimationFrame(goStep);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                goStep();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"由一个啼笑皆非的小bug想到的","date":"2018-05-30T16:00:00.000Z","author":"Ai Shuangying","_content":"\n\n最近遇到了一个很简单的需求，但是却墨迹了好一会，以为是个bug，结果想通了之后哭笑不得，记录下来自省。\n\n----------\n\n\n#### 简单的需求\n-------------\n\n```\n//给定一个数组，数量不定，要求补足至长度为10\n\nlet data = ['a','a','a','a','a','a'];\n//长度不足10时补'-'\n\nif(data.length < 10){\n    for(let i=0; i<10-data.length; i++){\n        data.push('-');\n    }\n}\n\n//看起来非常简单是吧，结果却出人意料\n// data 为 [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"-\", \"-\"] ，只补了2个’-‘，这是为什么呢？\n\n```\n\n你想到了么？\n\n哈哈，没错\n\n问题就出在循环语句上。我们打印点输出看一下\n\n```\nlet data = ['a','a','a','a','a','a'];\n\nif(data.length < 10){\n    for(let i=0; i<10-data.length; i++){\n        console.log(i,data.length);\n        data.push('-');\n    }\n}\n\n//输出结果为\n// 0 6\n// 1 7\n// 8\n\n```\n\n看到这里明白了么，没错，因为我们每次循环中给data插入了数据，就会导致下次循环判断条件时i和data.length 都增长了1。\n\n出错点GET，解决起来也很简单\n\n```\nlet data = ['a','a','a','a','a','a'];\n\nif(data.length < 10){\n    let all = 10 - data.length;\n    for(let i=0; i<all; i++){\n        data.push('-');\n    }\n}\n\n//输出结果为\n// [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"-\", \"-\", \"-\", \"-\"]\n\n```\n\n问题解决\n\n#### 感想\n-------------\n\n工作中偶尔碰到这种小问题一不小心就会蒙在鼓里，想想还是挺有意思的。","source":"_posts/数组循环添加问题分析.md","raw":"---\nlayout: post\ntitle: \"由一个啼笑皆非的小bug想到的\"\ndate: 2018-5-31\nauthor: \"Ai Shuangying\"\ntags:\n\t- JavaScript\n---\n\n\n最近遇到了一个很简单的需求，但是却墨迹了好一会，以为是个bug，结果想通了之后哭笑不得，记录下来自省。\n\n----------\n\n\n#### 简单的需求\n-------------\n\n```\n//给定一个数组，数量不定，要求补足至长度为10\n\nlet data = ['a','a','a','a','a','a'];\n//长度不足10时补'-'\n\nif(data.length < 10){\n    for(let i=0; i<10-data.length; i++){\n        data.push('-');\n    }\n}\n\n//看起来非常简单是吧，结果却出人意料\n// data 为 [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"-\", \"-\"] ，只补了2个’-‘，这是为什么呢？\n\n```\n\n你想到了么？\n\n哈哈，没错\n\n问题就出在循环语句上。我们打印点输出看一下\n\n```\nlet data = ['a','a','a','a','a','a'];\n\nif(data.length < 10){\n    for(let i=0; i<10-data.length; i++){\n        console.log(i,data.length);\n        data.push('-');\n    }\n}\n\n//输出结果为\n// 0 6\n// 1 7\n// 8\n\n```\n\n看到这里明白了么，没错，因为我们每次循环中给data插入了数据，就会导致下次循环判断条件时i和data.length 都增长了1。\n\n出错点GET，解决起来也很简单\n\n```\nlet data = ['a','a','a','a','a','a'];\n\nif(data.length < 10){\n    let all = 10 - data.length;\n    for(let i=0; i<all; i++){\n        data.push('-');\n    }\n}\n\n//输出结果为\n// [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"-\", \"-\", \"-\", \"-\"]\n\n```\n\n问题解决\n\n#### 感想\n-------------\n\n工作中偶尔碰到这种小问题一不小心就会蒙在鼓里，想想还是挺有意思的。","slug":"数组循环添加问题分析","published":1,"updated":"2018-05-31T07:02:45.540Z","comments":1,"photos":[],"link":"","_id":"cjkvxydya00245xfawqm3snbj","content":"<p>最近遇到了一个很简单的需求，但是却墨迹了好一会，以为是个bug，结果想通了之后哭笑不得，记录下来自省。</p>\n<hr>\n<h4 id=\"简单的需求\"><a href=\"#简单的需求\" class=\"headerlink\" title=\"简单的需求\"></a>简单的需求</h4><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给定一个数组，数量不定，要求补足至长度为10</span><br><span class=\"line\"></span><br><span class=\"line\">let data = [&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;];</span><br><span class=\"line\">//长度不足10时补&apos;-&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">if(data.length &lt; 10)&#123;</span><br><span class=\"line\">    for(let i=0; i&lt;10-data.length; i++)&#123;</span><br><span class=\"line\">        data.push(&apos;-&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//看起来非常简单是吧，结果却出人意料</span><br><span class=\"line\">// data 为 [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;-&quot;, &quot;-&quot;] ，只补了2个’-‘，这是为什么呢？</span><br></pre></td></tr></table></figure>\n<p>你想到了么？</p>\n<p>哈哈，没错</p>\n<p>问题就出在循环语句上。我们打印点输出看一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let data = [&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">if(data.length &lt; 10)&#123;</span><br><span class=\"line\">    for(let i=0; i&lt;10-data.length; i++)&#123;</span><br><span class=\"line\">        console.log(i,data.length);</span><br><span class=\"line\">        data.push(&apos;-&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//输出结果为</span><br><span class=\"line\">// 0 6</span><br><span class=\"line\">// 1 7</span><br><span class=\"line\">// 8</span><br></pre></td></tr></table></figure>\n<p>看到这里明白了么，没错，因为我们每次循环中给data插入了数据，就会导致下次循环判断条件时i和data.length 都增长了1。</p>\n<p>出错点GET，解决起来也很简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let data = [&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">if(data.length &lt; 10)&#123;</span><br><span class=\"line\">    let all = 10 - data.length;</span><br><span class=\"line\">    for(let i=0; i&lt;all; i++)&#123;</span><br><span class=\"line\">        data.push(&apos;-&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//输出结果为</span><br><span class=\"line\">// [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;-&quot;, &quot;-&quot;, &quot;-&quot;, &quot;-&quot;]</span><br></pre></td></tr></table></figure>\n<p>问题解决</p>\n<h4 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h4><hr>\n<p>工作中偶尔碰到这种小问题一不小心就会蒙在鼓里，想想还是挺有意思的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近遇到了一个很简单的需求，但是却墨迹了好一会，以为是个bug，结果想通了之后哭笑不得，记录下来自省。</p>\n<hr>\n<h4 id=\"简单的需求\"><a href=\"#简单的需求\" class=\"headerlink\" title=\"简单的需求\"></a>简单的需求</h4><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给定一个数组，数量不定，要求补足至长度为10</span><br><span class=\"line\"></span><br><span class=\"line\">let data = [&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;];</span><br><span class=\"line\">//长度不足10时补&apos;-&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">if(data.length &lt; 10)&#123;</span><br><span class=\"line\">    for(let i=0; i&lt;10-data.length; i++)&#123;</span><br><span class=\"line\">        data.push(&apos;-&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//看起来非常简单是吧，结果却出人意料</span><br><span class=\"line\">// data 为 [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;-&quot;, &quot;-&quot;] ，只补了2个’-‘，这是为什么呢？</span><br></pre></td></tr></table></figure>\n<p>你想到了么？</p>\n<p>哈哈，没错</p>\n<p>问题就出在循环语句上。我们打印点输出看一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let data = [&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">if(data.length &lt; 10)&#123;</span><br><span class=\"line\">    for(let i=0; i&lt;10-data.length; i++)&#123;</span><br><span class=\"line\">        console.log(i,data.length);</span><br><span class=\"line\">        data.push(&apos;-&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//输出结果为</span><br><span class=\"line\">// 0 6</span><br><span class=\"line\">// 1 7</span><br><span class=\"line\">// 8</span><br></pre></td></tr></table></figure>\n<p>看到这里明白了么，没错，因为我们每次循环中给data插入了数据，就会导致下次循环判断条件时i和data.length 都增长了1。</p>\n<p>出错点GET，解决起来也很简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let data = [&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">if(data.length &lt; 10)&#123;</span><br><span class=\"line\">    let all = 10 - data.length;</span><br><span class=\"line\">    for(let i=0; i&lt;all; i++)&#123;</span><br><span class=\"line\">        data.push(&apos;-&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//输出结果为</span><br><span class=\"line\">// [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;-&quot;, &quot;-&quot;, &quot;-&quot;, &quot;-&quot;]</span><br></pre></td></tr></table></figure>\n<p>问题解决</p>\n<h4 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h4><hr>\n<p>工作中偶尔碰到这种小问题一不小心就会蒙在鼓里，想想还是挺有意思的。</p>\n"},{"layout":"post","title":"San学习笔记 五","subtitle":"组件","date":"2018-01-13T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 组件\n-------------\n\n组件是 San 的基本单位，是独立的数据、逻辑、视图的封装单元。从页面的角度看，组件是 HTML 元素的扩展。从功能模式的角度看，组件是一个 ViewModel。\n\n如何定义组件？\n\n如果不使用ESNext，San 提供了快捷方法 san.defineComponent 用于方便地定义组件。\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    attached: function () {\n\t        this.data.set('list', ['san', 'er', 'esui', 'etpl', 'esl']);\n\t    }\n\t});\n```\n\n如果使用ESNext，通过 ESNext 的 extends 继承时，template / filters / components 属性请使用 static property 的方式定义。\n\n```\n    import {Component} from 'san';\n\n\tclass HelloComponent extends Component {\n\t    constructor(options) {\n\t        super(options);\n\t        // .....\n\t    }\n\t    static template = '<p>Hello {{name}}!</p>';\n\t    initData() {\n\t        return {name: 'San'}\n\t    }\n\t}\n\n\tnew HelloComponent().attach(document.body);\n```\n\n\n#### 生命周期\n\n* compiled  - 组件视图模板编译完成\n* inited    - 组件实例初始化完成\n* created   - 组件元素创建完成\n* attached  - 组件已被附加到页面中\n* detached  - 组件从页面中移除\n* disposed  - 组件卸载完成\n\n组件的生命周期有这样的一些特点：\n\n* 生命周期代表组件的状态，生命周期本质就是状态管理。\n* 在生命周期到达时，对应的钩子函数会被触发运行。\n* 并存。比如 attached 和 created 等状态是同时并存的。\n* 互斥。attached 和 detached 是互斥的，disposed 会互斥掉其它所有的状态。\n* 有的时间点并不代表组件状态，只代表某个行为。当行为完成时，钩子函数也会触发。如 updated 代表每次数据变化导致的视图变更完成。\n\n\n通过声明周期的钩子函数，我们可以在生命周期到达时做一些事情。比如在生命周期 attached 中发起获取数据的请求，在请求返回后更新数据，使视图刷新。\n\n```\n    var ListComponent = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    initData: function () {\n\t        return {\n\t            list: []\n\t        };\n\t    },\n\n\t    attached: function () {\n\t        requestList().then(this.updateList.bind(this));\n\t    },\n\n\t    updateList: function (list) {\n\t        this.data.set('list', list);\n\t    }\n\t});\n```\n\n#### 数据\n\n所有组件数据相关的操作，都由组件实例的 data 成员提供。\n\n通过 data.get 方法可以获取数据\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        var params = this.data.get('params');\n\t        this.data.set('list', getList(params[1]));\n\t    }\n\t});\n```\n\n组件在实例化时可以通过 option 传入 data，指定组件初始化时的数据\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>'\n\t});\n\n\tvar myApp = new MyApp({\n\t    data: {\n\t        list: ['san', 'er', 'esui', 'etpl', 'esl']\n\t    }\n\t});\n\tmyApp.attach(document.body);\n```\n\nnew 时传入初始数据是针对实例的特例需求。\n\n但如果我们在定义组件时希望每个实例都具有初始的一些数据，此时可以定义 initData 方法，可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。\n\n```\n\tvar MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    initData: function () {\n\t        return {\n\t            list: ['san', 'er', 'esui', 'etpl', 'esl']\n\t        };\n\t    }\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n```\n\n计算数据\n\n一个数据项的值可能由其他数据项计算得来，这时我们可以通过 computed 定义计算数据。 \n\ncomputed 是一个对象，key 为计算数据项的名称，value 是返回数据项值的函数。\n\n```\n\tsan.defineComponent({\n\t    template: '<a>{{info}}</a>',\n\n\t    // name 数据项由 firstName 和 lastName 计算得来\n\t    computed: {\n\t        name: function () {\n\t            return this.data.get('firstName') + ' ' + this.data.get('lastName');\n\t        },\n\n\t        info: function () {\n\t            return this.data.get('name') + ' - ' + this.data.get('email');\n\t        }\n\t    }\n\t});\n```\n\n计算数据的函数中只能使用 this.data.get 方法获取数据项的值，不能通过 this.method 调用组件方法，也不能通过 this.data.set 设置组件数据。\n\n\n#### 过滤器\n\n在定义视图模板时，插值是常用的展现数据的方式。在编写插值时，我们常使用 过滤器 将数据转换成适合视图展现的形式。\n\n```\n    {{createTime | dateFormat('yyyy-MM-dd')}}\n```\n\nSan 针对常用场景，内置了几个过滤器：\n\n* html - HTML 转义。当不指定过滤器时，默认使用此过滤器\n* url - URL 转义\n* raw - 不进行转义。当不想使用 HTML 转义时，使用此过滤器\n\n定制过滤器\n\n通过定义组件的 filters 成员，可以指定组件的视图模板可以使用哪些过滤器。\n\n```\n\tsan.defineComponent({\n\t    template: '<a>{{createTime | dateFormat(\"yyyy-MM-dd\")}}</a>',\n\n\t    filters: {\n\t        dateFormat: function (value, format) {\n\t            return moment(value).format(format);\n\t        }\n\t    }\n\t});\n```\n\n#### 消息\n\n通过 dispatch 方法，组件可以向组件树的上层派发消息。\n\n```\n    var SelectItem = san.defineComponent({\n\t    template: '<li on-click=\"select\"><slot></slot></li>',\n\n\t    select: function () {\n\t        var value = this.data.get('value');\n\n\t        // 向组件树的上层派发消息\n\t        this.dispatch('UI:select-item-selected', value);\n\t    }\n\t});\n```\n\n消息将沿着组件树向上传递，直到遇到第一个处理该消息的组件，则停止。通过 messages 可以声明组件要处理的消息。\n\nmessages 是一个对象，key 是消息名称，value 是消息处理的函数，接收一个包含 target(派发消息的组件) 和 value(消息的值) 的参数对象。\n\n```\n\tvar Select = san.defineComponent({\n\t    template: '<ul><slot></slot></ul>',\n\n\t    // 声明组件要处理的消息\n\t    messages: {\n\t        'UI:select-item-selected': function (arg) {\n\t            var value = arg.value;\n\t            this.data.set('value', value);\n\n\t            // arg.target 可以拿到派发消息的组件\n\t        }\n\t    }\n\t});\n```\n\n","source":"_posts/san5.md","raw":"---\nlayout: post\ntitle: \"San学习笔记 五\"\nsubtitle: \"组件\"\ndate: 2018-1-14\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - San\n---\n\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 组件\n-------------\n\n组件是 San 的基本单位，是独立的数据、逻辑、视图的封装单元。从页面的角度看，组件是 HTML 元素的扩展。从功能模式的角度看，组件是一个 ViewModel。\n\n如何定义组件？\n\n如果不使用ESNext，San 提供了快捷方法 san.defineComponent 用于方便地定义组件。\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    attached: function () {\n\t        this.data.set('list', ['san', 'er', 'esui', 'etpl', 'esl']);\n\t    }\n\t});\n```\n\n如果使用ESNext，通过 ESNext 的 extends 继承时，template / filters / components 属性请使用 static property 的方式定义。\n\n```\n    import {Component} from 'san';\n\n\tclass HelloComponent extends Component {\n\t    constructor(options) {\n\t        super(options);\n\t        // .....\n\t    }\n\t    static template = '<p>Hello {{name}}!</p>';\n\t    initData() {\n\t        return {name: 'San'}\n\t    }\n\t}\n\n\tnew HelloComponent().attach(document.body);\n```\n\n\n#### 生命周期\n\n* compiled  - 组件视图模板编译完成\n* inited    - 组件实例初始化完成\n* created   - 组件元素创建完成\n* attached  - 组件已被附加到页面中\n* detached  - 组件从页面中移除\n* disposed  - 组件卸载完成\n\n组件的生命周期有这样的一些特点：\n\n* 生命周期代表组件的状态，生命周期本质就是状态管理。\n* 在生命周期到达时，对应的钩子函数会被触发运行。\n* 并存。比如 attached 和 created 等状态是同时并存的。\n* 互斥。attached 和 detached 是互斥的，disposed 会互斥掉其它所有的状态。\n* 有的时间点并不代表组件状态，只代表某个行为。当行为完成时，钩子函数也会触发。如 updated 代表每次数据变化导致的视图变更完成。\n\n\n通过声明周期的钩子函数，我们可以在生命周期到达时做一些事情。比如在生命周期 attached 中发起获取数据的请求，在请求返回后更新数据，使视图刷新。\n\n```\n    var ListComponent = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    initData: function () {\n\t        return {\n\t            list: []\n\t        };\n\t    },\n\n\t    attached: function () {\n\t        requestList().then(this.updateList.bind(this));\n\t    },\n\n\t    updateList: function (list) {\n\t        this.data.set('list', list);\n\t    }\n\t});\n```\n\n#### 数据\n\n所有组件数据相关的操作，都由组件实例的 data 成员提供。\n\n通过 data.get 方法可以获取数据\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        var params = this.data.get('params');\n\t        this.data.set('list', getList(params[1]));\n\t    }\n\t});\n```\n\n组件在实例化时可以通过 option 传入 data，指定组件初始化时的数据\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>'\n\t});\n\n\tvar myApp = new MyApp({\n\t    data: {\n\t        list: ['san', 'er', 'esui', 'etpl', 'esl']\n\t    }\n\t});\n\tmyApp.attach(document.body);\n```\n\nnew 时传入初始数据是针对实例的特例需求。\n\n但如果我们在定义组件时希望每个实例都具有初始的一些数据，此时可以定义 initData 方法，可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。\n\n```\n\tvar MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    initData: function () {\n\t        return {\n\t            list: ['san', 'er', 'esui', 'etpl', 'esl']\n\t        };\n\t    }\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n```\n\n计算数据\n\n一个数据项的值可能由其他数据项计算得来，这时我们可以通过 computed 定义计算数据。 \n\ncomputed 是一个对象，key 为计算数据项的名称，value 是返回数据项值的函数。\n\n```\n\tsan.defineComponent({\n\t    template: '<a>{{info}}</a>',\n\n\t    // name 数据项由 firstName 和 lastName 计算得来\n\t    computed: {\n\t        name: function () {\n\t            return this.data.get('firstName') + ' ' + this.data.get('lastName');\n\t        },\n\n\t        info: function () {\n\t            return this.data.get('name') + ' - ' + this.data.get('email');\n\t        }\n\t    }\n\t});\n```\n\n计算数据的函数中只能使用 this.data.get 方法获取数据项的值，不能通过 this.method 调用组件方法，也不能通过 this.data.set 设置组件数据。\n\n\n#### 过滤器\n\n在定义视图模板时，插值是常用的展现数据的方式。在编写插值时，我们常使用 过滤器 将数据转换成适合视图展现的形式。\n\n```\n    {{createTime | dateFormat('yyyy-MM-dd')}}\n```\n\nSan 针对常用场景，内置了几个过滤器：\n\n* html - HTML 转义。当不指定过滤器时，默认使用此过滤器\n* url - URL 转义\n* raw - 不进行转义。当不想使用 HTML 转义时，使用此过滤器\n\n定制过滤器\n\n通过定义组件的 filters 成员，可以指定组件的视图模板可以使用哪些过滤器。\n\n```\n\tsan.defineComponent({\n\t    template: '<a>{{createTime | dateFormat(\"yyyy-MM-dd\")}}</a>',\n\n\t    filters: {\n\t        dateFormat: function (value, format) {\n\t            return moment(value).format(format);\n\t        }\n\t    }\n\t});\n```\n\n#### 消息\n\n通过 dispatch 方法，组件可以向组件树的上层派发消息。\n\n```\n    var SelectItem = san.defineComponent({\n\t    template: '<li on-click=\"select\"><slot></slot></li>',\n\n\t    select: function () {\n\t        var value = this.data.get('value');\n\n\t        // 向组件树的上层派发消息\n\t        this.dispatch('UI:select-item-selected', value);\n\t    }\n\t});\n```\n\n消息将沿着组件树向上传递，直到遇到第一个处理该消息的组件，则停止。通过 messages 可以声明组件要处理的消息。\n\nmessages 是一个对象，key 是消息名称，value 是消息处理的函数，接收一个包含 target(派发消息的组件) 和 value(消息的值) 的参数对象。\n\n```\n\tvar Select = san.defineComponent({\n\t    template: '<ul><slot></slot></ul>',\n\n\t    // 声明组件要处理的消息\n\t    messages: {\n\t        'UI:select-item-selected': function (arg) {\n\t            var value = arg.value;\n\t            this.data.set('value', value);\n\n\t            // arg.target 可以拿到派发消息的组件\n\t        }\n\t    }\n\t});\n```\n\n","slug":"san5","published":1,"updated":"2018-02-05T05:54:47.423Z","comments":1,"photos":[],"link":"","_id":"cjkvxydyb00265xfas1q6r95t","content":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><hr>\n<p>组件是 San 的基本单位，是独立的数据、逻辑、视图的封装单元。从页面的角度看，组件是 HTML 元素的扩展。从功能模式的角度看，组件是一个 ViewModel。</p>\n<p>如何定义组件？</p>\n<p>如果不使用ESNext，San 提供了快捷方法 san.defineComponent 用于方便地定义组件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果使用ESNext，通过 ESNext 的 extends 继承时，template / filters / components 属性请使用 static property 的方式定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   import &#123;Component&#125; from &apos;san&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HelloComponent extends Component &#123;</span><br><span class=\"line\">    constructor(options) &#123;</span><br><span class=\"line\">        super(options);</span><br><span class=\"line\">        // .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    static template = &apos;&lt;p&gt;Hello &#123;&#123;name&#125;&#125;!&lt;/p&gt;&apos;;</span><br><span class=\"line\">    initData() &#123;</span><br><span class=\"line\">        return &#123;name: &apos;San&apos;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new HelloComponent().attach(document.body);</span><br></pre></td></tr></table></figure>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><ul>\n<li>compiled  - 组件视图模板编译完成</li>\n<li>inited    - 组件实例初始化完成</li>\n<li>created   - 组件元素创建完成</li>\n<li>attached  - 组件已被附加到页面中</li>\n<li>detached  - 组件从页面中移除</li>\n<li>disposed  - 组件卸载完成</li>\n</ul>\n<p>组件的生命周期有这样的一些特点：</p>\n<ul>\n<li>生命周期代表组件的状态，生命周期本质就是状态管理。</li>\n<li>在生命周期到达时，对应的钩子函数会被触发运行。</li>\n<li>并存。比如 attached 和 created 等状态是同时并存的。</li>\n<li>互斥。attached 和 detached 是互斥的，disposed 会互斥掉其它所有的状态。</li>\n<li>有的时间点并不代表组件状态，只代表某个行为。当行为完成时，钩子函数也会触发。如 updated 代表每次数据变化导致的视图变更完成。</li>\n</ul>\n<p>通过声明周期的钩子函数，我们可以在生命周期到达时做一些事情。比如在生命周期 attached 中发起获取数据的请求，在请求返回后更新数据，使视图刷新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var ListComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            list: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        requestList().then(this.updateList.bind(this));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    updateList: function (list) &#123;</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h4><p>所有组件数据相关的操作，都由组件实例的 data 成员提供。</p>\n<p>通过 data.get 方法可以获取数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        var params = this.data.get(&apos;params&apos;);</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, getList(params[1]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>组件在实例化时可以通过 option 传入 data，指定组件初始化时的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        list: [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>new 时传入初始数据是针对实例的特例需求。</p>\n<p>但如果我们在定义组件时希望每个实例都具有初始的一些数据，此时可以定义 initData 方法，可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            list: [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>计算数据</p>\n<p>一个数据项的值可能由其他数据项计算得来，这时我们可以通过 computed 定义计算数据。 </p>\n<p>computed 是一个对象，key 为计算数据项的名称，value 是返回数据项值的函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;a&gt;&#123;&#123;info&#125;&#125;&lt;/a&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // name 数据项由 firstName 和 lastName 计算得来</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        name: function () &#123;</span><br><span class=\"line\">            return this.data.get(&apos;firstName&apos;) + &apos; &apos; + this.data.get(&apos;lastName&apos;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        info: function () &#123;</span><br><span class=\"line\">            return this.data.get(&apos;name&apos;) + &apos; - &apos; + this.data.get(&apos;email&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>计算数据的函数中只能使用 this.data.get 方法获取数据项的值，不能通过 this.method 调用组件方法，也不能通过 this.data.set 设置组件数据。</p>\n<h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><p>在定义视图模板时，插值是常用的展现数据的方式。在编写插值时，我们常使用 过滤器 将数据转换成适合视图展现的形式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;createTime | dateFormat(&apos;yyyy-MM-dd&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>San 针对常用场景，内置了几个过滤器：</p>\n<ul>\n<li>html - HTML 转义。当不指定过滤器时，默认使用此过滤器</li>\n<li>url - URL 转义</li>\n<li>raw - 不进行转义。当不想使用 HTML 转义时，使用此过滤器</li>\n</ul>\n<p>定制过滤器</p>\n<p>通过定义组件的 filters 成员，可以指定组件的视图模板可以使用哪些过滤器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;a&gt;&#123;&#123;createTime | dateFormat(&quot;yyyy-MM-dd&quot;)&#125;&#125;&lt;/a&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    filters: &#123;</span><br><span class=\"line\">        dateFormat: function (value, format) &#123;</span><br><span class=\"line\">            return moment(value).format(format);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h4><p>通过 dispatch 方法，组件可以向组件树的上层派发消息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var SelectItem = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;li on-click=&quot;select&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/li&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    select: function () &#123;</span><br><span class=\"line\">        var value = this.data.get(&apos;value&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 向组件树的上层派发消息</span><br><span class=\"line\">        this.dispatch(&apos;UI:select-item-selected&apos;, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>消息将沿着组件树向上传递，直到遇到第一个处理该消息的组件，则停止。通过 messages 可以声明组件要处理的消息。</p>\n<p>messages 是一个对象，key 是消息名称，value 是消息处理的函数，接收一个包含 target(派发消息的组件) 和 value(消息的值) 的参数对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Select = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // 声明组件要处理的消息</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">        &apos;UI:select-item-selected&apos;: function (arg) &#123;</span><br><span class=\"line\">            var value = arg.value;</span><br><span class=\"line\">            this.data.set(&apos;value&apos;, value);</span><br><span class=\"line\"></span><br><span class=\"line\">            // arg.target 可以拿到派发消息的组件</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><hr>\n<p>组件是 San 的基本单位，是独立的数据、逻辑、视图的封装单元。从页面的角度看，组件是 HTML 元素的扩展。从功能模式的角度看，组件是一个 ViewModel。</p>\n<p>如何定义组件？</p>\n<p>如果不使用ESNext，San 提供了快捷方法 san.defineComponent 用于方便地定义组件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果使用ESNext，通过 ESNext 的 extends 继承时，template / filters / components 属性请使用 static property 的方式定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   import &#123;Component&#125; from &apos;san&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HelloComponent extends Component &#123;</span><br><span class=\"line\">    constructor(options) &#123;</span><br><span class=\"line\">        super(options);</span><br><span class=\"line\">        // .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    static template = &apos;&lt;p&gt;Hello &#123;&#123;name&#125;&#125;!&lt;/p&gt;&apos;;</span><br><span class=\"line\">    initData() &#123;</span><br><span class=\"line\">        return &#123;name: &apos;San&apos;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new HelloComponent().attach(document.body);</span><br></pre></td></tr></table></figure>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><ul>\n<li>compiled  - 组件视图模板编译完成</li>\n<li>inited    - 组件实例初始化完成</li>\n<li>created   - 组件元素创建完成</li>\n<li>attached  - 组件已被附加到页面中</li>\n<li>detached  - 组件从页面中移除</li>\n<li>disposed  - 组件卸载完成</li>\n</ul>\n<p>组件的生命周期有这样的一些特点：</p>\n<ul>\n<li>生命周期代表组件的状态，生命周期本质就是状态管理。</li>\n<li>在生命周期到达时，对应的钩子函数会被触发运行。</li>\n<li>并存。比如 attached 和 created 等状态是同时并存的。</li>\n<li>互斥。attached 和 detached 是互斥的，disposed 会互斥掉其它所有的状态。</li>\n<li>有的时间点并不代表组件状态，只代表某个行为。当行为完成时，钩子函数也会触发。如 updated 代表每次数据变化导致的视图变更完成。</li>\n</ul>\n<p>通过声明周期的钩子函数，我们可以在生命周期到达时做一些事情。比如在生命周期 attached 中发起获取数据的请求，在请求返回后更新数据，使视图刷新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var ListComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            list: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        requestList().then(this.updateList.bind(this));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    updateList: function (list) &#123;</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h4><p>所有组件数据相关的操作，都由组件实例的 data 成员提供。</p>\n<p>通过 data.get 方法可以获取数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        var params = this.data.get(&apos;params&apos;);</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, getList(params[1]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>组件在实例化时可以通过 option 传入 data，指定组件初始化时的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        list: [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>new 时传入初始数据是针对实例的特例需求。</p>\n<p>但如果我们在定义组件时希望每个实例都具有初始的一些数据，此时可以定义 initData 方法，可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            list: [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>计算数据</p>\n<p>一个数据项的值可能由其他数据项计算得来，这时我们可以通过 computed 定义计算数据。 </p>\n<p>computed 是一个对象，key 为计算数据项的名称，value 是返回数据项值的函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;a&gt;&#123;&#123;info&#125;&#125;&lt;/a&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // name 数据项由 firstName 和 lastName 计算得来</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        name: function () &#123;</span><br><span class=\"line\">            return this.data.get(&apos;firstName&apos;) + &apos; &apos; + this.data.get(&apos;lastName&apos;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        info: function () &#123;</span><br><span class=\"line\">            return this.data.get(&apos;name&apos;) + &apos; - &apos; + this.data.get(&apos;email&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>计算数据的函数中只能使用 this.data.get 方法获取数据项的值，不能通过 this.method 调用组件方法，也不能通过 this.data.set 设置组件数据。</p>\n<h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><p>在定义视图模板时，插值是常用的展现数据的方式。在编写插值时，我们常使用 过滤器 将数据转换成适合视图展现的形式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;createTime | dateFormat(&apos;yyyy-MM-dd&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>San 针对常用场景，内置了几个过滤器：</p>\n<ul>\n<li>html - HTML 转义。当不指定过滤器时，默认使用此过滤器</li>\n<li>url - URL 转义</li>\n<li>raw - 不进行转义。当不想使用 HTML 转义时，使用此过滤器</li>\n</ul>\n<p>定制过滤器</p>\n<p>通过定义组件的 filters 成员，可以指定组件的视图模板可以使用哪些过滤器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;a&gt;&#123;&#123;createTime | dateFormat(&quot;yyyy-MM-dd&quot;)&#125;&#125;&lt;/a&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    filters: &#123;</span><br><span class=\"line\">        dateFormat: function (value, format) &#123;</span><br><span class=\"line\">            return moment(value).format(format);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h4><p>通过 dispatch 方法，组件可以向组件树的上层派发消息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var SelectItem = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;li on-click=&quot;select&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/li&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    select: function () &#123;</span><br><span class=\"line\">        var value = this.data.get(&apos;value&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 向组件树的上层派发消息</span><br><span class=\"line\">        this.dispatch(&apos;UI:select-item-selected&apos;, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>消息将沿着组件树向上传递，直到遇到第一个处理该消息的组件，则停止。通过 messages 可以声明组件要处理的消息。</p>\n<p>messages 是一个对象，key 是消息名称，value 是消息处理的函数，接收一个包含 target(派发消息的组件) 和 value(消息的值) 的参数对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Select = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // 声明组件要处理的消息</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">        &apos;UI:select-item-selected&apos;: function (arg) &#123;</span><br><span class=\"line\">            var value = arg.value;</span><br><span class=\"line\">            this.data.set(&apos;value&apos;, value);</span><br><span class=\"line\"></span><br><span class=\"line\">            // arg.target 可以拿到派发消息的组件</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"webpack笔记","subtitle":"包含常见Loader、Plugin等","date":"2018-02-01T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n记录自己学习及使用webpack过程中使用过的插件，用以查阅\n\n----------\n\n\n#### webpack\n-------------\n\n\n\n-------------\n\n### [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin)\n\n简化HTML文件的创建，支持定义模板，HTML压缩及单独添加JS、CSS文件等功能\n\n这里还可以配置多个html页面，具体设置查询github或本案例源码\n\n```\nnew HtmlWebpackPlugin({\n\ttemplate: './index.html',\n\tfilename: 'index.html',\n\tminify: {\n      \tcollapseWhitespace: true,\n    },\n    hash: true,\n})\n```\n\n### [css-loader](https://github.com/webpack-contrib/css-loader)\n### [css-loader](https://github.com/webpack-contrib/sass-loader)\n\nCSS文件处理\n\n```\n{ \n\ttest: /\\.(css|scss)$/, \n\tuse: [ 'style-loader', 'css-loader', 'sass-loader' ] \n}\n```\n\n### [extract-text-webpack-plugin](https://github.com/webpack-contrib/extract-text-webpack-plugin)\n\n把CSS分离成文件,目前这个插件尚不支持webpack4\n\n```\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\nmodule.exports = {\n  \tmodule: {\n    \trules: [\n      \t\t{\n\t\t        test: /\\.css$/,\n\t\t        use: ExtractTextPlugin.extract({\n\t          \t\tfallback: \"style-loader\",\n\t          \t\tuse: \"css-loader\"\n        \t\t})\n      \t\t}\n    \t]\n  \t},\n  \tplugins: [\n    \tnew ExtractTextPlugin(\"styles.css\"),\n  \t]\n}\n```\n\n### [webpack-dev-server](https://github.com/webpack/webpack-dev-server)\n\n本地开发利器，在本地上开启服务，自动打开浏览器并支持随修改刷新\n\n```\nconst webpack = require('webpack');\n\ndevServer: {\n    port: 9000,\n    open: true,\n    hot: true    //用来打开模块热更替\n},\n\n//使用热更替时，需要配置插件，不用安装\nnew webpack.NamedModulesPlugin(),\nnew webpack.HotModuleReplacementPlugin()\n\n//同时如果出口处filename: '[name].[chunkhash].js',应修正为filename: '[name].[hash].js',\n```\n\n\n### 搭建React开发环境\n\n必装包\n\n```\nnpm install --save react react-dom\n```\n\n建立babel\n\n```\nnpm install --save-dev babel-core babel-preset-react babel-preset-env\n```\n\n### [babel-loader](https://github.com/webpack-contrib/sass-loader)\n\n转化React代码\n\n```\n{ test: /\\.js$/, loader: 'babel-loader', exclude: /node_modules/ },\n{ test: /\\.jsx$/, loader: 'babel-loader', exclude: /node_modules/ }\n```\n\n### [clean-webpack-plugin](https://github.com/johnagan/clean-webpack-plugin)\n\n用来清除文件，编译之前将dist文件夹清理干净，避免累积旧文件\n\n```\nnew HtmlWebpackPlugin({\n\ttemplate: './index.html',\n\tfilename: 'index.html',\n\tminify: {\n      \tcollapseWhitespace: true,\n    },\n    hash: true,\n})\n```\n\n### [pug-html-loader](https://github.com/willyelm/pug-html-loader)\n\n使用pug作为html的模板\n\n```\n//安装\nnpm install --save-dev pug pug-html-loader raw-loader\n\n//配置\n{ test: /\\.pug$/, loader: ['raw-loader', 'pug-html-loader'] }\n```\n\n### [file-loader](https://github.com/webpack-contrib/file-loader)\n\n对一些对象作为文件来处理，然后可以返回它的URL。\n\n```\n{\n    test: /\\.(png|jpe?g|gif|svg)$/i,\n    use: [\n      \t{\n\t        loader: 'file-loader',\n\t        options: {}  \n      \t}\n    ]\n}\n```\n\n### [html-loader](https://github.com/webpack-contrib/html-loader)\n\n把 html 变成导出成字符串的过程中，还能进行压缩处理（minimized）\n\n```\n{\n  \ttest: /\\.html$/,\n  \tuse: [ {\n    \tloader: 'html-loader',\n    \toptions: {\n      \t\tminimize: true\n    \t}\n  \t}],\n}\n```\n\n### [image-webpack-loader](https://github.com/tcoopman/image-webpack-loader)\n\n自动压缩图片，生产环境拿到的图片就会很小\n\n```\n{\n  \ttest: /\\.(gif|png|jpe?g|svg)$/i,\n  \tuse: [\n    \t{\n      \t\tloader: 'file-loader',\n      \t\toptions: {\n        \t\tname: '[name].[ext]',\n        \t\toutputPath: 'images/'\n      \t\t}\n    \t},\n    \t{\t\n      \t\tloader: 'image-webpack-loader',\n      \t\toptions: {\n        \t\tbypassOnDebug: true,\n      \t\t}\n    \t}\n  \t]\n},\n```\n\n","source":"_posts/webpack.md","raw":"---\nlayout: post\ntitle: \"webpack笔记\"\nsubtitle: \"包含常见Loader、Plugin等\"\ndate: 2018-2-2\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- webpack\n---\n\n\n记录自己学习及使用webpack过程中使用过的插件，用以查阅\n\n----------\n\n\n#### webpack\n-------------\n\n\n\n-------------\n\n### [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin)\n\n简化HTML文件的创建，支持定义模板，HTML压缩及单独添加JS、CSS文件等功能\n\n这里还可以配置多个html页面，具体设置查询github或本案例源码\n\n```\nnew HtmlWebpackPlugin({\n\ttemplate: './index.html',\n\tfilename: 'index.html',\n\tminify: {\n      \tcollapseWhitespace: true,\n    },\n    hash: true,\n})\n```\n\n### [css-loader](https://github.com/webpack-contrib/css-loader)\n### [css-loader](https://github.com/webpack-contrib/sass-loader)\n\nCSS文件处理\n\n```\n{ \n\ttest: /\\.(css|scss)$/, \n\tuse: [ 'style-loader', 'css-loader', 'sass-loader' ] \n}\n```\n\n### [extract-text-webpack-plugin](https://github.com/webpack-contrib/extract-text-webpack-plugin)\n\n把CSS分离成文件,目前这个插件尚不支持webpack4\n\n```\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\nmodule.exports = {\n  \tmodule: {\n    \trules: [\n      \t\t{\n\t\t        test: /\\.css$/,\n\t\t        use: ExtractTextPlugin.extract({\n\t          \t\tfallback: \"style-loader\",\n\t          \t\tuse: \"css-loader\"\n        \t\t})\n      \t\t}\n    \t]\n  \t},\n  \tplugins: [\n    \tnew ExtractTextPlugin(\"styles.css\"),\n  \t]\n}\n```\n\n### [webpack-dev-server](https://github.com/webpack/webpack-dev-server)\n\n本地开发利器，在本地上开启服务，自动打开浏览器并支持随修改刷新\n\n```\nconst webpack = require('webpack');\n\ndevServer: {\n    port: 9000,\n    open: true,\n    hot: true    //用来打开模块热更替\n},\n\n//使用热更替时，需要配置插件，不用安装\nnew webpack.NamedModulesPlugin(),\nnew webpack.HotModuleReplacementPlugin()\n\n//同时如果出口处filename: '[name].[chunkhash].js',应修正为filename: '[name].[hash].js',\n```\n\n\n### 搭建React开发环境\n\n必装包\n\n```\nnpm install --save react react-dom\n```\n\n建立babel\n\n```\nnpm install --save-dev babel-core babel-preset-react babel-preset-env\n```\n\n### [babel-loader](https://github.com/webpack-contrib/sass-loader)\n\n转化React代码\n\n```\n{ test: /\\.js$/, loader: 'babel-loader', exclude: /node_modules/ },\n{ test: /\\.jsx$/, loader: 'babel-loader', exclude: /node_modules/ }\n```\n\n### [clean-webpack-plugin](https://github.com/johnagan/clean-webpack-plugin)\n\n用来清除文件，编译之前将dist文件夹清理干净，避免累积旧文件\n\n```\nnew HtmlWebpackPlugin({\n\ttemplate: './index.html',\n\tfilename: 'index.html',\n\tminify: {\n      \tcollapseWhitespace: true,\n    },\n    hash: true,\n})\n```\n\n### [pug-html-loader](https://github.com/willyelm/pug-html-loader)\n\n使用pug作为html的模板\n\n```\n//安装\nnpm install --save-dev pug pug-html-loader raw-loader\n\n//配置\n{ test: /\\.pug$/, loader: ['raw-loader', 'pug-html-loader'] }\n```\n\n### [file-loader](https://github.com/webpack-contrib/file-loader)\n\n对一些对象作为文件来处理，然后可以返回它的URL。\n\n```\n{\n    test: /\\.(png|jpe?g|gif|svg)$/i,\n    use: [\n      \t{\n\t        loader: 'file-loader',\n\t        options: {}  \n      \t}\n    ]\n}\n```\n\n### [html-loader](https://github.com/webpack-contrib/html-loader)\n\n把 html 变成导出成字符串的过程中，还能进行压缩处理（minimized）\n\n```\n{\n  \ttest: /\\.html$/,\n  \tuse: [ {\n    \tloader: 'html-loader',\n    \toptions: {\n      \t\tminimize: true\n    \t}\n  \t}],\n}\n```\n\n### [image-webpack-loader](https://github.com/tcoopman/image-webpack-loader)\n\n自动压缩图片，生产环境拿到的图片就会很小\n\n```\n{\n  \ttest: /\\.(gif|png|jpe?g|svg)$/i,\n  \tuse: [\n    \t{\n      \t\tloader: 'file-loader',\n      \t\toptions: {\n        \t\tname: '[name].[ext]',\n        \t\toutputPath: 'images/'\n      \t\t}\n    \t},\n    \t{\t\n      \t\tloader: 'image-webpack-loader',\n      \t\toptions: {\n        \t\tbypassOnDebug: true,\n      \t\t}\n    \t}\n  \t]\n},\n```\n\n","slug":"webpack","published":1,"updated":"2018-03-18T09:04:13.617Z","comments":1,"photos":[],"link":"","_id":"cjkvxydyc00285xfag50ua03w","content":"<p>记录自己学习及使用webpack过程中使用过的插件，用以查阅</p>\n<hr>\n<h4 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h4><hr>\n<hr>\n<h3 id=\"html-webpack-plugin\"><a href=\"#html-webpack-plugin\" class=\"headerlink\" title=\"html-webpack-plugin\"></a><a href=\"https://github.com/jantimon/html-webpack-plugin\" target=\"_blank\" rel=\"noopener\">html-webpack-plugin</a></h3><p>简化HTML文件的创建，支持定义模板，HTML压缩及单独添加JS、CSS文件等功能</p>\n<p>这里还可以配置多个html页面，具体设置查询github或本案例源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">\ttemplate: &apos;./index.html&apos;,</span><br><span class=\"line\">\tfilename: &apos;index.html&apos;,</span><br><span class=\"line\">\tminify: &#123;</span><br><span class=\"line\">      \tcollapseWhitespace: true,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hash: true,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"css-loader\"><a href=\"#css-loader\" class=\"headerlink\" title=\"css-loader\"></a><a href=\"https://github.com/webpack-contrib/css-loader\" target=\"_blank\" rel=\"noopener\">css-loader</a></h3><h3 id=\"css-loader-1\"><a href=\"#css-loader-1\" class=\"headerlink\" title=\"css-loader\"></a><a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">css-loader</a></h3><p>CSS文件处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">\ttest: /\\.(css|scss)$/, </span><br><span class=\"line\">\tuse: [ &apos;style-loader&apos;, &apos;css-loader&apos;, &apos;sass-loader&apos; ] </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"extract-text-webpack-plugin\"><a href=\"#extract-text-webpack-plugin\" class=\"headerlink\" title=\"extract-text-webpack-plugin\"></a><a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\" target=\"_blank\" rel=\"noopener\">extract-text-webpack-plugin</a></h3><p>把CSS分离成文件,目前这个插件尚不支持webpack4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  \tmodule: &#123;</span><br><span class=\"line\">    \trules: [</span><br><span class=\"line\">      \t\t&#123;</span><br><span class=\"line\">\t\t        test: /\\.css$/,</span><br><span class=\"line\">\t\t        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">\t          \t\tfallback: &quot;style-loader&quot;,</span><br><span class=\"line\">\t          \t\tuse: &quot;css-loader&quot;</span><br><span class=\"line\">        \t\t&#125;)</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">    \t]</span><br><span class=\"line\">  \t&#125;,</span><br><span class=\"line\">  \tplugins: [</span><br><span class=\"line\">    \tnew ExtractTextPlugin(&quot;styles.css&quot;),</span><br><span class=\"line\">  \t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a><a href=\"https://github.com/webpack/webpack-dev-server\" target=\"_blank\" rel=\"noopener\">webpack-dev-server</a></h3><p>本地开发利器，在本地上开启服务，自动打开浏览器并支持随修改刷新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">    port: 9000,</span><br><span class=\"line\">    open: true,</span><br><span class=\"line\">    hot: true    //用来打开模块热更替</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">//使用热更替时，需要配置插件，不用安装</span><br><span class=\"line\">new webpack.NamedModulesPlugin(),</span><br><span class=\"line\">new webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\"></span><br><span class=\"line\">//同时如果出口处filename: &apos;[name].[chunkhash].js&apos;,应修正为filename: &apos;[name].[hash].js&apos;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"搭建React开发环境\"><a href=\"#搭建React开发环境\" class=\"headerlink\" title=\"搭建React开发环境\"></a>搭建React开发环境</h3><p>必装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom</span><br></pre></td></tr></table></figure>\n<p>建立babel</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-core babel-preset-react babel-preset-env</span><br></pre></td></tr></table></figure>\n<h3 id=\"babel-loader\"><a href=\"#babel-loader\" class=\"headerlink\" title=\"babel-loader\"></a><a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">babel-loader</a></h3><p>转化React代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; test: /\\.js$/, loader: &apos;babel-loader&apos;, exclude: /node_modules/ &#125;,</span><br><span class=\"line\">&#123; test: /\\.jsx$/, loader: &apos;babel-loader&apos;, exclude: /node_modules/ &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"clean-webpack-plugin\"><a href=\"#clean-webpack-plugin\" class=\"headerlink\" title=\"clean-webpack-plugin\"></a><a href=\"https://github.com/johnagan/clean-webpack-plugin\" target=\"_blank\" rel=\"noopener\">clean-webpack-plugin</a></h3><p>用来清除文件，编译之前将dist文件夹清理干净，避免累积旧文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">\ttemplate: &apos;./index.html&apos;,</span><br><span class=\"line\">\tfilename: &apos;index.html&apos;,</span><br><span class=\"line\">\tminify: &#123;</span><br><span class=\"line\">      \tcollapseWhitespace: true,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hash: true,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"pug-html-loader\"><a href=\"#pug-html-loader\" class=\"headerlink\" title=\"pug-html-loader\"></a><a href=\"https://github.com/willyelm/pug-html-loader\" target=\"_blank\" rel=\"noopener\">pug-html-loader</a></h3><p>使用pug作为html的模板</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装</span><br><span class=\"line\">npm install --save-dev pug pug-html-loader raw-loader</span><br><span class=\"line\"></span><br><span class=\"line\">//配置</span><br><span class=\"line\">&#123; test: /\\.pug$/, loader: [&apos;raw-loader&apos;, &apos;pug-html-loader&apos;] &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"file-loader\"><a href=\"#file-loader\" class=\"headerlink\" title=\"file-loader\"></a><a href=\"https://github.com/webpack-contrib/file-loader\" target=\"_blank\" rel=\"noopener\">file-loader</a></h3><p>对一些对象作为文件来处理，然后可以返回它的URL。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: /\\.(png|jpe?g|gif|svg)$/i,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      \t&#123;</span><br><span class=\"line\">\t        loader: &apos;file-loader&apos;,</span><br><span class=\"line\">\t        options: &#123;&#125;  </span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"html-loader\"><a href=\"#html-loader\" class=\"headerlink\" title=\"html-loader\"></a><a href=\"https://github.com/webpack-contrib/html-loader\" target=\"_blank\" rel=\"noopener\">html-loader</a></h3><p>把 html 变成导出成字符串的过程中，还能进行压缩处理（minimized）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  \ttest: /\\.html$/,</span><br><span class=\"line\">  \tuse: [ &#123;</span><br><span class=\"line\">    \tloader: &apos;html-loader&apos;,</span><br><span class=\"line\">    \toptions: &#123;</span><br><span class=\"line\">      \t\tminimize: true</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t&#125;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"image-webpack-loader\"><a href=\"#image-webpack-loader\" class=\"headerlink\" title=\"image-webpack-loader\"></a><a href=\"https://github.com/tcoopman/image-webpack-loader\" target=\"_blank\" rel=\"noopener\">image-webpack-loader</a></h3><p>自动压缩图片，生产环境拿到的图片就会很小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  \ttest: /\\.(gif|png|jpe?g|svg)$/i,</span><br><span class=\"line\">  \tuse: [</span><br><span class=\"line\">    \t&#123;</span><br><span class=\"line\">      \t\tloader: &apos;file-loader&apos;,</span><br><span class=\"line\">      \t\toptions: &#123;</span><br><span class=\"line\">        \t\tname: &apos;[name].[ext]&apos;,</span><br><span class=\"line\">        \t\toutputPath: &apos;images/&apos;</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    \t&#123;\t</span><br><span class=\"line\">      \t\tloader: &apos;image-webpack-loader&apos;,</span><br><span class=\"line\">      \t\toptions: &#123;</span><br><span class=\"line\">        \t\tbypassOnDebug: true,</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>记录自己学习及使用webpack过程中使用过的插件，用以查阅</p>\n<hr>\n<h4 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h4><hr>\n<hr>\n<h3 id=\"html-webpack-plugin\"><a href=\"#html-webpack-plugin\" class=\"headerlink\" title=\"html-webpack-plugin\"></a><a href=\"https://github.com/jantimon/html-webpack-plugin\" target=\"_blank\" rel=\"noopener\">html-webpack-plugin</a></h3><p>简化HTML文件的创建，支持定义模板，HTML压缩及单独添加JS、CSS文件等功能</p>\n<p>这里还可以配置多个html页面，具体设置查询github或本案例源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">\ttemplate: &apos;./index.html&apos;,</span><br><span class=\"line\">\tfilename: &apos;index.html&apos;,</span><br><span class=\"line\">\tminify: &#123;</span><br><span class=\"line\">      \tcollapseWhitespace: true,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hash: true,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"css-loader\"><a href=\"#css-loader\" class=\"headerlink\" title=\"css-loader\"></a><a href=\"https://github.com/webpack-contrib/css-loader\" target=\"_blank\" rel=\"noopener\">css-loader</a></h3><h3 id=\"css-loader-1\"><a href=\"#css-loader-1\" class=\"headerlink\" title=\"css-loader\"></a><a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">css-loader</a></h3><p>CSS文件处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">\ttest: /\\.(css|scss)$/, </span><br><span class=\"line\">\tuse: [ &apos;style-loader&apos;, &apos;css-loader&apos;, &apos;sass-loader&apos; ] </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"extract-text-webpack-plugin\"><a href=\"#extract-text-webpack-plugin\" class=\"headerlink\" title=\"extract-text-webpack-plugin\"></a><a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\" target=\"_blank\" rel=\"noopener\">extract-text-webpack-plugin</a></h3><p>把CSS分离成文件,目前这个插件尚不支持webpack4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  \tmodule: &#123;</span><br><span class=\"line\">    \trules: [</span><br><span class=\"line\">      \t\t&#123;</span><br><span class=\"line\">\t\t        test: /\\.css$/,</span><br><span class=\"line\">\t\t        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">\t          \t\tfallback: &quot;style-loader&quot;,</span><br><span class=\"line\">\t          \t\tuse: &quot;css-loader&quot;</span><br><span class=\"line\">        \t\t&#125;)</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">    \t]</span><br><span class=\"line\">  \t&#125;,</span><br><span class=\"line\">  \tplugins: [</span><br><span class=\"line\">    \tnew ExtractTextPlugin(&quot;styles.css&quot;),</span><br><span class=\"line\">  \t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a><a href=\"https://github.com/webpack/webpack-dev-server\" target=\"_blank\" rel=\"noopener\">webpack-dev-server</a></h3><p>本地开发利器，在本地上开启服务，自动打开浏览器并支持随修改刷新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">    port: 9000,</span><br><span class=\"line\">    open: true,</span><br><span class=\"line\">    hot: true    //用来打开模块热更替</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">//使用热更替时，需要配置插件，不用安装</span><br><span class=\"line\">new webpack.NamedModulesPlugin(),</span><br><span class=\"line\">new webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\"></span><br><span class=\"line\">//同时如果出口处filename: &apos;[name].[chunkhash].js&apos;,应修正为filename: &apos;[name].[hash].js&apos;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"搭建React开发环境\"><a href=\"#搭建React开发环境\" class=\"headerlink\" title=\"搭建React开发环境\"></a>搭建React开发环境</h3><p>必装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom</span><br></pre></td></tr></table></figure>\n<p>建立babel</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-core babel-preset-react babel-preset-env</span><br></pre></td></tr></table></figure>\n<h3 id=\"babel-loader\"><a href=\"#babel-loader\" class=\"headerlink\" title=\"babel-loader\"></a><a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">babel-loader</a></h3><p>转化React代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; test: /\\.js$/, loader: &apos;babel-loader&apos;, exclude: /node_modules/ &#125;,</span><br><span class=\"line\">&#123; test: /\\.jsx$/, loader: &apos;babel-loader&apos;, exclude: /node_modules/ &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"clean-webpack-plugin\"><a href=\"#clean-webpack-plugin\" class=\"headerlink\" title=\"clean-webpack-plugin\"></a><a href=\"https://github.com/johnagan/clean-webpack-plugin\" target=\"_blank\" rel=\"noopener\">clean-webpack-plugin</a></h3><p>用来清除文件，编译之前将dist文件夹清理干净，避免累积旧文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">\ttemplate: &apos;./index.html&apos;,</span><br><span class=\"line\">\tfilename: &apos;index.html&apos;,</span><br><span class=\"line\">\tminify: &#123;</span><br><span class=\"line\">      \tcollapseWhitespace: true,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hash: true,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"pug-html-loader\"><a href=\"#pug-html-loader\" class=\"headerlink\" title=\"pug-html-loader\"></a><a href=\"https://github.com/willyelm/pug-html-loader\" target=\"_blank\" rel=\"noopener\">pug-html-loader</a></h3><p>使用pug作为html的模板</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装</span><br><span class=\"line\">npm install --save-dev pug pug-html-loader raw-loader</span><br><span class=\"line\"></span><br><span class=\"line\">//配置</span><br><span class=\"line\">&#123; test: /\\.pug$/, loader: [&apos;raw-loader&apos;, &apos;pug-html-loader&apos;] &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"file-loader\"><a href=\"#file-loader\" class=\"headerlink\" title=\"file-loader\"></a><a href=\"https://github.com/webpack-contrib/file-loader\" target=\"_blank\" rel=\"noopener\">file-loader</a></h3><p>对一些对象作为文件来处理，然后可以返回它的URL。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: /\\.(png|jpe?g|gif|svg)$/i,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      \t&#123;</span><br><span class=\"line\">\t        loader: &apos;file-loader&apos;,</span><br><span class=\"line\">\t        options: &#123;&#125;  </span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"html-loader\"><a href=\"#html-loader\" class=\"headerlink\" title=\"html-loader\"></a><a href=\"https://github.com/webpack-contrib/html-loader\" target=\"_blank\" rel=\"noopener\">html-loader</a></h3><p>把 html 变成导出成字符串的过程中，还能进行压缩处理（minimized）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  \ttest: /\\.html$/,</span><br><span class=\"line\">  \tuse: [ &#123;</span><br><span class=\"line\">    \tloader: &apos;html-loader&apos;,</span><br><span class=\"line\">    \toptions: &#123;</span><br><span class=\"line\">      \t\tminimize: true</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t&#125;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"image-webpack-loader\"><a href=\"#image-webpack-loader\" class=\"headerlink\" title=\"image-webpack-loader\"></a><a href=\"https://github.com/tcoopman/image-webpack-loader\" target=\"_blank\" rel=\"noopener\">image-webpack-loader</a></h3><p>自动压缩图片，生产环境拿到的图片就会很小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  \ttest: /\\.(gif|png|jpe?g|svg)$/i,</span><br><span class=\"line\">  \tuse: [</span><br><span class=\"line\">    \t&#123;</span><br><span class=\"line\">      \t\tloader: &apos;file-loader&apos;,</span><br><span class=\"line\">      \t\toptions: &#123;</span><br><span class=\"line\">        \t\tname: &apos;[name].[ext]&apos;,</span><br><span class=\"line\">        \t\toutputPath: &apos;images/&apos;</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    \t&#123;\t</span><br><span class=\"line\">      \t\tloader: &apos;image-webpack-loader&apos;,</span><br><span class=\"line\">      \t\toptions: &#123;</span><br><span class=\"line\">        \t\tbypassOnDebug: true,</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">  \t]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"qs.stringify({})包含数组导致的问题解决","date":"2018-11-28T16:00:00.000Z","author":"Ai Shuangying","_content":"\n----------\n\n[新手向 Vue + Node.js + MongoDB 实现自己的账务管理系统](https://github.com/AiYooooo/Ai-Finance)\n\n这两天自己的记账网站突然出现了一个问题，很怪异，比如一个时间列表，期望的存储形式是数组：\n\n```\n\t[\n\t\t\"2018-08-05\", \n        \"2018-08-12\", \n        \"2018-08-19\", \n        \"2018-08-26\", \n        \"2018-09-02\", \n        \"2018-09-09\", \n        \"2018-09-16\", \n        \"2018-09-23\", \n        \"2018-09-30\", \n        \"2018-10-07\", \n        \"2018-10-14\", \n        \"2018-10-21\", \n        \"2018-10-28\", \n        \"2018-11-04\", \n        \"2018-11-11\", \n        \"2018-11-18\", \n        \"2018-11-25\"\n\t]\n```\n\n可是存储之后到数据库里就变成了 \n\n```\n\t[\n\t\t{\n\t\t\t\"0\":\"2018-08-05\", \n\t        \"1\":\"2018-08-12\", \n\t        \"2\":\"2018-08-19\", \n\t        \"3\":\"2018-08-26\", \n\t        \"4\":\"2018-09-02\", \n\t        \"5\":\"2018-09-09\", \n\t        \"6\":\"2018-09-16\", \n\t        \"7\":\"2018-09-23\", \n\t        \"8\":\"2018-09-30\", \n\t        \"9\":\"2018-10-07\", \n\t        \"10\":\"2018-10-14\", \n\t        \"11\":\"2018-10-21\", \n\t        \"12\":\"2018-10-28\", \n\t        \"13\":\"2018-11-04\", \n\t        \"14\":\"2018-11-11\", \n\t        \"15\":\"2018-11-18\", \n\t        \"16\":\"2018-11-25\"\n\t    }\n\t]\n```\n\n### 问题筛查\n-------------\n\n经过筛查，问题出现在qs模块格式化过程中，服务器拿到的数据解码后类型错误\n\n```\n\t客户端发送：qs.stringify(data)\n\t服务端接手：req.body = qs.parse(req.body);\n```\n\n判断结果是qs格式化对数组的支持有问题。\n\n### 解决办法\n-------------\n\n最简单粗暴的解决办法就是在qs格式化之前把数组数据JSON格式化下\n\n```\n\t客户端发送：\tdata = JSON.stringify(data);\n\t\t\t\tqs.stringify(data)\n\t服务端接手：\treq.body = qs.parse(req.body);\n\t\t\t\treq.body = JSON.parse(req.body);\n```\n\n但是这显然不是一个优秀的解决办法，究根结底是传入的数组并不是严格的json对象导致的，才会出现默认键的键值对的格式化结果。\n\n#### arrayFormat解决办法\n\n```\n\tqs.stringify({ 'list':this.excelData },{ arrayFormat: 'brackets' })\n\t// arrayFormat 可以格式化你的数组参数\n\n\tarrayformat选项输出 指定数组的格式\n　　\tqs.stringify({ id: ['b', 'c'] }, { arrayFormat: 'indices' })\n　　\t\t// 'id[0]=b&id[1]=c'\n　　\tqs.stringify({ id: ['b', 'c'] }, { arrayFormat: 'brackets' })\n　　\t\t// 'id[]=b&id[]=c'\n　　\tqs.stringify({ id: ['b', 'c'] }, { arrayFormat: 'repeat' })\n　　\t\t// 'id=b&id=c'\n```\n\n","source":"_posts/qs.stringify({})包含数组导致的问题解决.md","raw":"---\nlayout: post\ntitle: \"qs.stringify({})包含数组导致的问题解决\"\ndate: 2018-11-29\nauthor: \"Ai Shuangying\"\ntags:\n\t- Node.js\n---\n\n----------\n\n[新手向 Vue + Node.js + MongoDB 实现自己的账务管理系统](https://github.com/AiYooooo/Ai-Finance)\n\n这两天自己的记账网站突然出现了一个问题，很怪异，比如一个时间列表，期望的存储形式是数组：\n\n```\n\t[\n\t\t\"2018-08-05\", \n        \"2018-08-12\", \n        \"2018-08-19\", \n        \"2018-08-26\", \n        \"2018-09-02\", \n        \"2018-09-09\", \n        \"2018-09-16\", \n        \"2018-09-23\", \n        \"2018-09-30\", \n        \"2018-10-07\", \n        \"2018-10-14\", \n        \"2018-10-21\", \n        \"2018-10-28\", \n        \"2018-11-04\", \n        \"2018-11-11\", \n        \"2018-11-18\", \n        \"2018-11-25\"\n\t]\n```\n\n可是存储之后到数据库里就变成了 \n\n```\n\t[\n\t\t{\n\t\t\t\"0\":\"2018-08-05\", \n\t        \"1\":\"2018-08-12\", \n\t        \"2\":\"2018-08-19\", \n\t        \"3\":\"2018-08-26\", \n\t        \"4\":\"2018-09-02\", \n\t        \"5\":\"2018-09-09\", \n\t        \"6\":\"2018-09-16\", \n\t        \"7\":\"2018-09-23\", \n\t        \"8\":\"2018-09-30\", \n\t        \"9\":\"2018-10-07\", \n\t        \"10\":\"2018-10-14\", \n\t        \"11\":\"2018-10-21\", \n\t        \"12\":\"2018-10-28\", \n\t        \"13\":\"2018-11-04\", \n\t        \"14\":\"2018-11-11\", \n\t        \"15\":\"2018-11-18\", \n\t        \"16\":\"2018-11-25\"\n\t    }\n\t]\n```\n\n### 问题筛查\n-------------\n\n经过筛查，问题出现在qs模块格式化过程中，服务器拿到的数据解码后类型错误\n\n```\n\t客户端发送：qs.stringify(data)\n\t服务端接手：req.body = qs.parse(req.body);\n```\n\n判断结果是qs格式化对数组的支持有问题。\n\n### 解决办法\n-------------\n\n最简单粗暴的解决办法就是在qs格式化之前把数组数据JSON格式化下\n\n```\n\t客户端发送：\tdata = JSON.stringify(data);\n\t\t\t\tqs.stringify(data)\n\t服务端接手：\treq.body = qs.parse(req.body);\n\t\t\t\treq.body = JSON.parse(req.body);\n```\n\n但是这显然不是一个优秀的解决办法，究根结底是传入的数组并不是严格的json对象导致的，才会出现默认键的键值对的格式化结果。\n\n#### arrayFormat解决办法\n\n```\n\tqs.stringify({ 'list':this.excelData },{ arrayFormat: 'brackets' })\n\t// arrayFormat 可以格式化你的数组参数\n\n\tarrayformat选项输出 指定数组的格式\n　　\tqs.stringify({ id: ['b', 'c'] }, { arrayFormat: 'indices' })\n　　\t\t// 'id[0]=b&id[1]=c'\n　　\tqs.stringify({ id: ['b', 'c'] }, { arrayFormat: 'brackets' })\n　　\t\t// 'id[]=b&id[]=c'\n　　\tqs.stringify({ id: ['b', 'c'] }, { arrayFormat: 'repeat' })\n　　\t\t// 'id=b&id=c'\n```\n\n","slug":"qs.stringify({})包含数组导致的问题解决","published":1,"updated":"2018-11-29T07:09:01.580Z","comments":1,"photos":[],"link":"","_id":"cjp29dp040000xnfaocyraf0l","content":"<hr>\n<p><a href=\"https://github.com/AiYooooo/Ai-Finance\" target=\"_blank\" rel=\"noopener\">新手向 Vue + Node.js + MongoDB 实现自己的账务管理系统</a></p>\n<p>这两天自己的记账网站突然出现了一个问题，很怪异，比如一个时间列表，期望的存储形式是数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&quot;2018-08-05&quot;, </span><br><span class=\"line\">       &quot;2018-08-12&quot;, </span><br><span class=\"line\">       &quot;2018-08-19&quot;, </span><br><span class=\"line\">       &quot;2018-08-26&quot;, </span><br><span class=\"line\">       &quot;2018-09-02&quot;, </span><br><span class=\"line\">       &quot;2018-09-09&quot;, </span><br><span class=\"line\">       &quot;2018-09-16&quot;, </span><br><span class=\"line\">       &quot;2018-09-23&quot;, </span><br><span class=\"line\">       &quot;2018-09-30&quot;, </span><br><span class=\"line\">       &quot;2018-10-07&quot;, </span><br><span class=\"line\">       &quot;2018-10-14&quot;, </span><br><span class=\"line\">       &quot;2018-10-21&quot;, </span><br><span class=\"line\">       &quot;2018-10-28&quot;, </span><br><span class=\"line\">       &quot;2018-11-04&quot;, </span><br><span class=\"line\">       &quot;2018-11-11&quot;, </span><br><span class=\"line\">       &quot;2018-11-18&quot;, </span><br><span class=\"line\">       &quot;2018-11-25&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可是存储之后到数据库里就变成了 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&quot;0&quot;:&quot;2018-08-05&quot;, </span><br><span class=\"line\">        &quot;1&quot;:&quot;2018-08-12&quot;, </span><br><span class=\"line\">        &quot;2&quot;:&quot;2018-08-19&quot;, </span><br><span class=\"line\">        &quot;3&quot;:&quot;2018-08-26&quot;, </span><br><span class=\"line\">        &quot;4&quot;:&quot;2018-09-02&quot;, </span><br><span class=\"line\">        &quot;5&quot;:&quot;2018-09-09&quot;, </span><br><span class=\"line\">        &quot;6&quot;:&quot;2018-09-16&quot;, </span><br><span class=\"line\">        &quot;7&quot;:&quot;2018-09-23&quot;, </span><br><span class=\"line\">        &quot;8&quot;:&quot;2018-09-30&quot;, </span><br><span class=\"line\">        &quot;9&quot;:&quot;2018-10-07&quot;, </span><br><span class=\"line\">        &quot;10&quot;:&quot;2018-10-14&quot;, </span><br><span class=\"line\">        &quot;11&quot;:&quot;2018-10-21&quot;, </span><br><span class=\"line\">        &quot;12&quot;:&quot;2018-10-28&quot;, </span><br><span class=\"line\">        &quot;13&quot;:&quot;2018-11-04&quot;, </span><br><span class=\"line\">        &quot;14&quot;:&quot;2018-11-11&quot;, </span><br><span class=\"line\">        &quot;15&quot;:&quot;2018-11-18&quot;, </span><br><span class=\"line\">        &quot;16&quot;:&quot;2018-11-25&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题筛查\"><a href=\"#问题筛查\" class=\"headerlink\" title=\"问题筛查\"></a>问题筛查</h3><hr>\n<p>经过筛查，问题出现在qs模块格式化过程中，服务器拿到的数据解码后类型错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端发送：qs.stringify(data)</span><br><span class=\"line\">服务端接手：req.body = qs.parse(req.body);</span><br></pre></td></tr></table></figure>\n<p>判断结果是qs格式化对数组的支持有问题。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><hr>\n<p>最简单粗暴的解决办法就是在qs格式化之前把数组数据JSON格式化下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端发送：\tdata = JSON.stringify(data);</span><br><span class=\"line\">\t\t\tqs.stringify(data)</span><br><span class=\"line\">服务端接手：\treq.body = qs.parse(req.body);</span><br><span class=\"line\">\t\t\treq.body = JSON.parse(req.body);</span><br></pre></td></tr></table></figure>\n<p>但是这显然不是一个优秀的解决办法，究根结底是传入的数组并不是严格的json对象导致的，才会出现默认键的键值对的格式化结果。</p>\n<h4 id=\"arrayFormat解决办法\"><a href=\"#arrayFormat解决办法\" class=\"headerlink\" title=\"arrayFormat解决办法\"></a>arrayFormat解决办法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qs.stringify(&#123; &apos;list&apos;:this.excelData &#125;,&#123; arrayFormat: &apos;brackets&apos; &#125;)</span><br><span class=\"line\">// arrayFormat 可以格式化你的数组参数</span><br><span class=\"line\"></span><br><span class=\"line\">arrayformat选项输出 指定数组的格式</span><br><span class=\"line\">　　\tqs.stringify(&#123; id: [&apos;b&apos;, &apos;c&apos;] &#125;, &#123; arrayFormat: &apos;indices&apos; &#125;)</span><br><span class=\"line\">　　\t\t// &apos;id[0]=b&amp;id[1]=c&apos;</span><br><span class=\"line\">　　\tqs.stringify(&#123; id: [&apos;b&apos;, &apos;c&apos;] &#125;, &#123; arrayFormat: &apos;brackets&apos; &#125;)</span><br><span class=\"line\">　　\t\t// &apos;id[]=b&amp;id[]=c&apos;</span><br><span class=\"line\">　　\tqs.stringify(&#123; id: [&apos;b&apos;, &apos;c&apos;] &#125;, &#123; arrayFormat: &apos;repeat&apos; &#125;)</span><br><span class=\"line\">　　\t\t// &apos;id=b&amp;id=c&apos;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p><a href=\"https://github.com/AiYooooo/Ai-Finance\" target=\"_blank\" rel=\"noopener\">新手向 Vue + Node.js + MongoDB 实现自己的账务管理系统</a></p>\n<p>这两天自己的记账网站突然出现了一个问题，很怪异，比如一个时间列表，期望的存储形式是数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&quot;2018-08-05&quot;, </span><br><span class=\"line\">       &quot;2018-08-12&quot;, </span><br><span class=\"line\">       &quot;2018-08-19&quot;, </span><br><span class=\"line\">       &quot;2018-08-26&quot;, </span><br><span class=\"line\">       &quot;2018-09-02&quot;, </span><br><span class=\"line\">       &quot;2018-09-09&quot;, </span><br><span class=\"line\">       &quot;2018-09-16&quot;, </span><br><span class=\"line\">       &quot;2018-09-23&quot;, </span><br><span class=\"line\">       &quot;2018-09-30&quot;, </span><br><span class=\"line\">       &quot;2018-10-07&quot;, </span><br><span class=\"line\">       &quot;2018-10-14&quot;, </span><br><span class=\"line\">       &quot;2018-10-21&quot;, </span><br><span class=\"line\">       &quot;2018-10-28&quot;, </span><br><span class=\"line\">       &quot;2018-11-04&quot;, </span><br><span class=\"line\">       &quot;2018-11-11&quot;, </span><br><span class=\"line\">       &quot;2018-11-18&quot;, </span><br><span class=\"line\">       &quot;2018-11-25&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可是存储之后到数据库里就变成了 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&quot;0&quot;:&quot;2018-08-05&quot;, </span><br><span class=\"line\">        &quot;1&quot;:&quot;2018-08-12&quot;, </span><br><span class=\"line\">        &quot;2&quot;:&quot;2018-08-19&quot;, </span><br><span class=\"line\">        &quot;3&quot;:&quot;2018-08-26&quot;, </span><br><span class=\"line\">        &quot;4&quot;:&quot;2018-09-02&quot;, </span><br><span class=\"line\">        &quot;5&quot;:&quot;2018-09-09&quot;, </span><br><span class=\"line\">        &quot;6&quot;:&quot;2018-09-16&quot;, </span><br><span class=\"line\">        &quot;7&quot;:&quot;2018-09-23&quot;, </span><br><span class=\"line\">        &quot;8&quot;:&quot;2018-09-30&quot;, </span><br><span class=\"line\">        &quot;9&quot;:&quot;2018-10-07&quot;, </span><br><span class=\"line\">        &quot;10&quot;:&quot;2018-10-14&quot;, </span><br><span class=\"line\">        &quot;11&quot;:&quot;2018-10-21&quot;, </span><br><span class=\"line\">        &quot;12&quot;:&quot;2018-10-28&quot;, </span><br><span class=\"line\">        &quot;13&quot;:&quot;2018-11-04&quot;, </span><br><span class=\"line\">        &quot;14&quot;:&quot;2018-11-11&quot;, </span><br><span class=\"line\">        &quot;15&quot;:&quot;2018-11-18&quot;, </span><br><span class=\"line\">        &quot;16&quot;:&quot;2018-11-25&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题筛查\"><a href=\"#问题筛查\" class=\"headerlink\" title=\"问题筛查\"></a>问题筛查</h3><hr>\n<p>经过筛查，问题出现在qs模块格式化过程中，服务器拿到的数据解码后类型错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端发送：qs.stringify(data)</span><br><span class=\"line\">服务端接手：req.body = qs.parse(req.body);</span><br></pre></td></tr></table></figure>\n<p>判断结果是qs格式化对数组的支持有问题。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><hr>\n<p>最简单粗暴的解决办法就是在qs格式化之前把数组数据JSON格式化下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端发送：\tdata = JSON.stringify(data);</span><br><span class=\"line\">\t\t\tqs.stringify(data)</span><br><span class=\"line\">服务端接手：\treq.body = qs.parse(req.body);</span><br><span class=\"line\">\t\t\treq.body = JSON.parse(req.body);</span><br></pre></td></tr></table></figure>\n<p>但是这显然不是一个优秀的解决办法，究根结底是传入的数组并不是严格的json对象导致的，才会出现默认键的键值对的格式化结果。</p>\n<h4 id=\"arrayFormat解决办法\"><a href=\"#arrayFormat解决办法\" class=\"headerlink\" title=\"arrayFormat解决办法\"></a>arrayFormat解决办法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qs.stringify(&#123; &apos;list&apos;:this.excelData &#125;,&#123; arrayFormat: &apos;brackets&apos; &#125;)</span><br><span class=\"line\">// arrayFormat 可以格式化你的数组参数</span><br><span class=\"line\"></span><br><span class=\"line\">arrayformat选项输出 指定数组的格式</span><br><span class=\"line\">　　\tqs.stringify(&#123; id: [&apos;b&apos;, &apos;c&apos;] &#125;, &#123; arrayFormat: &apos;indices&apos; &#125;)</span><br><span class=\"line\">　　\t\t// &apos;id[0]=b&amp;id[1]=c&apos;</span><br><span class=\"line\">　　\tqs.stringify(&#123; id: [&apos;b&apos;, &apos;c&apos;] &#125;, &#123; arrayFormat: &apos;brackets&apos; &#125;)</span><br><span class=\"line\">　　\t\t// &apos;id[]=b&amp;id[]=c&apos;</span><br><span class=\"line\">　　\tqs.stringify(&#123; id: [&apos;b&apos;, &apos;c&apos;] &#125;, &#123; arrayFormat: &apos;repeat&apos; &#125;)</span><br><span class=\"line\">　　\t\t// &apos;id=b&amp;id=c&apos;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjkvxydw300005xfaeev45l5h","tag_id":"cjkvxydw900025xfa2rwglk3l","_id":"cjkvxydwf00075xfaqvfg3p9w"},{"post_id":"cjkvxydw700015xfazzqld0p6","tag_id":"cjkvxydwe00065xfa0b60n8f2","_id":"cjkvxydwj000c5xfazgq8hjyx"},{"post_id":"cjkvxydwb00035xfahsr2hdpz","tag_id":"cjkvxydwi000a5xfab9ttwrhg","_id":"cjkvxydwn000g5xfa6kv7ry2a"},{"post_id":"cjkvxydwc00045xfa5ile930o","tag_id":"cjkvxydwk000e5xfajhcy8fsw","_id":"cjkvxydwr000k5xfa711h7s7n"},{"post_id":"cjkvxydwe00055xfavjmwnukp","tag_id":"cjkvxydwk000e5xfajhcy8fsw","_id":"cjkvxydwu000o5xfar64nudm0"},{"post_id":"cjkvxydwf00085xfas0h733me","tag_id":"cjkvxydwk000e5xfajhcy8fsw","_id":"cjkvxydww000s5xfa0frekhgx"},{"post_id":"cjkvxydwh00095xfaokb9hlu6","tag_id":"cjkvxydwk000e5xfajhcy8fsw","_id":"cjkvxydwy000w5xfaq3tboy6d"},{"post_id":"cjkvxydwx000v5xfa07damrga","tag_id":"cjkvxydwi000a5xfab9ttwrhg","_id":"cjkvxydwz000y5xfag5mdtngm"},{"post_id":"cjkvxydwi000b5xfa847nichx","tag_id":"cjkvxydwx000u5xfaqtgae7zc","_id":"cjkvxydx000105xfa2pg0tij5"},{"post_id":"cjkvxydwj000d5xfaf99iaofi","tag_id":"cjkvxydx0000z5xfajqs6f9r4","_id":"cjkvxydx100125xfaptupaeth"},{"post_id":"cjkvxydwl000f5xfauh46hh5b","tag_id":"cjkvxydx100115xfaggox8mzv","_id":"cjkvxydx100145xfasb14alk7"},{"post_id":"cjkvxydwn000h5xfaqjl5g6pw","tag_id":"cjkvxydx100135xfay42u5lpb","_id":"cjkvxydx200165xfawxpzbtlx"},{"post_id":"cjkvxydwp000j5xfazzd20rmg","tag_id":"cjkvxydx100115xfaggox8mzv","_id":"cjkvxydx200185xfaentyubht"},{"post_id":"cjkvxydwr000l5xfahjy4utou","tag_id":"cjkvxydwx000u5xfaqtgae7zc","_id":"cjkvxydx3001a5xfag8qq1cdq"},{"post_id":"cjkvxydwt000n5xfag51itw5h","tag_id":"cjkvxydx0000z5xfajqs6f9r4","_id":"cjkvxydx3001c5xfa8yk45bfz"},{"post_id":"cjkvxydwu000p5xfaiz4rv0oi","tag_id":"cjkvxydx3001b5xfaj3gogucn","_id":"cjkvxydx4001e5xfamepgik17"},{"post_id":"cjkvxydwv000r5xfa5k1sxp5t","tag_id":"cjkvxydwx000u5xfaqtgae7zc","_id":"cjkvxydx5001g5xfad5ddqi3n"},{"post_id":"cjkvxydww000t5xfawxxy7boz","tag_id":"cjkvxydx0000z5xfajqs6f9r4","_id":"cjkvxydx6001i5xfahubms23t"},{"post_id":"cjkvxydwy000x5xfaxqg2l10v","tag_id":"cjkvxydx5001h5xfa9jvtsnq9","_id":"cjkvxydx6001j5xfaborew2po"},{"post_id":"cjkvxydxz001l5xfa5z5il6wu","tag_id":"cjkvxydwi000a5xfab9ttwrhg","_id":"cjkvxydy2001o5xfafy1cudz5"},{"post_id":"cjkvxydxy001k5xfa7cr9ii98","tag_id":"cjkvxydy0001m5xfam8ffchso","_id":"cjkvxydy7001w5xfae5je3sy2"},{"post_id":"cjkvxydxy001k5xfa7cr9ii98","tag_id":"cjkvxydy4001r5xfalkw3sfg8","_id":"cjkvxydy7001y5xfat9f60xxr"},{"post_id":"cjkvxydy0001n5xfaegm1vkp7","tag_id":"cjkvxydy6001u5xfangbhkln0","_id":"cjkvxydy800215xfabsxxz31s"},{"post_id":"cjkvxydy2001p5xfa7uj636ft","tag_id":"cjkvxydy0001m5xfam8ffchso","_id":"cjkvxydyb00255xfazpl7n9tu"},{"post_id":"cjkvxydy2001p5xfa7uj636ft","tag_id":"cjkvxydy8001z5xfa70uk0jf4","_id":"cjkvxydyb00275xfa2h3ugm5i"},{"post_id":"cjkvxydya00245xfawqm3snbj","tag_id":"cjkvxydwi000a5xfab9ttwrhg","_id":"cjkvxydyd002a5xfa8dp9czat"},{"post_id":"cjkvxydy3001q5xfabiww2vh6","tag_id":"cjkvxydy900235xfageattfoh","_id":"cjkvxydyd002b5xfalhf0tjus"},{"post_id":"cjkvxydy4001s5xfa7ih08a4i","tag_id":"cjkvxydyc00295xfapihtg6uu","_id":"cjkvxydye002d5xfa5ez0nc7y"},{"post_id":"cjkvxydy5001t5xfa6cor0hq7","tag_id":"cjkvxydy900235xfageattfoh","_id":"cjkvxydye002f5xfadwwbm2hj"},{"post_id":"cjkvxydy6001v5xfamgk9htbg","tag_id":"cjkvxydye002e5xfac27d0p01","_id":"cjkvxydyf002h5xfaylciqqjq"},{"post_id":"cjkvxydy7001x5xfag2vdyluk","tag_id":"cjkvxydye002e5xfac27d0p01","_id":"cjkvxydyf002j5xfatj0j2d46"},{"post_id":"cjkvxydy800205xfav72oyrn5","tag_id":"cjkvxydye002e5xfac27d0p01","_id":"cjkvxydyg002l5xfageeylu44"},{"post_id":"cjkvxydy900225xfae9awe974","tag_id":"cjkvxydye002e5xfac27d0p01","_id":"cjkvxydyg002n5xfaazhvsg5n"},{"post_id":"cjkvxydyb00265xfas1q6r95t","tag_id":"cjkvxydye002e5xfac27d0p01","_id":"cjkvxydyh002p5xfakz1uo8gb"},{"post_id":"cjkvxydyc00285xfag50ua03w","tag_id":"cjkvxydyg002o5xfajl45a41t","_id":"cjkvxydyh002q5xfax9ehhxal"},{"post_id":"cjp29dp040000xnfaocyraf0l","tag_id":"cjkvxydy0001m5xfam8ffchso","_id":"cjp29dp0a0001xnfadeashatr"}],"Tag":[{"name":"Angular","_id":"cjkvxydw900025xfa2rwglk3l"},{"name":"CSS","_id":"cjkvxydwe00065xfa0b60n8f2"},{"name":"JavaScript","_id":"cjkvxydwi000a5xfab9ttwrhg"},{"name":"Nginx","_id":"cjkvxydwk000e5xfajhcy8fsw"},{"name":"LeetCode","_id":"cjkvxydwx000u5xfaqtgae7zc"},{"name":"ES6","_id":"cjkvxydx0000z5xfajqs6f9r4"},{"name":"ReactNative","_id":"cjkvxydx100115xfaggox8mzv"},{"name":"Sublime","_id":"cjkvxydx100135xfay42u5lpb"},{"name":"VPS","_id":"cjkvxydx3001b5xfaj3gogucn"},{"name":"fetch","_id":"cjkvxydx5001h5xfa9jvtsnq9"},{"name":"Node.js","_id":"cjkvxydy0001m5xfam8ffchso"},{"name":"Koa","_id":"cjkvxydy4001r5xfalkw3sfg8"},{"name":"mockAPI","_id":"cjkvxydy6001u5xfangbhkln0"},{"name":"MongoDB","_id":"cjkvxydy8001z5xfa70uk0jf4"},{"name":"Redux","_id":"cjkvxydy900235xfageattfoh"},{"name":"Netlify","_id":"cjkvxydyc00295xfapihtg6uu"},{"name":"San","_id":"cjkvxydye002e5xfac27d0p01"},{"name":"webpack","_id":"cjkvxydyg002o5xfajl45a41t"}]}}