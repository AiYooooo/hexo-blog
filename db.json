{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/anisina/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/anisina/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/anisina/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/anisina/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/anisina/source/css/blog-style.css","path":"css/blog-style.css","modified":1,"renderable":1},{"_id":"themes/anisina/source/css/syntax.styl","path":"css/syntax.styl","modified":1,"renderable":1},{"_id":"themes/anisina/source/js/blog.js","path":"js/blog.js","modified":1,"renderable":1},{"_id":"themes/anisina/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/anisina/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/anisina/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/anisina/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/anisina/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/anisina/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/anisina/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"490bde5fa32b475a15395475665d08f432582042","modified":1517798554420},{"_id":"themes/anisina/README.md","hash":"ebde4101f083169abf82f5d9aa6fa34959d5cf11","modified":1499966658000},{"_id":"themes/anisina/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1499966658000},{"_id":"themes/anisina/.DS_Store","hash":"18cbf78dfd705e831d9818e021dca1b62594072c","modified":1513596570583},{"_id":"themes/anisina/package.json","hash":"12541fbf56f785e4f5d486a55b4939f3033f625b","modified":1499966658000},{"_id":"themes/anisina/_config.yml","hash":"06bccfc42b143659f59ea78938f00c217ac5574d","modified":1499966658000},{"_id":"source/Tags/index.md","hash":"1217b3da44d6a04111cde1c16e041b0c4f9ab985","modified":1513759639959},{"_id":"source/_posts/LeetCode_3.md","hash":"8921fb2905f969288d7a4c700adc03fd38e79013","modified":1515932463828},{"_id":"source/_posts/LeetCode_214.md","hash":"3b0e3a291ab7daaa18dbe3cc96c162b541b93a50","modified":1515932458360},{"_id":"source/_posts/LeetCode_65.md","hash":"8b42b5713c6b04f48c97c9ae0962e34d29031263","modified":1520583344365},{"_id":"source/_posts/.DS_Store","hash":"6f57bc96de85c2a1b291b7c55a8fc90975f5b5ee","modified":1517801410196},{"_id":"source/_posts/nginx.md","hash":"f9393f982c341e2ddb5f5a8dd111a346e72f977b","modified":1520655749203},{"_id":"source/_posts/san1.md","hash":"358cda78ce7d304b1b77642a071cf7417f2e4cfa","modified":1517125779007},{"_id":"source/_posts/node_mongoose_1.md","hash":"5eaea86ea44c9fd92bf1fd101a96541db0959631","modified":1515932468849},{"_id":"source/_posts/san2.md","hash":"b663a316cb3db4a666f0fc2c75ca995503c2a859","modified":1517129827472},{"_id":"source/_posts/san3.md","hash":"5fc7828092dfebf7c243170e51bff85243b32764","modified":1517374791367},{"_id":"source/_posts/san4.md","hash":"e3795435269d15c553a68bc3d6d95f6c0fa7dff3","modified":1517545494407},{"_id":"source/_posts/san5.md","hash":"ef29a5bcadf4a14c449fa49fa823cdea7d53ef33","modified":1517810087423},{"_id":"source/_posts/VPS.md","hash":"a10e44d5b2627e827f0ee2269e513a97e9092753","modified":1520580840467},{"_id":"source/_posts/koa1.md","hash":"6d04584cff2f7a26362bd228c9f4e5f2c1b1f076","modified":1516176650321},{"_id":"themes/anisina/.idea/Anisina.iml","hash":"4240dabdc746a36bae8a56eeec04a3a3fc59d842","modified":1499966658000},{"_id":"themes/anisina/.idea/modules.xml","hash":"6f81355dee5b607683bdbd56595a930fb4b83c8b","modified":1499966658000},{"_id":"themes/anisina/.idea/vcs.xml","hash":"c92f3eb0ad1c70371e177a4d7d741f90af3f902c","modified":1499966658000},{"_id":"themes/anisina/.idea/workspace.xml","hash":"7c5d920658041056cc34836371895677b507001c","modified":1499966658000},{"_id":"themes/anisina/Screenshots/mobile-index.jpeg","hash":"cd75f77f5d865d42182e2233e354eeba9f114d98","modified":1499966658000},{"_id":"themes/anisina/layout/about.ejs","hash":"d409109a84aa5c032e1a230c973a91b293765176","modified":1499966658000},{"_id":"themes/anisina/layout/.DS_Store","hash":"f60423538e7d115abf8c86b365e85ad35b418b25","modified":1499966658000},{"_id":"themes/anisina/layout/404.ejs","hash":"1fe05722bd1b32bbe0ae4e3e880866f935e0ae11","modified":1499966658000},{"_id":"themes/anisina/layout/archive.ejs","hash":"9233a4713382432b315f337adbf1db2b63082971","modified":1499966658000},{"_id":"themes/anisina/layout/index.ejs","hash":"a94ac678f6b24a46824d45ec058b0ab2105a92c9","modified":1499966658000},{"_id":"themes/anisina/layout/layout.ejs","hash":"b728827bf3ec55baf96a882032397e6c74c65f34","modified":1499966658000},{"_id":"themes/anisina/layout/poetry.ejs","hash":"6c955d419050825e13d39c780d45aceafbf6552d","modified":1499966658000},{"_id":"themes/anisina/layout/page.ejs","hash":"95bbc74aa6d10cddddd7a5cd5d2a06482f5ea173","modified":1499966658000},{"_id":"themes/anisina/layout/tags.ejs","hash":"ff363455eeddfd389ecf6c5ab090408e1d2ef4e6","modified":1499966658000},{"_id":"themes/anisina/layout/post.ejs","hash":"9427ac91b2bc36c339b528d9a569c038f0b18efa","modified":1499966658000},{"_id":"themes/anisina/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1499966658000},{"_id":"themes/anisina/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1499966658000},{"_id":"themes/anisina/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1499966658000},{"_id":"themes/anisina/layout/works.ejs","hash":"1df954e54098cc4845295836374abed870789dcd","modified":1499966658000},{"_id":"themes/anisina/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1499966658000},{"_id":"themes/anisina/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1499966658000},{"_id":"themes/anisina/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1499966658000},{"_id":"themes/anisina/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1499966658000},{"_id":"themes/anisina/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1499966658000},{"_id":"themes/anisina/source/.DS_Store","hash":"9ae5a2856d796fdb7b1849de5e23eb222df306e5","modified":1513596575587},{"_id":"themes/anisina/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1499966658000},{"_id":"themes/anisina/.idea/inspectionProfiles/Project_Default.xml","hash":"cb98213afbdfab7620cd4b6ba8801035079b4ae5","modified":1499966658000},{"_id":"themes/anisina/Screenshots/Anisina.png","hash":"146dd991f55a827a514259e20a51de1e9b07a13d","modified":1499966658000},{"_id":"themes/anisina/layout/_partial/footer.ejs","hash":"173de3c8462ae660aa815f001b86d1e58f8cb5da","modified":1513586316990},{"_id":"themes/anisina/layout/_partial/head.ejs","hash":"4e0d96cac503d4e3a5b254d8b8175c392971ce38","modified":1499966658000},{"_id":"themes/anisina/layout/_partial/nav.ejs","hash":"3baa41d595e951efa1db34dd1789c6f8d3b094da","modified":1499966658000},{"_id":"themes/anisina/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1499966658000},{"_id":"themes/anisina/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1499966658000},{"_id":"themes/anisina/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1499966658000},{"_id":"themes/anisina/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1499966658000},{"_id":"themes/anisina/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1499966658000},{"_id":"themes/anisina/source/css/blog-style.css","hash":"c6830e31138e412c2aa05228c4cd6035063fe651","modified":1499966658000},{"_id":"themes/anisina/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1499966658000},{"_id":"themes/anisina/source/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1499966658000},{"_id":"themes/anisina/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1499966658000},{"_id":"themes/anisina/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1499966658000},{"_id":"themes/anisina/source/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1499966658000},{"_id":"themes/anisina/Screenshots/poetry-show.png","hash":"f5fdcd25026a87a0aafeebb1f19cdb3c0a81a666","modified":1499966658000},{"_id":"themes/anisina/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1499966658000},{"_id":"themes/anisina/source/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1499966658000},{"_id":"themes/anisina/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1499966658000},{"_id":"themes/anisina/Screenshots/mobile-post.jpeg","hash":"2081cdff23a9a8c185a48d9aabcc9dc8e77833ec","modified":1499966658000},{"_id":"themes/anisina/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1499966658000},{"_id":"themes/anisina/Screenshots/pc-index.png","hash":"b04094dac75cb656b4244c1dfaf246168a0f8926","modified":1499966658000},{"_id":"themes/anisina/Screenshots/pc-post.png","hash":"cde56c0797b6ff8dd555fb1f8c3f9b21bceaa3be","modified":1499966658000},{"_id":"public/Tags/index.html","hash":"94ed067b3ce871ffcf5bd20c61a0a6bb39466ae9","modified":1520656355617},{"_id":"public/2018/01/06/san2/index.html","hash":"97c737b1ae0a909853a6a161ae9f43bffbea1145","modified":1520656355636},{"_id":"public/2018/01/05/san1/index.html","hash":"dbb7ca127946d5377cd22a17fbc97336fb3e8e27","modified":1520656355640},{"_id":"public/2018/01/01/koa1/index.html","hash":"7bc99ff4c400de59ac374850e6ae1d370e414c37","modified":1520656355641},{"_id":"public/2017/12/26/LeetCode_214/index.html","hash":"c092bef25846435dbf2d9edb82e4952a4638e4c9","modified":1520656355641},{"_id":"public/2017/12/24/node_mongoose_1/index.html","hash":"ae4b825f91d54c3f9355449a68cf141e541478ce","modified":1520656355641},{"_id":"public/2017/12/20/LeetCode_3/index.html","hash":"a5444fe4c139466e6606814c8410a772d96380ac","modified":1520656355641},{"_id":"public/archives/index.html","hash":"d93c0dc64b24a7255f65a606c6a7947869aa5ebf","modified":1520656355641},{"_id":"public/archives/2017/index.html","hash":"08270cdc947fb2084625593f7191cde20ac01562","modified":1520656355641},{"_id":"public/archives/2017/12/index.html","hash":"323303775941e10cd392f48d0bc3dd3c1c5401cc","modified":1520656355641},{"_id":"public/archives/2018/index.html","hash":"92c36c6b0ce498f594bc01e4bf6824328daa2c85","modified":1520656355641},{"_id":"public/archives/2018/01/index.html","hash":"ca8a541004b8176571eb58e41fbb3ebd7d08e593","modified":1520656355642},{"_id":"public/tags/LeetCode/index.html","hash":"c60ad73931c920197e46e975ccaa6c288bf558eb","modified":1520656355642},{"_id":"public/tags/San/index.html","hash":"8d1a1d7771296292a758a72efde85d08a9140423","modified":1520656355642},{"_id":"public/tags/MongoDB/index.html","hash":"7881955b992db04e254c0c6bdac870b0d5a9f879","modified":1520656355642},{"_id":"public/tags/Node-js/index.html","hash":"dd513ed955c71db37fc55e9c71e7a30c5a53c961","modified":1520656355642},{"_id":"public/tags/Koa/index.html","hash":"bda67b89fd6300600fda82f90553d2cf196a7207","modified":1520656355642},{"_id":"public/index.html","hash":"7e6ddbf869216f69b24b3eead95beadc6d9a0dad","modified":1520656355642},{"_id":"public/2018/01/25/LeetCode_65/index.html","hash":"68a31973aee9becc8a2408c3ecf09069df18aca6","modified":1520656355666},{"_id":"public/2018/01/20/VPS/index.html","hash":"b180c5e09994d9b211d176d13891037d4ae95b04","modified":1520656355666},{"_id":"public/2018/01/28/nginx/index.html","hash":"906e370d046414fe9cc601cd6d8f0f2fd5b1f7a3","modified":1520656355666},{"_id":"public/2018/01/14/san5/index.html","hash":"fc75c6c45164ca4cfb06e9c67ed37081e0876d39","modified":1520656355666},{"_id":"public/2018/01/11/san4/index.html","hash":"48618d7e7644b0d355885f251fadd84427a033ac","modified":1520656355667},{"_id":"public/2018/01/09/san3/index.html","hash":"99284853d09922b9bb6e4babbe2247ae69f3f13a","modified":1520656355667},{"_id":"public/archives/page/2/index.html","hash":"e17b5543d82e31c997919c1903c6372b4b3a2e65","modified":1520656355667},{"_id":"public/tags/Nginx/index.html","hash":"f8c0b842497a85d885c7857c9e4a4c3c85a5fc6c","modified":1520656355667},{"_id":"public/tags/VPS/index.html","hash":"7d1edfbdb59b8eef1c3f7e7abd021b70869f2ba8","modified":1520656355667},{"_id":"public/page/2/index.html","hash":"c6aa446d8e8cb4cc0132f20421e48ba01ba2c728","modified":1520656355667},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1520656355669},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1520656355669},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1520656355669},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1520656355669},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1520656355860},{"_id":"public/css/syntax.css","hash":"4616879fec214c9cc4f5835615348f0bbeabf2a9","modified":1520656355865},{"_id":"public/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1520656355865},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1520656355865},{"_id":"public/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1520656355865},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1520656355865},{"_id":"public/css/blog-style.css","hash":"c6830e31138e412c2aa05228c4cd6035063fe651","modified":1520656355865},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1520656355865},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1520656355866},{"_id":"public/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1520656355866}],"Category":[],"Data":[],"Page":[{"title":"Tags","header-img":"tags.jpeg","layout":"tags","_content":"","source":"Tags/index.md","raw":"---\ntitle: Tags\nheader-img: \"tags.jpeg\"\nlayout: tags\n---\n","date":"2017-12-20T08:47:19.959Z","updated":"2017-12-20T08:47:19.959Z","path":"Tags/index.html","comments":1,"_id":"cjekvj52i0000rmjf7ou5dlif","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"LeetCode刷题系列(2)(question 214)","subtitle":"Shortest Palindrome","date":"2017-12-25T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在[LeetCode](https://leetcode.com)上遇见的有意思、有难度或者有其他精彩答案的题目。\n所用语言为JavaScript。\n\n----------\n\n\n### 题目号码：214（hard）\n-------------\n\n\n> **Shortest Palindrome:**\n> Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it. \n> Find and return the shortest palindrome you can find by performing this transformation.\n> \n> **Examples:**\n> - Given \"aacecaaa\", return \"aaacecaaa\".\n> - Given \"abcd\", return \"dcbabcd\".\n\n#### 题意\n给定一个字符串S，可以通过在它前面添加字符将其转换为回文。通过执行这个转换，找到并返回最短的回文。\n\n-------------\n\n#### 思路\n从字符串结尾开始遍历，与字符串开头对应位置的字母进行比较，如果不一致则插入一个相同的字母来形成回文\n\n#### 我的解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    for(var i=s.length-1; i>=0; i--){\n        if(s[i] !== s[s.length-1-i]){\n            var s1 = s.substr(0,s.length-1-i);\n            var s2 = s.substring(s.length-1-i);\n            var ss = s[i];\n            s = ''+s1+ss+s2;\n            i++;\n        }\n    }\n    return s;\n};\n```\n##### 分析如下：\n\n但是这种解法却没有通过测试，具体情况是：\n    - 给出字符串 \"aabba\"\n    - 我的输出结果为 \"abbabba\"\n    - 期望输出结果为 \"abbaabba\"\n\n乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\n-------------\n\n#### 思路\n既然只能在给定字符串开头插入，那么就是说我需要找到给出字符串中自开头最大的回文子串，然后把剩下的字符串颠倒顺序插入即可。\n\n#### 我的解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar findMaxIndex = function(s){\n    for(var i=s.length-1; i>=0; i--){\n        if(s[i] != s[s.length-1-i]){\n            return false;\n        }else{\n            continue;\n        }\n    }\n    return true;\n}\nvar shortestPalindrome = function(s) {\n    var index;\n    if(s.length == 1){ return s; }\n    for(var i=s.length; i>0; i--){\n        var s0 = s.substring(0,i);\n        if(!findMaxIndex(s0)){\n            continue;\n        }else{\n            index = i;\n            break;\n        }\n    }\n    var s1 = s.substr(0,index);\n    var s2 = s.substring(index);\n    var ss = s2.split(\"\").reverse().join(\"\");\n    return ss + s1 + s2;\n};\n```\n##### 分析如下：\n\n但是这种解法却没有通过测试，具体情况是：\n    - 超时，给出一个超长的\"aaaaaaa...aaa\"字符串\n这就要求我找到一个效率更高的解法。\n\n#### 分析解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar shortestPalindrome = function(s) {\n    var prefix = \"\";\n    var pos, head, tail;\n\n    for(pos = head = tail = parseInt(s.length / 2); pos > 0; head = tail = --pos){\n        while(head !== 0 && s[head - 1] === s[head]){\n            head--; pos--;\n        }\n        while(tail != s.length - 1 && s[tail + 1] === s[tail]){\n            tail++;\n        }\n        var isSame = true;\n        while(head >= 0){\n            if(s[head] !== s[tail]){\n                isSame = false;\n                break;\n            }\n            head--; tail++;\n        }\n        if(isSame){\n            break;\n        }\n    }\n\n    for(var k = s.length - 1; k >= tail && k !== 0; k--){\n        prefix += s[k];\n    }\n    return prefix + s;\n}\n```\n##### 分析如下：\n\n\t1. 思路：\n        * 取一个点，也就是期望的回文中心，把head和tail都指向它，先找前后相同的数，调整指针位置，然后head--, tail++这样找回文。\n        * 如果head等于0，说明找到了，倒着输出tail后面的字符加上input的字符串就是答案。\n        * 字符串中间和中间之前的点才有可能是回文的中心，后一半可以排除。\n        * 回文中心可能是单个或多个字母，如果是多个字母，他们肯定都是相同的。\n    2. 变量设置\n\t\t* prefix：用来存储原字符串中非回文部分的倒序\n\t\t* pos：回文中心点\n\t\t* head：回文头位置\n\t\t* tail：回文尾位置","source":"_posts/LeetCode_214.md","raw":"---\nlayout: post\ntitle: \"LeetCode刷题系列(2)(question 214)\"\nsubtitle: \"Shortest Palindrome\"\ndate: 2017-12-26\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- LeetCode\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在[LeetCode](https://leetcode.com)上遇见的有意思、有难度或者有其他精彩答案的题目。\n所用语言为JavaScript。\n\n----------\n\n\n### 题目号码：214（hard）\n-------------\n\n\n> **Shortest Palindrome:**\n> Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it. \n> Find and return the shortest palindrome you can find by performing this transformation.\n> \n> **Examples:**\n> - Given \"aacecaaa\", return \"aaacecaaa\".\n> - Given \"abcd\", return \"dcbabcd\".\n\n#### 题意\n给定一个字符串S，可以通过在它前面添加字符将其转换为回文。通过执行这个转换，找到并返回最短的回文。\n\n-------------\n\n#### 思路\n从字符串结尾开始遍历，与字符串开头对应位置的字母进行比较，如果不一致则插入一个相同的字母来形成回文\n\n#### 我的解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    for(var i=s.length-1; i>=0; i--){\n        if(s[i] !== s[s.length-1-i]){\n            var s1 = s.substr(0,s.length-1-i);\n            var s2 = s.substring(s.length-1-i);\n            var ss = s[i];\n            s = ''+s1+ss+s2;\n            i++;\n        }\n    }\n    return s;\n};\n```\n##### 分析如下：\n\n但是这种解法却没有通过测试，具体情况是：\n    - 给出字符串 \"aabba\"\n    - 我的输出结果为 \"abbabba\"\n    - 期望输出结果为 \"abbaabba\"\n\n乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\n-------------\n\n#### 思路\n既然只能在给定字符串开头插入，那么就是说我需要找到给出字符串中自开头最大的回文子串，然后把剩下的字符串颠倒顺序插入即可。\n\n#### 我的解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar findMaxIndex = function(s){\n    for(var i=s.length-1; i>=0; i--){\n        if(s[i] != s[s.length-1-i]){\n            return false;\n        }else{\n            continue;\n        }\n    }\n    return true;\n}\nvar shortestPalindrome = function(s) {\n    var index;\n    if(s.length == 1){ return s; }\n    for(var i=s.length; i>0; i--){\n        var s0 = s.substring(0,i);\n        if(!findMaxIndex(s0)){\n            continue;\n        }else{\n            index = i;\n            break;\n        }\n    }\n    var s1 = s.substr(0,index);\n    var s2 = s.substring(index);\n    var ss = s2.split(\"\").reverse().join(\"\");\n    return ss + s1 + s2;\n};\n```\n##### 分析如下：\n\n但是这种解法却没有通过测试，具体情况是：\n    - 超时，给出一个超长的\"aaaaaaa...aaa\"字符串\n这就要求我找到一个效率更高的解法。\n\n#### 分析解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar shortestPalindrome = function(s) {\n    var prefix = \"\";\n    var pos, head, tail;\n\n    for(pos = head = tail = parseInt(s.length / 2); pos > 0; head = tail = --pos){\n        while(head !== 0 && s[head - 1] === s[head]){\n            head--; pos--;\n        }\n        while(tail != s.length - 1 && s[tail + 1] === s[tail]){\n            tail++;\n        }\n        var isSame = true;\n        while(head >= 0){\n            if(s[head] !== s[tail]){\n                isSame = false;\n                break;\n            }\n            head--; tail++;\n        }\n        if(isSame){\n            break;\n        }\n    }\n\n    for(var k = s.length - 1; k >= tail && k !== 0; k--){\n        prefix += s[k];\n    }\n    return prefix + s;\n}\n```\n##### 分析如下：\n\n\t1. 思路：\n        * 取一个点，也就是期望的回文中心，把head和tail都指向它，先找前后相同的数，调整指针位置，然后head--, tail++这样找回文。\n        * 如果head等于0，说明找到了，倒着输出tail后面的字符加上input的字符串就是答案。\n        * 字符串中间和中间之前的点才有可能是回文的中心，后一半可以排除。\n        * 回文中心可能是单个或多个字母，如果是多个字母，他们肯定都是相同的。\n    2. 变量设置\n\t\t* prefix：用来存储原字符串中非回文部分的倒序\n\t\t* pos：回文中心点\n\t\t* head：回文头位置\n\t\t* tail：回文尾位置","slug":"LeetCode_214","published":1,"updated":"2018-01-14T12:20:58.360Z","comments":1,"photos":[],"link":"","_id":"cjekvj52j0001rmjfcji0zvqu","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上遇见的有意思、有难度或者有其他精彩答案的题目。<br>所用语言为JavaScript。</p>\n<hr>\n<h3 id=\"题目号码：214（hard）\"><a href=\"#题目号码：214（hard）\" class=\"headerlink\" title=\"题目号码：214（hard）\"></a>题目号码：214（hard）</h3><hr>\n<blockquote>\n<p><strong>Shortest Palindrome:</strong><br>Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it.<br>Find and return the shortest palindrome you can find by performing this transformation.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>Given “aacecaaa”, return “aaacecaaa”.</li>\n<li>Given “abcd”, return “dcbabcd”.</li>\n</ul>\n</blockquote>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>给定一个字符串S，可以通过在它前面添加字符将其转换为回文。通过执行这个转换，找到并返回最短的回文。</p>\n<hr>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>从字符串结尾开始遍历，与字符串开头对应位置的字母进行比较，如果不一致则插入一个相同的字母来形成回文</p>\n<h4 id=\"我的解法\"><a href=\"#我的解法\" class=\"headerlink\" title=\"我的解法\"></a>我的解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class=\"line\">    for(var i=s.length-1; i&gt;=0; i--)&#123;</span><br><span class=\"line\">        if(s[i] !== s[s.length-1-i])&#123;</span><br><span class=\"line\">            var s1 = s.substr(0,s.length-1-i);</span><br><span class=\"line\">            var s2 = s.substring(s.length-1-i);</span><br><span class=\"line\">            var ss = s[i];</span><br><span class=\"line\">            s = &apos;&apos;+s1+ss+s2;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><p>但是这种解法却没有通过测试，具体情况是：</p>\n<pre><code>- 给出字符串 &quot;aabba&quot;\n- 我的输出结果为 &quot;abbabba&quot;\n- 期望输出结果为 &quot;abbaabba&quot;\n</code></pre><h2 id=\"乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\"><a href=\"#乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\" class=\"headerlink\" title=\"乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\"></a>乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。</h2><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>既然只能在给定字符串开头插入，那么就是说我需要找到给出字符串中自开头最大的回文子串，然后把剩下的字符串颠倒顺序插入即可。</p>\n<h4 id=\"我的解法-1\"><a href=\"#我的解法-1\" class=\"headerlink\" title=\"我的解法\"></a>我的解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var findMaxIndex = function(s)&#123;</span><br><span class=\"line\">    for(var i=s.length-1; i&gt;=0; i--)&#123;</span><br><span class=\"line\">        if(s[i] != s[s.length-1-i])&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var shortestPalindrome = function(s) &#123;</span><br><span class=\"line\">    var index;</span><br><span class=\"line\">    if(s.length == 1)&#123; return s; &#125;</span><br><span class=\"line\">    for(var i=s.length; i&gt;0; i--)&#123;</span><br><span class=\"line\">        var s0 = s.substring(0,i);</span><br><span class=\"line\">        if(!findMaxIndex(s0))&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            index = i;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var s1 = s.substr(0,index);</span><br><span class=\"line\">    var s2 = s.substring(index);</span><br><span class=\"line\">    var ss = s2.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class=\"line\">    return ss + s1 + s2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：-1\"><a href=\"#分析如下：-1\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><p>但是这种解法却没有通过测试，具体情况是：</p>\n<pre><code>- 超时，给出一个超长的&quot;aaaaaaa...aaa&quot;字符串\n</code></pre><p>这就要求我找到一个效率更高的解法。</p>\n<h4 id=\"分析解法\"><a href=\"#分析解法\" class=\"headerlink\" title=\"分析解法\"></a>分析解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var shortestPalindrome = function(s) &#123;</span><br><span class=\"line\">    var prefix = &quot;&quot;;</span><br><span class=\"line\">    var pos, head, tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    for(pos = head = tail = parseInt(s.length / 2); pos &gt; 0; head = tail = --pos)&#123;</span><br><span class=\"line\">        while(head !== 0 &amp;&amp; s[head - 1] === s[head])&#123;</span><br><span class=\"line\">            head--; pos--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(tail != s.length - 1 &amp;&amp; s[tail + 1] === s[tail])&#123;</span><br><span class=\"line\">            tail++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var isSame = true;</span><br><span class=\"line\">        while(head &gt;= 0)&#123;</span><br><span class=\"line\">            if(s[head] !== s[tail])&#123;</span><br><span class=\"line\">                isSame = false;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            head--; tail++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(isSame)&#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for(var k = s.length - 1; k &gt;= tail &amp;&amp; k !== 0; k--)&#123;</span><br><span class=\"line\">        prefix += s[k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return prefix + s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：-2\"><a href=\"#分析如下：-2\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><pre><code>1. 思路：\n    * 取一个点，也就是期望的回文中心，把head和tail都指向它，先找前后相同的数，调整指针位置，然后head--, tail++这样找回文。\n    * 如果head等于0，说明找到了，倒着输出tail后面的字符加上input的字符串就是答案。\n    * 字符串中间和中间之前的点才有可能是回文的中心，后一半可以排除。\n    * 回文中心可能是单个或多个字母，如果是多个字母，他们肯定都是相同的。\n2. 变量设置\n    * prefix：用来存储原字符串中非回文部分的倒序\n    * pos：回文中心点\n    * head：回文头位置\n    * tail：回文尾位置\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上遇见的有意思、有难度或者有其他精彩答案的题目。<br>所用语言为JavaScript。</p>\n<hr>\n<h3 id=\"题目号码：214（hard）\"><a href=\"#题目号码：214（hard）\" class=\"headerlink\" title=\"题目号码：214（hard）\"></a>题目号码：214（hard）</h3><hr>\n<blockquote>\n<p><strong>Shortest Palindrome:</strong><br>Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it.<br>Find and return the shortest palindrome you can find by performing this transformation.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>Given “aacecaaa”, return “aaacecaaa”.</li>\n<li>Given “abcd”, return “dcbabcd”.</li>\n</ul>\n</blockquote>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>给定一个字符串S，可以通过在它前面添加字符将其转换为回文。通过执行这个转换，找到并返回最短的回文。</p>\n<hr>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>从字符串结尾开始遍历，与字符串开头对应位置的字母进行比较，如果不一致则插入一个相同的字母来形成回文</p>\n<h4 id=\"我的解法\"><a href=\"#我的解法\" class=\"headerlink\" title=\"我的解法\"></a>我的解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class=\"line\">    for(var i=s.length-1; i&gt;=0; i--)&#123;</span><br><span class=\"line\">        if(s[i] !== s[s.length-1-i])&#123;</span><br><span class=\"line\">            var s1 = s.substr(0,s.length-1-i);</span><br><span class=\"line\">            var s2 = s.substring(s.length-1-i);</span><br><span class=\"line\">            var ss = s[i];</span><br><span class=\"line\">            s = &apos;&apos;+s1+ss+s2;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><p>但是这种解法却没有通过测试，具体情况是：</p>\n<pre><code>- 给出字符串 &quot;aabba&quot;\n- 我的输出结果为 &quot;abbabba&quot;\n- 期望输出结果为 &quot;abbaabba&quot;\n</code></pre><h2 id=\"乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\"><a href=\"#乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\" class=\"headerlink\" title=\"乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。\"></a>乍一看仿佛是我的结果更准确，但是回过头仔细审题会发现题目中要求的是“在它前面添加字符”来形成回文，即我的解法思路是错的。</h2><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>既然只能在给定字符串开头插入，那么就是说我需要找到给出字符串中自开头最大的回文子串，然后把剩下的字符串颠倒顺序插入即可。</p>\n<h4 id=\"我的解法-1\"><a href=\"#我的解法-1\" class=\"headerlink\" title=\"我的解法\"></a>我的解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var findMaxIndex = function(s)&#123;</span><br><span class=\"line\">    for(var i=s.length-1; i&gt;=0; i--)&#123;</span><br><span class=\"line\">        if(s[i] != s[s.length-1-i])&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var shortestPalindrome = function(s) &#123;</span><br><span class=\"line\">    var index;</span><br><span class=\"line\">    if(s.length == 1)&#123; return s; &#125;</span><br><span class=\"line\">    for(var i=s.length; i&gt;0; i--)&#123;</span><br><span class=\"line\">        var s0 = s.substring(0,i);</span><br><span class=\"line\">        if(!findMaxIndex(s0))&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            index = i;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var s1 = s.substr(0,index);</span><br><span class=\"line\">    var s2 = s.substring(index);</span><br><span class=\"line\">    var ss = s2.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class=\"line\">    return ss + s1 + s2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：-1\"><a href=\"#分析如下：-1\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><p>但是这种解法却没有通过测试，具体情况是：</p>\n<pre><code>- 超时，给出一个超长的&quot;aaaaaaa...aaa&quot;字符串\n</code></pre><p>这就要求我找到一个效率更高的解法。</p>\n<h4 id=\"分析解法\"><a href=\"#分析解法\" class=\"headerlink\" title=\"分析解法\"></a>分析解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var shortestPalindrome = function(s) &#123;</span><br><span class=\"line\">    var prefix = &quot;&quot;;</span><br><span class=\"line\">    var pos, head, tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    for(pos = head = tail = parseInt(s.length / 2); pos &gt; 0; head = tail = --pos)&#123;</span><br><span class=\"line\">        while(head !== 0 &amp;&amp; s[head - 1] === s[head])&#123;</span><br><span class=\"line\">            head--; pos--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(tail != s.length - 1 &amp;&amp; s[tail + 1] === s[tail])&#123;</span><br><span class=\"line\">            tail++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var isSame = true;</span><br><span class=\"line\">        while(head &gt;= 0)&#123;</span><br><span class=\"line\">            if(s[head] !== s[tail])&#123;</span><br><span class=\"line\">                isSame = false;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            head--; tail++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(isSame)&#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for(var k = s.length - 1; k &gt;= tail &amp;&amp; k !== 0; k--)&#123;</span><br><span class=\"line\">        prefix += s[k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return prefix + s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：-2\"><a href=\"#分析如下：-2\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><pre><code>1. 思路：\n    * 取一个点，也就是期望的回文中心，把head和tail都指向它，先找前后相同的数，调整指针位置，然后head--, tail++这样找回文。\n    * 如果head等于0，说明找到了，倒着输出tail后面的字符加上input的字符串就是答案。\n    * 字符串中间和中间之前的点才有可能是回文的中心，后一半可以排除。\n    * 回文中心可能是单个或多个字母，如果是多个字母，他们肯定都是相同的。\n2. 变量设置\n    * prefix：用来存储原字符串中非回文部分的倒序\n    * pos：回文中心点\n    * head：回文头位置\n    * tail：回文尾位置\n</code></pre>"},{"layout":"post","title":"LeetCode刷题系列(1)(question 3)","subtitle":"Longest Substring Without Repeating Characters","date":"2017-12-19T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在[LeetCode](https://leetcode.com)上遇见的有意思、有难度或者有其他精彩答案的题目。\n所用语言为JavaScript。\n\n----------\n\n\n### 题目号码：3（medium）\n-------------\n\n\n> **Longest Substring Without Repeating Characters:**\n> Given a string, find the length of the longest substring without repeating characters.\n> \n> **Examples:**\n> - Given \"abcabcbb\", the answer is \"abc\", which the length is 3.\n> - Given \"bbbbb\", the answer is \"b\", with the length of 1.\n> - Given \"pwwkew\", the answer is \"wke\", with the length of 3.\n\n#### 题意\n返回给出字符串中最长且不含重复字母的子字符串的长度\n\n-------------\n\n#### 思路\n从字符串开头开始分析，依次找到最长的不重复字母的子字符串存储下来，遍历结束后输出其长度。\n\n#### 我的解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    var result = '';\n    var data = '';\n    for(let i=0; i<s.length; i++){\n        if(data.indexOf(s.substr(i,1)) == -1){\n            data += s.substr(i,1);\n        }else{\n            if(data.length > result.length){\n                result = data;\n            }\n            data = data.substr(data.indexOf(s.substr(i,1))+1);\n            data += s.substr(i,1);\n        }\n    }\n    if(data.length > result.length){\n        result = data;\n    }\n    return result.length;\n};\n```\n\n-------------\n\n#### 分析解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    let map = Array(256).fill(-1) ,cur = 0, len = 0;\n    for(let i=0;i<s.length;i++){\n        let at = s[i].charCodeAt();\n        let map_at = map[at];\n        if(map_at !== -1){cur = map_at>cur?map_at:cur;}\n        let tm_len = i-cur+1;\n        len = len>tm_len?len:tm_len;\n        map[at] = i+1;\n    }\n    return len;\n};\n```\n##### 分析如下：\n\n\t1. 变量设置\n\t\t* map：一个256长度的数组，为字母对应的Unicode编码长度，存放每个字母出现的次数\n\t\t* cur：一个遍历中的变量，存储上一个相同字母点的位置\n\t\t* len：存储每次遍历中的最长字符串长度\n\t\t* tm_len：记录实时不重复子字符串的长度\n\t2. 开始遍历给定字符串的每个字符，首先根据这个字母的Unicode编码找到这个字母在map中对应的位置的值，\n    如果这个值不为-1，说明这个字母不是第一次出现，去查找此字母的map位上的数值，\n    对应最近一次出现此字母的位置，做减法，得到此时的不重复子字符串的长度，与历史最高长度len取最大值，直至遍历结束。\n\t3. 既然不需要返回此字符串，那么就应该将逻辑聚焦在长度上，通过数组合理存储最近一次的同字母位置来完成统计。","source":"_posts/LeetCode_3.md","raw":"---\nlayout: post\ntitle: \"LeetCode刷题系列(1)(question 3)\"\nsubtitle: \"Longest Substring Without Repeating Characters\"\ndate: 2017-12-20\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- LeetCode\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在[LeetCode](https://leetcode.com)上遇见的有意思、有难度或者有其他精彩答案的题目。\n所用语言为JavaScript。\n\n----------\n\n\n### 题目号码：3（medium）\n-------------\n\n\n> **Longest Substring Without Repeating Characters:**\n> Given a string, find the length of the longest substring without repeating characters.\n> \n> **Examples:**\n> - Given \"abcabcbb\", the answer is \"abc\", which the length is 3.\n> - Given \"bbbbb\", the answer is \"b\", with the length of 1.\n> - Given \"pwwkew\", the answer is \"wke\", with the length of 3.\n\n#### 题意\n返回给出字符串中最长且不含重复字母的子字符串的长度\n\n-------------\n\n#### 思路\n从字符串开头开始分析，依次找到最长的不重复字母的子字符串存储下来，遍历结束后输出其长度。\n\n#### 我的解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    var result = '';\n    var data = '';\n    for(let i=0; i<s.length; i++){\n        if(data.indexOf(s.substr(i,1)) == -1){\n            data += s.substr(i,1);\n        }else{\n            if(data.length > result.length){\n                result = data;\n            }\n            data = data.substr(data.indexOf(s.substr(i,1))+1);\n            data += s.substr(i,1);\n        }\n    }\n    if(data.length > result.length){\n        result = data;\n    }\n    return result.length;\n};\n```\n\n-------------\n\n#### 分析解法\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    let map = Array(256).fill(-1) ,cur = 0, len = 0;\n    for(let i=0;i<s.length;i++){\n        let at = s[i].charCodeAt();\n        let map_at = map[at];\n        if(map_at !== -1){cur = map_at>cur?map_at:cur;}\n        let tm_len = i-cur+1;\n        len = len>tm_len?len:tm_len;\n        map[at] = i+1;\n    }\n    return len;\n};\n```\n##### 分析如下：\n\n\t1. 变量设置\n\t\t* map：一个256长度的数组，为字母对应的Unicode编码长度，存放每个字母出现的次数\n\t\t* cur：一个遍历中的变量，存储上一个相同字母点的位置\n\t\t* len：存储每次遍历中的最长字符串长度\n\t\t* tm_len：记录实时不重复子字符串的长度\n\t2. 开始遍历给定字符串的每个字符，首先根据这个字母的Unicode编码找到这个字母在map中对应的位置的值，\n    如果这个值不为-1，说明这个字母不是第一次出现，去查找此字母的map位上的数值，\n    对应最近一次出现此字母的位置，做减法，得到此时的不重复子字符串的长度，与历史最高长度len取最大值，直至遍历结束。\n\t3. 既然不需要返回此字符串，那么就应该将逻辑聚焦在长度上，通过数组合理存储最近一次的同字母位置来完成统计。","slug":"LeetCode_3","published":1,"updated":"2018-01-14T12:21:03.828Z","comments":1,"photos":[],"link":"","_id":"cjekvj52m0002rmjfqq5xhse5","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上遇见的有意思、有难度或者有其他精彩答案的题目。<br>所用语言为JavaScript。</p>\n<hr>\n<h3 id=\"题目号码：3（medium）\"><a href=\"#题目号码：3（medium）\" class=\"headerlink\" title=\"题目号码：3（medium）\"></a>题目号码：3（medium）</h3><hr>\n<blockquote>\n<p><strong>Longest Substring Without Repeating Characters:</strong><br>Given a string, find the length of the longest substring without repeating characters.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>Given “abcabcbb”, the answer is “abc”, which the length is 3.</li>\n<li>Given “bbbbb”, the answer is “b”, with the length of 1.</li>\n<li>Given “pwwkew”, the answer is “wke”, with the length of 3.</li>\n</ul>\n</blockquote>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>返回给出字符串中最长且不含重复字母的子字符串的长度</p>\n<hr>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>从字符串开头开始分析，依次找到最长的不重复字母的子字符串存储下来，遍历结束后输出其长度。</p>\n<h4 id=\"我的解法\"><a href=\"#我的解法\" class=\"headerlink\" title=\"我的解法\"></a>我的解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class=\"line\">    var result = &apos;&apos;;</span><br><span class=\"line\">    var data = &apos;&apos;;</span><br><span class=\"line\">    for(let i=0; i&lt;s.length; i++)&#123;</span><br><span class=\"line\">        if(data.indexOf(s.substr(i,1)) == -1)&#123;</span><br><span class=\"line\">            data += s.substr(i,1);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            if(data.length &gt; result.length)&#123;</span><br><span class=\"line\">                result = data;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            data = data.substr(data.indexOf(s.substr(i,1))+1);</span><br><span class=\"line\">            data += s.substr(i,1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(data.length &gt; result.length)&#123;</span><br><span class=\"line\">        result = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result.length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"分析解法\"><a href=\"#分析解法\" class=\"headerlink\" title=\"分析解法\"></a>分析解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class=\"line\">    let map = Array(256).fill(-1) ,cur = 0, len = 0;</span><br><span class=\"line\">    for(let i=0;i&lt;s.length;i++)&#123;</span><br><span class=\"line\">        let at = s[i].charCodeAt();</span><br><span class=\"line\">        let map_at = map[at];</span><br><span class=\"line\">        if(map_at !== -1)&#123;cur = map_at&gt;cur?map_at:cur;&#125;</span><br><span class=\"line\">        let tm_len = i-cur+1;</span><br><span class=\"line\">        len = len&gt;tm_len?len:tm_len;</span><br><span class=\"line\">        map[at] = i+1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return len;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><pre><code>1. 变量设置\n    * map：一个256长度的数组，为字母对应的Unicode编码长度，存放每个字母出现的次数\n    * cur：一个遍历中的变量，存储上一个相同字母点的位置\n    * len：存储每次遍历中的最长字符串长度\n    * tm_len：记录实时不重复子字符串的长度\n2. 开始遍历给定字符串的每个字符，首先根据这个字母的Unicode编码找到这个字母在map中对应的位置的值，\n如果这个值不为-1，说明这个字母不是第一次出现，去查找此字母的map位上的数值，\n对应最近一次出现此字母的位置，做减法，得到此时的不重复子字符串的长度，与历史最高长度len取最大值，直至遍历结束。\n3. 既然不需要返回此字符串，那么就应该将逻辑聚焦在长度上，通过数组合理存储最近一次的同字母位置来完成统计。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上遇见的有意思、有难度或者有其他精彩答案的题目。<br>所用语言为JavaScript。</p>\n<hr>\n<h3 id=\"题目号码：3（medium）\"><a href=\"#题目号码：3（medium）\" class=\"headerlink\" title=\"题目号码：3（medium）\"></a>题目号码：3（medium）</h3><hr>\n<blockquote>\n<p><strong>Longest Substring Without Repeating Characters:</strong><br>Given a string, find the length of the longest substring without repeating characters.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>Given “abcabcbb”, the answer is “abc”, which the length is 3.</li>\n<li>Given “bbbbb”, the answer is “b”, with the length of 1.</li>\n<li>Given “pwwkew”, the answer is “wke”, with the length of 3.</li>\n</ul>\n</blockquote>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>返回给出字符串中最长且不含重复字母的子字符串的长度</p>\n<hr>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>从字符串开头开始分析，依次找到最长的不重复字母的子字符串存储下来，遍历结束后输出其长度。</p>\n<h4 id=\"我的解法\"><a href=\"#我的解法\" class=\"headerlink\" title=\"我的解法\"></a>我的解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class=\"line\">    var result = &apos;&apos;;</span><br><span class=\"line\">    var data = &apos;&apos;;</span><br><span class=\"line\">    for(let i=0; i&lt;s.length; i++)&#123;</span><br><span class=\"line\">        if(data.indexOf(s.substr(i,1)) == -1)&#123;</span><br><span class=\"line\">            data += s.substr(i,1);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            if(data.length &gt; result.length)&#123;</span><br><span class=\"line\">                result = data;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            data = data.substr(data.indexOf(s.substr(i,1))+1);</span><br><span class=\"line\">            data += s.substr(i,1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(data.length &gt; result.length)&#123;</span><br><span class=\"line\">        result = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result.length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"分析解法\"><a href=\"#分析解法\" class=\"headerlink\" title=\"分析解法\"></a>分析解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class=\"line\">    let map = Array(256).fill(-1) ,cur = 0, len = 0;</span><br><span class=\"line\">    for(let i=0;i&lt;s.length;i++)&#123;</span><br><span class=\"line\">        let at = s[i].charCodeAt();</span><br><span class=\"line\">        let map_at = map[at];</span><br><span class=\"line\">        if(map_at !== -1)&#123;cur = map_at&gt;cur?map_at:cur;&#125;</span><br><span class=\"line\">        let tm_len = i-cur+1;</span><br><span class=\"line\">        len = len&gt;tm_len?len:tm_len;</span><br><span class=\"line\">        map[at] = i+1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return len;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><pre><code>1. 变量设置\n    * map：一个256长度的数组，为字母对应的Unicode编码长度，存放每个字母出现的次数\n    * cur：一个遍历中的变量，存储上一个相同字母点的位置\n    * len：存储每次遍历中的最长字符串长度\n    * tm_len：记录实时不重复子字符串的长度\n2. 开始遍历给定字符串的每个字符，首先根据这个字母的Unicode编码找到这个字母在map中对应的位置的值，\n如果这个值不为-1，说明这个字母不是第一次出现，去查找此字母的map位上的数值，\n对应最近一次出现此字母的位置，做减法，得到此时的不重复子字符串的长度，与历史最高长度len取最大值，直至遍历结束。\n3. 既然不需要返回此字符串，那么就应该将逻辑聚焦在长度上，通过数组合理存储最近一次的同字母位置来完成统计。\n</code></pre>"},{"layout":"post","title":"LeetCode刷题系列(3)(question 65)","subtitle":"Valid Number","date":"2018-01-24T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在[LeetCode](https://leetcode.com)上遇见的有意思、有难度或者有其他精彩答案的题目。\n所用语言为JavaScript。\n\n----------\n\n\n### 题目号码：65（hard）\n-------------\n\n\n> **Validate if a given string is numeric.**\n> It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.\n> \n> **Examples:**\n> - \"0\" => true\n> - \" 0.1 \" => true\n> - \"abc\" => false\n> - \"1 a\" => false\n> - \"2e10\" => true\n\n#### 题意\n判断给出的字符串是否可以转成合法数字\n\n-------------\n\n#### 思路\n从题目看来，切入点应该就在对给定字符串的筛选上，同时考虑有科学计数法的提现\n\n-------------\n\n#### 分析解法\n```\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isNumber = function(s) {\n    if (s === \"\") return false;\n    for (var i = 0; i < s.length; i++) {\n        if (s.charAt(i) != \" \") break;\n    }\n    if (i == s.length) return false;\n    return !isNaN(Number(s.substring(i)));\n};\n```\n\n##### 分析如下：\n\n\t1. 首先，判断是空字符串，直接返回false，避免影响后面的判断。\n\t2. 通过逐字判断，若是字符串中全是空格符，返回false。\n\t3. 既然不全是空格，那就截取第一个非空格到结尾的字符串然后通过Number()函数转化成数字，如果不是NaN就返回true。\n    解决。\n\n","source":"_posts/LeetCode_65.md","raw":"---\nlayout: post\ntitle: \"LeetCode刷题系列(3)(question 65)\"\nsubtitle: \"Valid Number\"\ndate: 2018-1-25\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- LeetCode\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在[LeetCode](https://leetcode.com)上遇见的有意思、有难度或者有其他精彩答案的题目。\n所用语言为JavaScript。\n\n----------\n\n\n### 题目号码：65（hard）\n-------------\n\n\n> **Validate if a given string is numeric.**\n> It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.\n> \n> **Examples:**\n> - \"0\" => true\n> - \" 0.1 \" => true\n> - \"abc\" => false\n> - \"1 a\" => false\n> - \"2e10\" => true\n\n#### 题意\n判断给出的字符串是否可以转成合法数字\n\n-------------\n\n#### 思路\n从题目看来，切入点应该就在对给定字符串的筛选上，同时考虑有科学计数法的提现\n\n-------------\n\n#### 分析解法\n```\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isNumber = function(s) {\n    if (s === \"\") return false;\n    for (var i = 0; i < s.length; i++) {\n        if (s.charAt(i) != \" \") break;\n    }\n    if (i == s.length) return false;\n    return !isNaN(Number(s.substring(i)));\n};\n```\n\n##### 分析如下：\n\n\t1. 首先，判断是空字符串，直接返回false，避免影响后面的判断。\n\t2. 通过逐字判断，若是字符串中全是空格符，返回false。\n\t3. 既然不全是空格，那就截取第一个非空格到结尾的字符串然后通过Number()函数转化成数字，如果不是NaN就返回true。\n    解决。\n\n","slug":"LeetCode_65","published":1,"updated":"2018-03-09T08:15:44.365Z","comments":1,"photos":[],"link":"","_id":"cjekvj52q0004rmjf6dbeqnct","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上遇见的有意思、有难度或者有其他精彩答案的题目。<br>所用语言为JavaScript。</p>\n<hr>\n<h3 id=\"题目号码：65（hard）\"><a href=\"#题目号码：65（hard）\" class=\"headerlink\" title=\"题目号码：65（hard）\"></a>题目号码：65（hard）</h3><hr>\n<blockquote>\n<p><strong>Validate if a given string is numeric.</strong><br>It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>“0” =&gt; true</li>\n<li>“ 0.1 “ =&gt; true</li>\n<li>“abc” =&gt; false</li>\n<li>“1 a” =&gt; false</li>\n<li>“2e10” =&gt; true</li>\n</ul>\n</blockquote>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>判断给出的字符串是否可以转成合法数字</p>\n<hr>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>从题目看来，切入点应该就在对给定字符串的筛选上，同时考虑有科学计数法的提现</p>\n<hr>\n<h4 id=\"分析解法\"><a href=\"#分析解法\" class=\"headerlink\" title=\"分析解法\"></a>分析解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var isNumber = function(s) &#123;</span><br><span class=\"line\">    if (s === &quot;&quot;) return false;</span><br><span class=\"line\">    for (var i = 0; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        if (s.charAt(i) != &quot; &quot;) break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (i == s.length) return false;</span><br><span class=\"line\">    return !isNaN(Number(s.substring(i)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><pre><code>1. 首先，判断是空字符串，直接返回false，避免影响后面的判断。\n2. 通过逐字判断，若是字符串中全是空格符，返回false。\n3. 既然不全是空格，那就截取第一个非空格到结尾的字符串然后通过Number()函数转化成数字，如果不是NaN就返回true。\n解决。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a>上遇见的有意思、有难度或者有其他精彩答案的题目。<br>所用语言为JavaScript。</p>\n<hr>\n<h3 id=\"题目号码：65（hard）\"><a href=\"#题目号码：65（hard）\" class=\"headerlink\" title=\"题目号码：65（hard）\"></a>题目号码：65（hard）</h3><hr>\n<blockquote>\n<p><strong>Validate if a given string is numeric.</strong><br>It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>“0” =&gt; true</li>\n<li>“ 0.1 “ =&gt; true</li>\n<li>“abc” =&gt; false</li>\n<li>“1 a” =&gt; false</li>\n<li>“2e10” =&gt; true</li>\n</ul>\n</blockquote>\n<h4 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h4><p>判断给出的字符串是否可以转成合法数字</p>\n<hr>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>从题目看来，切入点应该就在对给定字符串的筛选上，同时考虑有科学计数法的提现</p>\n<hr>\n<h4 id=\"分析解法\"><a href=\"#分析解法\" class=\"headerlink\" title=\"分析解法\"></a>分析解法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var isNumber = function(s) &#123;</span><br><span class=\"line\">    if (s === &quot;&quot;) return false;</span><br><span class=\"line\">    for (var i = 0; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        if (s.charAt(i) != &quot; &quot;) break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (i == s.length) return false;</span><br><span class=\"line\">    return !isNaN(Number(s.substring(i)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h5><pre><code>1. 首先，判断是空字符串，直接返回false，避免影响后面的判断。\n2. 通过逐字判断，若是字符串中全是空格符，返回false。\n3. 既然不全是空格，那就截取第一个非空格到结尾的字符串然后通过Number()函数转化成数字，如果不是NaN就返回true。\n解决。\n</code></pre>"},{"layout":"post","title":"Nginx的安装及配置","subtitle":"在一台服务器上配置多个程序","date":"2018-01-27T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n使用服务器系统版本为CentOS 7\n\n----------\n\n\n### 安装Nginx\n-------------\n\n```\nyum apt-get install nginx\n\n//安装成功后检查版本\nnginx -v\n\n//配置Nginx\ncd /etc/nginx\n\ncd conf.d\n\n//编辑配置文件\nsudo vi example-com-8888.conf\n//输入以下内容\n```\n\n```\nupstream test {\n    server 127.0.0.1:18080;\n}\n\nserver {\n    listen 80;\n    server_name /* 这里填自己的VPS外网地址 */;\n\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_pass http://test;\n        proxy_redirect off;\n    }\n}\n```\n\n```\n//配置好后返回上层目录即 /etc/nginx 目录\n//查看nginx配置文件\n\nsudo vi nginx.conf\n//主要是检查其中是否把自定的配置文件导入了进来\n//从此文件中找到下面这句看是否被注释了\n\n    include /etc/nginx/conf.d/*.conf\n    //这句命令的含义是将/etc/nginx/conf.d/目录下的所有.conf结尾的配置文件都导入进来\n\n    //同时在此文件的http部分取消注释或添加下句可隐藏掉服务器输出的nginx信息\n    server_tokens off;\n\n    //重启服务\n    sudo service nginx reload\n\n//检查配置文件\nsudo nginx -t\n\n//检查通过后重启nginx\nsudo nginx -s reload\n```\n","source":"_posts/nginx.md","raw":"---\nlayout: post\ntitle: \"Nginx的安装及配置\"\nsubtitle: \"在一台服务器上配置多个程序\"\ndate: 2018-1-28\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- Nginx\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n使用服务器系统版本为CentOS 7\n\n----------\n\n\n### 安装Nginx\n-------------\n\n```\nyum apt-get install nginx\n\n//安装成功后检查版本\nnginx -v\n\n//配置Nginx\ncd /etc/nginx\n\ncd conf.d\n\n//编辑配置文件\nsudo vi example-com-8888.conf\n//输入以下内容\n```\n\n```\nupstream test {\n    server 127.0.0.1:18080;\n}\n\nserver {\n    listen 80;\n    server_name /* 这里填自己的VPS外网地址 */;\n\n    location / {\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_pass http://test;\n        proxy_redirect off;\n    }\n}\n```\n\n```\n//配置好后返回上层目录即 /etc/nginx 目录\n//查看nginx配置文件\n\nsudo vi nginx.conf\n//主要是检查其中是否把自定的配置文件导入了进来\n//从此文件中找到下面这句看是否被注释了\n\n    include /etc/nginx/conf.d/*.conf\n    //这句命令的含义是将/etc/nginx/conf.d/目录下的所有.conf结尾的配置文件都导入进来\n\n    //同时在此文件的http部分取消注释或添加下句可隐藏掉服务器输出的nginx信息\n    server_tokens off;\n\n    //重启服务\n    sudo service nginx reload\n\n//检查配置文件\nsudo nginx -t\n\n//检查通过后重启nginx\nsudo nginx -s reload\n```\n","slug":"nginx","published":1,"updated":"2018-03-10T04:22:29.203Z","comments":1,"photos":[],"link":"","_id":"cjekvj52r0005rmjfdw1b4d9n","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>使用服务器系统版本为CentOS 7</p>\n<hr>\n<h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum apt-get install nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//安装成功后检查版本</span><br><span class=\"line\">nginx -v</span><br><span class=\"line\"></span><br><span class=\"line\">//配置Nginx</span><br><span class=\"line\">cd /etc/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">cd conf.d</span><br><span class=\"line\"></span><br><span class=\"line\">//编辑配置文件</span><br><span class=\"line\">sudo vi example-com-8888.conf</span><br><span class=\"line\">//输入以下内容</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test &#123;</span><br><span class=\"line\">    server 127.0.0.1:18080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name /* 这里填自己的VPS外网地址 */;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http://test;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//配置好后返回上层目录即 /etc/nginx 目录</span><br><span class=\"line\">//查看nginx配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vi nginx.conf</span><br><span class=\"line\">//主要是检查其中是否把自定的配置文件导入了进来</span><br><span class=\"line\">//从此文件中找到下面这句看是否被注释了</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf</span><br><span class=\"line\">    //这句命令的含义是将/etc/nginx/conf.d/目录下的所有.conf结尾的配置文件都导入进来</span><br><span class=\"line\"></span><br><span class=\"line\">    //同时在此文件的http部分取消注释或添加下句可隐藏掉服务器输出的nginx信息</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\"></span><br><span class=\"line\">    //重启服务</span><br><span class=\"line\">    sudo service nginx reload</span><br><span class=\"line\"></span><br><span class=\"line\">//检查配置文件</span><br><span class=\"line\">sudo nginx -t</span><br><span class=\"line\"></span><br><span class=\"line\">//检查通过后重启nginx</span><br><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>使用服务器系统版本为CentOS 7</p>\n<hr>\n<h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum apt-get install nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//安装成功后检查版本</span><br><span class=\"line\">nginx -v</span><br><span class=\"line\"></span><br><span class=\"line\">//配置Nginx</span><br><span class=\"line\">cd /etc/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">cd conf.d</span><br><span class=\"line\"></span><br><span class=\"line\">//编辑配置文件</span><br><span class=\"line\">sudo vi example-com-8888.conf</span><br><span class=\"line\">//输入以下内容</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test &#123;</span><br><span class=\"line\">    server 127.0.0.1:18080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name /* 这里填自己的VPS外网地址 */;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http://test;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//配置好后返回上层目录即 /etc/nginx 目录</span><br><span class=\"line\">//查看nginx配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vi nginx.conf</span><br><span class=\"line\">//主要是检查其中是否把自定的配置文件导入了进来</span><br><span class=\"line\">//从此文件中找到下面这句看是否被注释了</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf</span><br><span class=\"line\">    //这句命令的含义是将/etc/nginx/conf.d/目录下的所有.conf结尾的配置文件都导入进来</span><br><span class=\"line\"></span><br><span class=\"line\">    //同时在此文件的http部分取消注释或添加下句可隐藏掉服务器输出的nginx信息</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\"></span><br><span class=\"line\">    //重启服务</span><br><span class=\"line\">    sudo service nginx reload</span><br><span class=\"line\"></span><br><span class=\"line\">//检查配置文件</span><br><span class=\"line\">sudo nginx -t</span><br><span class=\"line\"></span><br><span class=\"line\">//检查通过后重启nginx</span><br><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"San学习笔记 一","subtitle":"基本用法","date":"2018-01-04T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 数据相关\n-------------\n\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<p>Hello {{name}}!</p>',\n\n\t    initData: function () {\n\t        return {\n\t            name: 'San'\n\t        };\n\t    }\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n```\n\n可以看到，通常情况实用 San 会经过这么几步：\n\n* 我们先定义了一个 San 的组件，在定义时指定了组件的 内容模板 与 初始数据 。\n* 初始化组件对象\n* 让组件在相应的地方渲染\n\n列表渲染(s-for)\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    attached: function () {\n\t        this.data.set('list', ['san', 'er', 'esui', 'etpl', 'esl']);\n\t    }\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n```\n\n列表渲染(s-if)\n\nSan 的条件判断不是严格的 === false。所以，一切 JavaScript 的假值都会认为条件不成立：0、空字符串、null、undefined、NaN等。\n\n```\n    <span s-if=\"isOK\">Hello San!</span>\n```\n\ns-elif 指令可以给 s-if 增加一个额外条件分支块。s-elif 指令的值可以是任何类型的表达式。\n\n```\n    <span s-if=\"isActive\">Active</span>\n\t<span s-elif=\"isOnline\">Pending</span>\n\t<span s-else>Offline</span>\n```\n\n虚拟元素 template ，在渲染时不会包含自身，只会渲染其内容。\n\n```\n    <template s-if=\"num > 10000\">\n        <h2>biiig</h2>\n        <p>{{num}}</p>\n    </template>\n```\n\n\n#### 数据的绑定\n\n双向绑定({=  =})\n\n```\n    var MyApp = san.defineComponent({\n\t    template: ''\n\t        + '<div>'\n\t        +   '<input value=\"{= name =}\" placeholder=\"please input\">'\n\t        +   'Hello {{name}}!'\n\t        + '</div>'\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n\n\t<input type=\"text\" value=\"{= name =}\">\n\n\t<select value=\"{= online =}\">\n\t    <option value=\"errorrik\">errorrik</option>\n\t    <option value=\"otakustay\">otakustay</option>\n\t    <option value=\"firede\">firede</option>\n\t</select>\n```\n\n属性绑定\n\n```\n    <ui-label text=\"{{jokeName}}\"></ui-label>\n```\n\n输出原封不动的 HTML，不希望经过 HTML 转义。\n\n```\n    <p s-html=\"rawHTML\"></p>    //通过指令 s-html\n\t<p>{{rawHTML | raw}}</p>\t//通过过滤器raw\n```\n\n\n#### 数据的操作\n-------------\n\ninitData 方法：可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。\n\n```\n    san.defineComponent({\n\t    initData: function () {\n\t        return {\n\t            width: 200,\n\t            top: 100,\n\t            left: -1000\n\t        };\n\t    }\n\t});\n```\n\nset 方法：是最常用的操作数据的方法，作用相当于 JavaScript 中的赋值 (=)。\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        requestUser().then(this.userReceived.bind(this));\n\t    },\n\n\t    userReceived: function (data) {\n\t        this.data.set('user', data);\n\t    },\n\n\t    changeEmail: function (email) {\n\t        this.data.set('user.email', email);\n\t    }\n\t});\n```\n\nmerge 方法：将目标数据对象（target）和传入数据对象（source）的键进行合并。\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        requestUser().then(this.updateUserInfo.bind(this));\n\t    },\n\n\t    updateUserInfo: function (data) {\n\t        this.data.merge('user', data);\n\t    }\n\t});\n```\n\napply 方法：接受一个函数作为参数，传入当前的值到函数，然后用新返回的值更新它。\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        this.data.set('number', {\n\t            value: 1\n\t        });\n\t        this.updateNumber();\n\t    },\n\n\t    updateNumber: function (data) {\n\t        this.data.apply('number', function (number) {\n\t            return {\n\t                value: number.value * 2\n\t            };\n\t        })\n\t    }\n\t});\n```\n\n还有一些数组方法：\n\n修改数组项还是直接使用 set 方法。\n\npush：在数组末尾插入一条数据。\n\n```\n    san.defineComponent({\n\t    addUser: function (name) {\n\t        this.data.push('users', {name: name});\n\t    }\n\t});\n```\n\npop：在数组末尾弹出一条数据。\n\n```\n    san.defineComponent({\n\t    rmLast: function () {\n\t        this.data.pop('users');\n\t    }\n\t});\n```\n\nunshift：在数组开始插入一条数据。\n\n```\n    san.defineComponent({\n\t    addUser: function (name) {\n\t        this.data.unshift('users', {name: name});\n\t    }\n\t});\n```\n\nshift：在数组开始弹出一条数据。\n\n```\n    san.defineComponent({\n\t    rmFirst: function () {\n\t        this.data.shift('users');\n\t    }\n\t});\n```\n\nremove：移除一条数据。只有当数组项与传入项完全相等(===)时，数组项才会被移除。\n\n```\n    san.defineComponent({\n\t    rm: function (user) {\n\t        this.data.remove('users', user);\n\t    }\n\t});\n```\n\nremoveAt：通过数据项的索引移除一条数据。\n\n```\n    san.defineComponent({\n\t    rmAt: function (index) {\n\t        this.data.removeAt('users', index);\n\t    }\n\t});\n```\n\nsplice：向数组中添加或删除项目。\n\n```\n    san.defineComponent({\n\t    rm: function (index, deleteCount) {\n\t        this.data.splice('users', [index, deleteCount]);\n\t    }\n\t});\n```\n\n\n#### 数据的校验\n-------------\n\n指定校验规则，需要使用 DataTypes 进行声明：\n\n```\n    import san, {DataTypes} from 'san';\n\n\tlet MyComponent = san.defineComponent({\n\n\t    dataTypes: {\n\t        name: DataTypes.string\n\t    }\n\n\t});\n```\n\n","source":"_posts/san1.md","raw":"---\nlayout: post\ntitle: \"San学习笔记 一\"\nsubtitle: \"基本用法\"\ndate: 2018-1-5\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - San\n---\n\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 数据相关\n-------------\n\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<p>Hello {{name}}!</p>',\n\n\t    initData: function () {\n\t        return {\n\t            name: 'San'\n\t        };\n\t    }\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n```\n\n可以看到，通常情况实用 San 会经过这么几步：\n\n* 我们先定义了一个 San 的组件，在定义时指定了组件的 内容模板 与 初始数据 。\n* 初始化组件对象\n* 让组件在相应的地方渲染\n\n列表渲染(s-for)\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    attached: function () {\n\t        this.data.set('list', ['san', 'er', 'esui', 'etpl', 'esl']);\n\t    }\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n```\n\n列表渲染(s-if)\n\nSan 的条件判断不是严格的 === false。所以，一切 JavaScript 的假值都会认为条件不成立：0、空字符串、null、undefined、NaN等。\n\n```\n    <span s-if=\"isOK\">Hello San!</span>\n```\n\ns-elif 指令可以给 s-if 增加一个额外条件分支块。s-elif 指令的值可以是任何类型的表达式。\n\n```\n    <span s-if=\"isActive\">Active</span>\n\t<span s-elif=\"isOnline\">Pending</span>\n\t<span s-else>Offline</span>\n```\n\n虚拟元素 template ，在渲染时不会包含自身，只会渲染其内容。\n\n```\n    <template s-if=\"num > 10000\">\n        <h2>biiig</h2>\n        <p>{{num}}</p>\n    </template>\n```\n\n\n#### 数据的绑定\n\n双向绑定({=  =})\n\n```\n    var MyApp = san.defineComponent({\n\t    template: ''\n\t        + '<div>'\n\t        +   '<input value=\"{= name =}\" placeholder=\"please input\">'\n\t        +   'Hello {{name}}!'\n\t        + '</div>'\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n\n\t<input type=\"text\" value=\"{= name =}\">\n\n\t<select value=\"{= online =}\">\n\t    <option value=\"errorrik\">errorrik</option>\n\t    <option value=\"otakustay\">otakustay</option>\n\t    <option value=\"firede\">firede</option>\n\t</select>\n```\n\n属性绑定\n\n```\n    <ui-label text=\"{{jokeName}}\"></ui-label>\n```\n\n输出原封不动的 HTML，不希望经过 HTML 转义。\n\n```\n    <p s-html=\"rawHTML\"></p>    //通过指令 s-html\n\t<p>{{rawHTML | raw}}</p>\t//通过过滤器raw\n```\n\n\n#### 数据的操作\n-------------\n\ninitData 方法：可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。\n\n```\n    san.defineComponent({\n\t    initData: function () {\n\t        return {\n\t            width: 200,\n\t            top: 100,\n\t            left: -1000\n\t        };\n\t    }\n\t});\n```\n\nset 方法：是最常用的操作数据的方法，作用相当于 JavaScript 中的赋值 (=)。\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        requestUser().then(this.userReceived.bind(this));\n\t    },\n\n\t    userReceived: function (data) {\n\t        this.data.set('user', data);\n\t    },\n\n\t    changeEmail: function (email) {\n\t        this.data.set('user.email', email);\n\t    }\n\t});\n```\n\nmerge 方法：将目标数据对象（target）和传入数据对象（source）的键进行合并。\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        requestUser().then(this.updateUserInfo.bind(this));\n\t    },\n\n\t    updateUserInfo: function (data) {\n\t        this.data.merge('user', data);\n\t    }\n\t});\n```\n\napply 方法：接受一个函数作为参数，传入当前的值到函数，然后用新返回的值更新它。\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        this.data.set('number', {\n\t            value: 1\n\t        });\n\t        this.updateNumber();\n\t    },\n\n\t    updateNumber: function (data) {\n\t        this.data.apply('number', function (number) {\n\t            return {\n\t                value: number.value * 2\n\t            };\n\t        })\n\t    }\n\t});\n```\n\n还有一些数组方法：\n\n修改数组项还是直接使用 set 方法。\n\npush：在数组末尾插入一条数据。\n\n```\n    san.defineComponent({\n\t    addUser: function (name) {\n\t        this.data.push('users', {name: name});\n\t    }\n\t});\n```\n\npop：在数组末尾弹出一条数据。\n\n```\n    san.defineComponent({\n\t    rmLast: function () {\n\t        this.data.pop('users');\n\t    }\n\t});\n```\n\nunshift：在数组开始插入一条数据。\n\n```\n    san.defineComponent({\n\t    addUser: function (name) {\n\t        this.data.unshift('users', {name: name});\n\t    }\n\t});\n```\n\nshift：在数组开始弹出一条数据。\n\n```\n    san.defineComponent({\n\t    rmFirst: function () {\n\t        this.data.shift('users');\n\t    }\n\t});\n```\n\nremove：移除一条数据。只有当数组项与传入项完全相等(===)时，数组项才会被移除。\n\n```\n    san.defineComponent({\n\t    rm: function (user) {\n\t        this.data.remove('users', user);\n\t    }\n\t});\n```\n\nremoveAt：通过数据项的索引移除一条数据。\n\n```\n    san.defineComponent({\n\t    rmAt: function (index) {\n\t        this.data.removeAt('users', index);\n\t    }\n\t});\n```\n\nsplice：向数组中添加或删除项目。\n\n```\n    san.defineComponent({\n\t    rm: function (index, deleteCount) {\n\t        this.data.splice('users', [index, deleteCount]);\n\t    }\n\t});\n```\n\n\n#### 数据的校验\n-------------\n\n指定校验规则，需要使用 DataTypes 进行声明：\n\n```\n    import san, {DataTypes} from 'san';\n\n\tlet MyComponent = san.defineComponent({\n\n\t    dataTypes: {\n\t        name: DataTypes.string\n\t    }\n\n\t});\n```\n\n","slug":"san1","published":1,"updated":"2018-01-28T07:49:39.007Z","comments":1,"photos":[],"link":"","_id":"cjekvj52s0006rmjf1z7km3ui","content":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"数据相关\"><a href=\"#数据相关\" class=\"headerlink\" title=\"数据相关\"></a>数据相关</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;p&gt;Hello &#123;&#123;name&#125;&#125;!&lt;/p&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            name: &apos;San&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>可以看到，通常情况实用 San 会经过这么几步：</p>\n<ul>\n<li>我们先定义了一个 San 的组件，在定义时指定了组件的 内容模板 与 初始数据 。</li>\n<li>初始化组件对象</li>\n<li>让组件在相应的地方渲染</li>\n</ul>\n<p>列表渲染(s-for)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>列表渲染(s-if)</p>\n<p>San 的条件判断不是严格的 === false。所以，一切 JavaScript 的假值都会认为条件不成立：0、空字符串、null、undefined、NaN等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span s-if=&quot;isOK&quot;&gt;Hello San!&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<p>s-elif 指令可以给 s-if 增加一个额外条件分支块。s-elif 指令的值可以是任何类型的表达式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;span s-if=&quot;isActive&quot;&gt;Active&lt;/span&gt;</span><br><span class=\"line\">&lt;span s-elif=&quot;isOnline&quot;&gt;Pending&lt;/span&gt;</span><br><span class=\"line\">&lt;span s-else&gt;Offline&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<p>虚拟元素 template ，在渲染时不会包含自身，只会渲染其内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template s-if=&quot;num &gt; 10000&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;biiig&lt;/h2&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的绑定\"><a href=\"#数据的绑定\" class=\"headerlink\" title=\"数据的绑定\"></a>数据的绑定</h4><p>双向绑定({=  =})</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;input value=&quot;&#123;= name =&#125;&quot; placeholder=&quot;please input&quot;&gt;&apos;</span><br><span class=\"line\">        +   &apos;Hello &#123;&#123;name&#125;&#125;!&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;&#123;= name =&#125;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;select value=&quot;&#123;= online =&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;option value=&quot;errorrik&quot;&gt;errorrik&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;otakustay&quot;&gt;otakustay&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;firede&quot;&gt;firede&lt;/option&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<p>属性绑定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ui-label text=&quot;&#123;&#123;jokeName&#125;&#125;&quot;&gt;&lt;/ui-label&gt;</span><br></pre></td></tr></table></figure>\n<p>输出原封不动的 HTML，不希望经过 HTML 转义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;p s-html=&quot;rawHTML&quot;&gt;&lt;/p&gt;    //通过指令 s-html</span><br><span class=\"line\">&lt;p&gt;&#123;&#123;rawHTML | raw&#125;&#125;&lt;/p&gt;\t//通过过滤器raw</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的操作\"><a href=\"#数据的操作\" class=\"headerlink\" title=\"数据的操作\"></a>数据的操作</h4><hr>\n<p>initData 方法：可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            width: 200,</span><br><span class=\"line\">            top: 100,</span><br><span class=\"line\">            left: -1000</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>set 方法：是最常用的操作数据的方法，作用相当于 JavaScript 中的赋值 (=)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        requestUser().then(this.userReceived.bind(this));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    userReceived: function (data) &#123;</span><br><span class=\"line\">        this.data.set(&apos;user&apos;, data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    changeEmail: function (email) &#123;</span><br><span class=\"line\">        this.data.set(&apos;user.email&apos;, email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>merge 方法：将目标数据对象（target）和传入数据对象（source）的键进行合并。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        requestUser().then(this.updateUserInfo.bind(this));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    updateUserInfo: function (data) &#123;</span><br><span class=\"line\">        this.data.merge(&apos;user&apos;, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>apply 方法：接受一个函数作为参数，传入当前的值到函数，然后用新返回的值更新它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;number&apos;, &#123;</span><br><span class=\"line\">            value: 1</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        this.updateNumber();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    updateNumber: function (data) &#123;</span><br><span class=\"line\">        this.data.apply(&apos;number&apos;, function (number) &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                value: number.value * 2</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>还有一些数组方法：</p>\n<p>修改数组项还是直接使用 set 方法。</p>\n<p>push：在数组末尾插入一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    addUser: function (name) &#123;</span><br><span class=\"line\">        this.data.push(&apos;users&apos;, &#123;name: name&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>pop：在数组末尾弹出一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rmLast: function () &#123;</span><br><span class=\"line\">        this.data.pop(&apos;users&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>unshift：在数组开始插入一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    addUser: function (name) &#123;</span><br><span class=\"line\">        this.data.unshift(&apos;users&apos;, &#123;name: name&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>shift：在数组开始弹出一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rmFirst: function () &#123;</span><br><span class=\"line\">        this.data.shift(&apos;users&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>remove：移除一条数据。只有当数组项与传入项完全相等(===)时，数组项才会被移除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rm: function (user) &#123;</span><br><span class=\"line\">        this.data.remove(&apos;users&apos;, user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>removeAt：通过数据项的索引移除一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rmAt: function (index) &#123;</span><br><span class=\"line\">        this.data.removeAt(&apos;users&apos;, index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>splice：向数组中添加或删除项目。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rm: function (index, deleteCount) &#123;</span><br><span class=\"line\">        this.data.splice(&apos;users&apos;, [index, deleteCount]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的校验\"><a href=\"#数据的校验\" class=\"headerlink\" title=\"数据的校验\"></a>数据的校验</h4><hr>\n<p>指定校验规则，需要使用 DataTypes 进行声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   import san, &#123;DataTypes&#125; from &apos;san&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">let MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    dataTypes: &#123;</span><br><span class=\"line\">        name: DataTypes.string</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"数据相关\"><a href=\"#数据相关\" class=\"headerlink\" title=\"数据相关\"></a>数据相关</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;p&gt;Hello &#123;&#123;name&#125;&#125;!&lt;/p&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            name: &apos;San&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>可以看到，通常情况实用 San 会经过这么几步：</p>\n<ul>\n<li>我们先定义了一个 San 的组件，在定义时指定了组件的 内容模板 与 初始数据 。</li>\n<li>初始化组件对象</li>\n<li>让组件在相应的地方渲染</li>\n</ul>\n<p>列表渲染(s-for)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>列表渲染(s-if)</p>\n<p>San 的条件判断不是严格的 === false。所以，一切 JavaScript 的假值都会认为条件不成立：0、空字符串、null、undefined、NaN等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span s-if=&quot;isOK&quot;&gt;Hello San!&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<p>s-elif 指令可以给 s-if 增加一个额外条件分支块。s-elif 指令的值可以是任何类型的表达式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;span s-if=&quot;isActive&quot;&gt;Active&lt;/span&gt;</span><br><span class=\"line\">&lt;span s-elif=&quot;isOnline&quot;&gt;Pending&lt;/span&gt;</span><br><span class=\"line\">&lt;span s-else&gt;Offline&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<p>虚拟元素 template ，在渲染时不会包含自身，只会渲染其内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template s-if=&quot;num &gt; 10000&quot;&gt;</span><br><span class=\"line\">    &lt;h2&gt;biiig&lt;/h2&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的绑定\"><a href=\"#数据的绑定\" class=\"headerlink\" title=\"数据的绑定\"></a>数据的绑定</h4><p>双向绑定({=  =})</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;input value=&quot;&#123;= name =&#125;&quot; placeholder=&quot;please input&quot;&gt;&apos;</span><br><span class=\"line\">        +   &apos;Hello &#123;&#123;name&#125;&#125;!&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;&#123;= name =&#125;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;select value=&quot;&#123;= online =&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;option value=&quot;errorrik&quot;&gt;errorrik&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;otakustay&quot;&gt;otakustay&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;firede&quot;&gt;firede&lt;/option&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<p>属性绑定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ui-label text=&quot;&#123;&#123;jokeName&#125;&#125;&quot;&gt;&lt;/ui-label&gt;</span><br></pre></td></tr></table></figure>\n<p>输出原封不动的 HTML，不希望经过 HTML 转义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;p s-html=&quot;rawHTML&quot;&gt;&lt;/p&gt;    //通过指令 s-html</span><br><span class=\"line\">&lt;p&gt;&#123;&#123;rawHTML | raw&#125;&#125;&lt;/p&gt;\t//通过过滤器raw</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的操作\"><a href=\"#数据的操作\" class=\"headerlink\" title=\"数据的操作\"></a>数据的操作</h4><hr>\n<p>initData 方法：可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            width: 200,</span><br><span class=\"line\">            top: 100,</span><br><span class=\"line\">            left: -1000</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>set 方法：是最常用的操作数据的方法，作用相当于 JavaScript 中的赋值 (=)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        requestUser().then(this.userReceived.bind(this));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    userReceived: function (data) &#123;</span><br><span class=\"line\">        this.data.set(&apos;user&apos;, data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    changeEmail: function (email) &#123;</span><br><span class=\"line\">        this.data.set(&apos;user.email&apos;, email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>merge 方法：将目标数据对象（target）和传入数据对象（source）的键进行合并。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        requestUser().then(this.updateUserInfo.bind(this));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    updateUserInfo: function (data) &#123;</span><br><span class=\"line\">        this.data.merge(&apos;user&apos;, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>apply 方法：接受一个函数作为参数，传入当前的值到函数，然后用新返回的值更新它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;number&apos;, &#123;</span><br><span class=\"line\">            value: 1</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        this.updateNumber();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    updateNumber: function (data) &#123;</span><br><span class=\"line\">        this.data.apply(&apos;number&apos;, function (number) &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                value: number.value * 2</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>还有一些数组方法：</p>\n<p>修改数组项还是直接使用 set 方法。</p>\n<p>push：在数组末尾插入一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    addUser: function (name) &#123;</span><br><span class=\"line\">        this.data.push(&apos;users&apos;, &#123;name: name&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>pop：在数组末尾弹出一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rmLast: function () &#123;</span><br><span class=\"line\">        this.data.pop(&apos;users&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>unshift：在数组开始插入一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    addUser: function (name) &#123;</span><br><span class=\"line\">        this.data.unshift(&apos;users&apos;, &#123;name: name&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>shift：在数组开始弹出一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rmFirst: function () &#123;</span><br><span class=\"line\">        this.data.shift(&apos;users&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>remove：移除一条数据。只有当数组项与传入项完全相等(===)时，数组项才会被移除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rm: function (user) &#123;</span><br><span class=\"line\">        this.data.remove(&apos;users&apos;, user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>removeAt：通过数据项的索引移除一条数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rmAt: function (index) &#123;</span><br><span class=\"line\">        this.data.removeAt(&apos;users&apos;, index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>splice：向数组中添加或删除项目。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    rm: function (index, deleteCount) &#123;</span><br><span class=\"line\">        this.data.splice(&apos;users&apos;, [index, deleteCount]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据的校验\"><a href=\"#数据的校验\" class=\"headerlink\" title=\"数据的校验\"></a>数据的校验</h4><hr>\n<p>指定校验规则，需要使用 DataTypes 进行声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   import san, &#123;DataTypes&#125; from &apos;san&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">let MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    dataTypes: &#123;</span><br><span class=\"line\">        name: DataTypes.string</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Node.js系列(mongoose的学习笔记 一)","subtitle":"mongoose的基础知识","date":"2017-12-23T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在学习Node.js中常用的包相关的内容，作为以后工作中的备忘笔记。\n[官方文档](http://mongoosejs.com/docs/api.html)\n[社区文档](http://www.nodeclass.com/api/mongoose.html)\n\n----------\n\n\n### 安装mongoose\n-------------\n\n```\n    npm install mongoose\n```\n\n### 连接mongoose\n-------------\n\n```\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://<dbuser>:<dbpassword>@ds147681.mlab.com:47681/aishuangying');\n\n    var db = mongoose.connection;\n\n    db.on('error', console.error.bind(console, 'connection error:'));\n    db.once('open', function (callback) {\n        console.log('connect success');\n    });\n```\n[点击这里](http://www.nodeclass.com/api/mongoose.html#connection-js)文档了解更多connection事件\n\n### Schema\n-------------\nSchema是mongoose的定义表结构的数据模式。\n每个Schema会映射到mongodb中的一个collection，但是它不具备操作数据库的能力。\n定义Schema\n\n```\n    var Schema = mongoose.Schema;         //这里的mongoose就是上面初始化好的mongoose变量\n\n    var OneSchema = new Schema({          \n        username : { type: String },\n        userpwd: {type: String},\n        userage: {type: Number},\n        logindate : { type: Date}\n    });\n```\n[点击这里](http://www.nodeclass.com/api/mongoose.html#schematype-js)文档了解更多Schema类型\n\n### Model\n-------------\n定义好Schema之后生成Model\nmodel是由schema生成的模型，可以对数据库的操作\n我们对上面的定义的user的schema生成一个User的model并导出，修改后代码如下\n\n```\n    var oneModel = mongoose.model('newUser',OneSchema);\n```\n这里的'User'就是数据库中对应的Collection名称\n\n### 常用的数据库操作\n-------------\n\n插入数据库\n\n```\n    function insert() {\n        var one = new oneModel({\n            username : 'Tracy McGrady',                 //用户账号\n            userpwd: 'abcd',                            //密码\n            userage: 37,                                //年龄\n            logindate : new Date(),                      //最近登录时间\n            updateTime : new Date()\n        });\n        one.save(function (err, res) {\n            if (err) {\n                console.log(\"Error:\" + err);\n            }\n            else {\n                console.log(\"Res:\" + res);\n            }\n        });\n    }\n    insert();\n```\n更新数据库\n\n```\n    function update(){\n        var wherestr = {'username' : 'Tracy McGrady'}\n        var updateinfo = {'updateTime' : new Date()};\n        \n        oneModel.update(wherestr, updateinfo , function(err, res){\n            if (err) {\n                console.log(\"Error:\" + err);\n            }\n            else {\n                console.log(\"Res:\" + res);\n            }\n        })\n    }\n    update();\n```\n更新规则，在这类model中按名称来更新updateTime属性。\n查询\n\n```\n    function getByConditions(){\n        var wherestr = {'username' : 'Tracy McGrady'};\n    \n        oneModel.find(wherestr, function(err, res){\n            if (err) {\n                console.log(\"Error:\" + err);\n            }\n            else {\n                console.log(\"Res:\" + res);\n            }\n        })\n    }   \n    getByConditions();\n```\n返回的res为\n```\n    { \n        _id: 5a3f6664b2938f0517a2fa2e,\n        username: 'Tracy McGrady',\n        userpwd: 'abcd',\n        userage: 37,\n        logindate: 2017-12-24T08:33:40.714Z,\n        updateTime: 2017-12-24T08:35:48.898Z,\n        __v: 0 \n    }\n```\n第2个参数可以设置要查询输出的字段,比如 var opt = {\"username\": 1 ,\"_id\": 0};\n返回的res为\n```\n    { username: 'Tracy McGrady' }\n```\n比如我要查询年龄范围条件应该怎么写呢？\n```\n    oneModel.find({userage: {$gte: 21, $lte: 65}}, callback);    //这表示查询年龄大于等21而且小于等于65岁\n```\n其实类似的还有：　\n\n　　$or　　　　       或关系\n　　$nor　　　        或关系取反\n　　$gt　　　　       大于\n　　$gte　　　        大于等于\n　　$lt　　　　       小于\n　　$lte　　　        小于等于\n　　$ne              不等于\n　　$in              在多个值范围内\n　　$nin             不在多个值范围内\n　　$all             匹配数组中多个值\n　　$regex　　        正则，用于模糊查询\n　　$size　　　       匹配数组大小\n　　$maxDistance　   范围查询，距离（基于LBS）\n　　$mod　　         取模运算\n　　$near　　　       邻域查询，查询附近的位置（基于LBS）\n　　$exists　　      字段是否存在\n　　$elemMatch　　   匹配内数组内的元素\n　　$within　　      范围查询（基于LBS）\n　　$box　　　       范围查询，矩形范围（基于LBS）\n　　$center         范围醒询，圆形范围（基于LBS）\n　　$centerSphere　　范围查询，球形范围（基于LBS）\n　　$slice　　　　    查询字段集合中的元素（比如从第几个之后，第N到第M个元素）\n建索引和设置默认值\n\n```\n    var UserSchema = new Schema({          \n        username : { type: String , index: true},  \n        userpwd: {type: String},                    \n        userage: {type: Number},                   \n        logindate : { type: Date, default:Date.now} \n    });\n```\n　\n\n更多的操作，查询[官方文档](http://www.nodeclass.com/api/mongoose.html#model-js)","source":"_posts/node_mongoose_1.md","raw":"---\nlayout: post\ntitle: \"Node.js系列(mongoose的学习笔记 一)\"\nsubtitle: \"mongoose的基础知识\"\ndate: 2017-12-24\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - Node.js\n    - MongoDB\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n这个系列将记载我在学习Node.js中常用的包相关的内容，作为以后工作中的备忘笔记。\n[官方文档](http://mongoosejs.com/docs/api.html)\n[社区文档](http://www.nodeclass.com/api/mongoose.html)\n\n----------\n\n\n### 安装mongoose\n-------------\n\n```\n    npm install mongoose\n```\n\n### 连接mongoose\n-------------\n\n```\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://<dbuser>:<dbpassword>@ds147681.mlab.com:47681/aishuangying');\n\n    var db = mongoose.connection;\n\n    db.on('error', console.error.bind(console, 'connection error:'));\n    db.once('open', function (callback) {\n        console.log('connect success');\n    });\n```\n[点击这里](http://www.nodeclass.com/api/mongoose.html#connection-js)文档了解更多connection事件\n\n### Schema\n-------------\nSchema是mongoose的定义表结构的数据模式。\n每个Schema会映射到mongodb中的一个collection，但是它不具备操作数据库的能力。\n定义Schema\n\n```\n    var Schema = mongoose.Schema;         //这里的mongoose就是上面初始化好的mongoose变量\n\n    var OneSchema = new Schema({          \n        username : { type: String },\n        userpwd: {type: String},\n        userage: {type: Number},\n        logindate : { type: Date}\n    });\n```\n[点击这里](http://www.nodeclass.com/api/mongoose.html#schematype-js)文档了解更多Schema类型\n\n### Model\n-------------\n定义好Schema之后生成Model\nmodel是由schema生成的模型，可以对数据库的操作\n我们对上面的定义的user的schema生成一个User的model并导出，修改后代码如下\n\n```\n    var oneModel = mongoose.model('newUser',OneSchema);\n```\n这里的'User'就是数据库中对应的Collection名称\n\n### 常用的数据库操作\n-------------\n\n插入数据库\n\n```\n    function insert() {\n        var one = new oneModel({\n            username : 'Tracy McGrady',                 //用户账号\n            userpwd: 'abcd',                            //密码\n            userage: 37,                                //年龄\n            logindate : new Date(),                      //最近登录时间\n            updateTime : new Date()\n        });\n        one.save(function (err, res) {\n            if (err) {\n                console.log(\"Error:\" + err);\n            }\n            else {\n                console.log(\"Res:\" + res);\n            }\n        });\n    }\n    insert();\n```\n更新数据库\n\n```\n    function update(){\n        var wherestr = {'username' : 'Tracy McGrady'}\n        var updateinfo = {'updateTime' : new Date()};\n        \n        oneModel.update(wherestr, updateinfo , function(err, res){\n            if (err) {\n                console.log(\"Error:\" + err);\n            }\n            else {\n                console.log(\"Res:\" + res);\n            }\n        })\n    }\n    update();\n```\n更新规则，在这类model中按名称来更新updateTime属性。\n查询\n\n```\n    function getByConditions(){\n        var wherestr = {'username' : 'Tracy McGrady'};\n    \n        oneModel.find(wherestr, function(err, res){\n            if (err) {\n                console.log(\"Error:\" + err);\n            }\n            else {\n                console.log(\"Res:\" + res);\n            }\n        })\n    }   \n    getByConditions();\n```\n返回的res为\n```\n    { \n        _id: 5a3f6664b2938f0517a2fa2e,\n        username: 'Tracy McGrady',\n        userpwd: 'abcd',\n        userage: 37,\n        logindate: 2017-12-24T08:33:40.714Z,\n        updateTime: 2017-12-24T08:35:48.898Z,\n        __v: 0 \n    }\n```\n第2个参数可以设置要查询输出的字段,比如 var opt = {\"username\": 1 ,\"_id\": 0};\n返回的res为\n```\n    { username: 'Tracy McGrady' }\n```\n比如我要查询年龄范围条件应该怎么写呢？\n```\n    oneModel.find({userage: {$gte: 21, $lte: 65}}, callback);    //这表示查询年龄大于等21而且小于等于65岁\n```\n其实类似的还有：　\n\n　　$or　　　　       或关系\n　　$nor　　　        或关系取反\n　　$gt　　　　       大于\n　　$gte　　　        大于等于\n　　$lt　　　　       小于\n　　$lte　　　        小于等于\n　　$ne              不等于\n　　$in              在多个值范围内\n　　$nin             不在多个值范围内\n　　$all             匹配数组中多个值\n　　$regex　　        正则，用于模糊查询\n　　$size　　　       匹配数组大小\n　　$maxDistance　   范围查询，距离（基于LBS）\n　　$mod　　         取模运算\n　　$near　　　       邻域查询，查询附近的位置（基于LBS）\n　　$exists　　      字段是否存在\n　　$elemMatch　　   匹配内数组内的元素\n　　$within　　      范围查询（基于LBS）\n　　$box　　　       范围查询，矩形范围（基于LBS）\n　　$center         范围醒询，圆形范围（基于LBS）\n　　$centerSphere　　范围查询，球形范围（基于LBS）\n　　$slice　　　　    查询字段集合中的元素（比如从第几个之后，第N到第M个元素）\n建索引和设置默认值\n\n```\n    var UserSchema = new Schema({          \n        username : { type: String , index: true},  \n        userpwd: {type: String},                    \n        userage: {type: Number},                   \n        logindate : { type: Date, default:Date.now} \n    });\n```\n　\n\n更多的操作，查询[官方文档](http://www.nodeclass.com/api/mongoose.html#model-js)","slug":"node_mongoose_1","published":1,"updated":"2018-01-14T12:21:08.849Z","comments":1,"photos":[],"link":"","_id":"cjekvj52v0009rmjfd5bnpa0t","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在学习Node.js中常用的包相关的内容，作为以后工作中的备忘笔记。<br><a href=\"http://mongoosejs.com/docs/api.html\" target=\"_blank\" rel=\"noopener\">官方文档</a><br><a href=\"http://www.nodeclass.com/api/mongoose.html\" target=\"_blank\" rel=\"noopener\">社区文档</a></p>\n<hr>\n<h3 id=\"安装mongoose\"><a href=\"#安装mongoose\" class=\"headerlink\" title=\"安装mongoose\"></a>安装mongoose</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mongoose</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接mongoose\"><a href=\"#连接mongoose\" class=\"headerlink\" title=\"连接mongoose\"></a>连接mongoose</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mongoose = require(&apos;mongoose&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(&apos;mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds147681.mlab.com:47681/aishuangying&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var db = mongoose.connection;</span><br><span class=\"line\"></span><br><span class=\"line\">db.on(&apos;error&apos;, console.error.bind(console, &apos;connection error:&apos;));</span><br><span class=\"line\">db.once(&apos;open&apos;, function (callback) &#123;</span><br><span class=\"line\">    console.log(&apos;connect success&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.nodeclass.com/api/mongoose.html#connection-js\" target=\"_blank\" rel=\"noopener\">点击这里</a>文档了解更多connection事件</p>\n<h3 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h3><hr>\n<p>Schema是mongoose的定义表结构的数据模式。<br>每个Schema会映射到mongodb中的一个collection，但是它不具备操作数据库的能力。<br>定义Schema</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Schema = mongoose.Schema;         //这里的mongoose就是上面初始化好的mongoose变量</span><br><span class=\"line\"></span><br><span class=\"line\">var OneSchema = new Schema(&#123;          </span><br><span class=\"line\">    username : &#123; type: String &#125;,</span><br><span class=\"line\">    userpwd: &#123;type: String&#125;,</span><br><span class=\"line\">    userage: &#123;type: Number&#125;,</span><br><span class=\"line\">    logindate : &#123; type: Date&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.nodeclass.com/api/mongoose.html#schematype-js\" target=\"_blank\" rel=\"noopener\">点击这里</a>文档了解更多Schema类型</p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><hr>\n<p>定义好Schema之后生成Model<br>model是由schema生成的模型，可以对数据库的操作<br>我们对上面的定义的user的schema生成一个User的model并导出，修改后代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var oneModel = mongoose.model(&apos;newUser&apos;,OneSchema);</span><br></pre></td></tr></table></figure>\n<p>这里的’User’就是数据库中对应的Collection名称</p>\n<h3 id=\"常用的数据库操作\"><a href=\"#常用的数据库操作\" class=\"headerlink\" title=\"常用的数据库操作\"></a>常用的数据库操作</h3><hr>\n<p>插入数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function insert() &#123;</span><br><span class=\"line\">    var one = new oneModel(&#123;</span><br><span class=\"line\">        username : &apos;Tracy McGrady&apos;,                 //用户账号</span><br><span class=\"line\">        userpwd: &apos;abcd&apos;,                            //密码</span><br><span class=\"line\">        userage: 37,                                //年龄</span><br><span class=\"line\">        logindate : new Date(),                      //最近登录时间</span><br><span class=\"line\">        updateTime : new Date()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    one.save(function (err, res) &#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(&quot;Error:&quot; + err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            console.log(&quot;Res:&quot; + res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">insert();</span><br></pre></td></tr></table></figure>\n<p>更新数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function update()&#123;</span><br><span class=\"line\">    var wherestr = &#123;&apos;username&apos; : &apos;Tracy McGrady&apos;&#125;</span><br><span class=\"line\">    var updateinfo = &#123;&apos;updateTime&apos; : new Date()&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    oneModel.update(wherestr, updateinfo , function(err, res)&#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(&quot;Error:&quot; + err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            console.log(&quot;Res:&quot; + res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure>\n<p>更新规则，在这类model中按名称来更新updateTime属性。<br>查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getByConditions()&#123;</span><br><span class=\"line\">    var wherestr = &#123;&apos;username&apos; : &apos;Tracy McGrady&apos;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    oneModel.find(wherestr, function(err, res)&#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(&quot;Error:&quot; + err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            console.log(&quot;Res:&quot; + res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">getByConditions();</span><br></pre></td></tr></table></figure>\n<p>返回的res为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">    _id: 5a3f6664b2938f0517a2fa2e,</span><br><span class=\"line\">    username: &apos;Tracy McGrady&apos;,</span><br><span class=\"line\">    userpwd: &apos;abcd&apos;,</span><br><span class=\"line\">    userage: 37,</span><br><span class=\"line\">    logindate: 2017-12-24T08:33:40.714Z,</span><br><span class=\"line\">    updateTime: 2017-12-24T08:35:48.898Z,</span><br><span class=\"line\">    __v: 0 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第2个参数可以设置要查询输出的字段,比如 var opt = {“username”: 1 ,”_id”: 0};<br>返回的res为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; username: &apos;Tracy McGrady&apos; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>比如我要查询年龄范围条件应该怎么写呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oneModel.find(&#123;userage: &#123;$gte: 21, $lte: 65&#125;&#125;, callback);    //这表示查询年龄大于等21而且小于等于65岁</span><br></pre></td></tr></table></figure></p>\n<p>其实类似的还有：　</p>\n<p>　　$or　　　　       或关系<br>　　$nor　　　        或关系取反<br>　　$gt　　　　       大于<br>　　$gte　　　        大于等于<br>　　$lt　　　　       小于<br>　　$lte　　　        小于等于<br>　　$ne              不等于<br>　　$in              在多个值范围内<br>　　$nin             不在多个值范围内<br>　　$all             匹配数组中多个值<br>　　$regex　　        正则，用于模糊查询<br>　　$size　　　       匹配数组大小<br>　　$maxDistance　   范围查询，距离（基于LBS）<br>　　$mod　　         取模运算<br>　　$near　　　       邻域查询，查询附近的位置（基于LBS）<br>　　$exists　　      字段是否存在<br>　　$elemMatch　　   匹配内数组内的元素<br>　　$within　　      范围查询（基于LBS）<br>　　$box　　　       范围查询，矩形范围（基于LBS）<br>　　$center         范围醒询，圆形范围（基于LBS）<br>　　$centerSphere　　范围查询，球形范围（基于LBS）<br>　　$slice　　　　    查询字段集合中的元素（比如从第几个之后，第N到第M个元素）<br>建索引和设置默认值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var UserSchema = new Schema(&#123;          </span><br><span class=\"line\">    username : &#123; type: String , index: true&#125;,  </span><br><span class=\"line\">    userpwd: &#123;type: String&#125;,                    </span><br><span class=\"line\">    userage: &#123;type: Number&#125;,                   </span><br><span class=\"line\">    logindate : &#123; type: Date, default:Date.now&#125; </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>　</p>\n<p>更多的操作，查询<a href=\"http://www.nodeclass.com/api/mongoose.html#model-js\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>这个系列将记载我在学习Node.js中常用的包相关的内容，作为以后工作中的备忘笔记。<br><a href=\"http://mongoosejs.com/docs/api.html\" target=\"_blank\" rel=\"noopener\">官方文档</a><br><a href=\"http://www.nodeclass.com/api/mongoose.html\" target=\"_blank\" rel=\"noopener\">社区文档</a></p>\n<hr>\n<h3 id=\"安装mongoose\"><a href=\"#安装mongoose\" class=\"headerlink\" title=\"安装mongoose\"></a>安装mongoose</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mongoose</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接mongoose\"><a href=\"#连接mongoose\" class=\"headerlink\" title=\"连接mongoose\"></a>连接mongoose</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mongoose = require(&apos;mongoose&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(&apos;mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds147681.mlab.com:47681/aishuangying&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var db = mongoose.connection;</span><br><span class=\"line\"></span><br><span class=\"line\">db.on(&apos;error&apos;, console.error.bind(console, &apos;connection error:&apos;));</span><br><span class=\"line\">db.once(&apos;open&apos;, function (callback) &#123;</span><br><span class=\"line\">    console.log(&apos;connect success&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.nodeclass.com/api/mongoose.html#connection-js\" target=\"_blank\" rel=\"noopener\">点击这里</a>文档了解更多connection事件</p>\n<h3 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h3><hr>\n<p>Schema是mongoose的定义表结构的数据模式。<br>每个Schema会映射到mongodb中的一个collection，但是它不具备操作数据库的能力。<br>定义Schema</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Schema = mongoose.Schema;         //这里的mongoose就是上面初始化好的mongoose变量</span><br><span class=\"line\"></span><br><span class=\"line\">var OneSchema = new Schema(&#123;          </span><br><span class=\"line\">    username : &#123; type: String &#125;,</span><br><span class=\"line\">    userpwd: &#123;type: String&#125;,</span><br><span class=\"line\">    userage: &#123;type: Number&#125;,</span><br><span class=\"line\">    logindate : &#123; type: Date&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.nodeclass.com/api/mongoose.html#schematype-js\" target=\"_blank\" rel=\"noopener\">点击这里</a>文档了解更多Schema类型</p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><hr>\n<p>定义好Schema之后生成Model<br>model是由schema生成的模型，可以对数据库的操作<br>我们对上面的定义的user的schema生成一个User的model并导出，修改后代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var oneModel = mongoose.model(&apos;newUser&apos;,OneSchema);</span><br></pre></td></tr></table></figure>\n<p>这里的’User’就是数据库中对应的Collection名称</p>\n<h3 id=\"常用的数据库操作\"><a href=\"#常用的数据库操作\" class=\"headerlink\" title=\"常用的数据库操作\"></a>常用的数据库操作</h3><hr>\n<p>插入数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function insert() &#123;</span><br><span class=\"line\">    var one = new oneModel(&#123;</span><br><span class=\"line\">        username : &apos;Tracy McGrady&apos;,                 //用户账号</span><br><span class=\"line\">        userpwd: &apos;abcd&apos;,                            //密码</span><br><span class=\"line\">        userage: 37,                                //年龄</span><br><span class=\"line\">        logindate : new Date(),                      //最近登录时间</span><br><span class=\"line\">        updateTime : new Date()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    one.save(function (err, res) &#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(&quot;Error:&quot; + err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            console.log(&quot;Res:&quot; + res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">insert();</span><br></pre></td></tr></table></figure>\n<p>更新数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function update()&#123;</span><br><span class=\"line\">    var wherestr = &#123;&apos;username&apos; : &apos;Tracy McGrady&apos;&#125;</span><br><span class=\"line\">    var updateinfo = &#123;&apos;updateTime&apos; : new Date()&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    oneModel.update(wherestr, updateinfo , function(err, res)&#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(&quot;Error:&quot; + err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            console.log(&quot;Res:&quot; + res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure>\n<p>更新规则，在这类model中按名称来更新updateTime属性。<br>查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getByConditions()&#123;</span><br><span class=\"line\">    var wherestr = &#123;&apos;username&apos; : &apos;Tracy McGrady&apos;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    oneModel.find(wherestr, function(err, res)&#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(&quot;Error:&quot; + err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            console.log(&quot;Res:&quot; + res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">getByConditions();</span><br></pre></td></tr></table></figure>\n<p>返回的res为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">    _id: 5a3f6664b2938f0517a2fa2e,</span><br><span class=\"line\">    username: &apos;Tracy McGrady&apos;,</span><br><span class=\"line\">    userpwd: &apos;abcd&apos;,</span><br><span class=\"line\">    userage: 37,</span><br><span class=\"line\">    logindate: 2017-12-24T08:33:40.714Z,</span><br><span class=\"line\">    updateTime: 2017-12-24T08:35:48.898Z,</span><br><span class=\"line\">    __v: 0 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第2个参数可以设置要查询输出的字段,比如 var opt = {“username”: 1 ,”_id”: 0};<br>返回的res为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; username: &apos;Tracy McGrady&apos; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>比如我要查询年龄范围条件应该怎么写呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oneModel.find(&#123;userage: &#123;$gte: 21, $lte: 65&#125;&#125;, callback);    //这表示查询年龄大于等21而且小于等于65岁</span><br></pre></td></tr></table></figure></p>\n<p>其实类似的还有：　</p>\n<p>　　$or　　　　       或关系<br>　　$nor　　　        或关系取反<br>　　$gt　　　　       大于<br>　　$gte　　　        大于等于<br>　　$lt　　　　       小于<br>　　$lte　　　        小于等于<br>　　$ne              不等于<br>　　$in              在多个值范围内<br>　　$nin             不在多个值范围内<br>　　$all             匹配数组中多个值<br>　　$regex　　        正则，用于模糊查询<br>　　$size　　　       匹配数组大小<br>　　$maxDistance　   范围查询，距离（基于LBS）<br>　　$mod　　         取模运算<br>　　$near　　　       邻域查询，查询附近的位置（基于LBS）<br>　　$exists　　      字段是否存在<br>　　$elemMatch　　   匹配内数组内的元素<br>　　$within　　      范围查询（基于LBS）<br>　　$box　　　       范围查询，矩形范围（基于LBS）<br>　　$center         范围醒询，圆形范围（基于LBS）<br>　　$centerSphere　　范围查询，球形范围（基于LBS）<br>　　$slice　　　　    查询字段集合中的元素（比如从第几个之后，第N到第M个元素）<br>建索引和设置默认值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var UserSchema = new Schema(&#123;          </span><br><span class=\"line\">    username : &#123; type: String , index: true&#125;,  </span><br><span class=\"line\">    userpwd: &#123;type: String&#125;,                    </span><br><span class=\"line\">    userage: &#123;type: Number&#125;,                   </span><br><span class=\"line\">    logindate : &#123; type: Date, default:Date.now&#125; </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>　</p>\n<p>更多的操作，查询<a href=\"http://www.nodeclass.com/api/mongoose.html#model-js\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n"},{"layout":"post","title":"San学习笔记 三","subtitle":"插槽","date":"2018-01-08T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 插槽\n-------------\n\n在视图模板中可以通过 slot 声明一个插槽的位置，其位置的内容可以由外层组件定义。\n\n```\n    var Panel = san.defineComponent({\n\t    template: '<div>'\n\t        + '  <div class=\"head\" on-click=\"toggle\">title</div>'\n\t        + '  <p><slot></slot></p>'\n\t        + '</div>',\n\n\t    initData: function () {\n\t        return {name: 'Panel'};\n\t    }\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'ui-panel': Panel\n\t    },\n\n\t    template: '<div><ui-panel>I am {{name}}</ui-panel></div>',\n\n\t    initData: function () {\n\t        return {name: 'MyComponent'};\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t  <div class=\"head\">title</div>\n\t  <p>I am MyComponent</p>\n\t</div>\n\t*/\n```\n\n可以看到，MyComponent组件中传入的信息插在了Panel组件提供的slot插槽中，并且其数据环境为 声明时的环境，即name取值为'MyComponent'\n\n那么如果想要给组件的不同位置插入信息该怎么办呢？就需要对插槽进行命名。\n\n一个视图模板的声明可以包含一个默认 slot 和多个命名 slot。外层组件的元素通过 slot=\"name\" 的属性声明，可以指定自身的插入点。\n\n```\n    var Tab = san.defineComponent({\n\t    template: '<div>'\n\t        + '  <header><slot name=\"title\"></slot></header>'\n\t        + '  <main><slot></slot></main>'\n\t        + '</div>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'ui-tab': Tab\n\t    },\n\n\t    template: '<div><ui-tab>'\n\t        + '<h3 slot=\"title\">1</h3><p>one</p>'\n\t        + '<h3 slot=\"title\">2</h3><p>two<a slot=\"title\">slot fail</a></p>'\n\t        + '</ui-tab></div>'\n\t});\n\n\t/* MyComponent渲染结果，a 元素无法被插入 title slot\n\t<div>\n\t  <header><h3>1</h3><h3>2</h3></header>\n\t  <main><p>one</p><p>two<a>slot fail</a></p></main>\n\t</div>\n\t*/\n```\n\n可见拥有title的slot属性的信息被插入到了组件的name=‘title’的插槽中，但是这里有个问题，那就是 外层组件的替换元素，只有在直接子元素上才能声明 slot=\"name\" 指定自身的插入点。\n\n\n在 slot 声明时应用 if 或 for 指令，可以让插槽根据组件数据动态化。\n\npanel 的 hidden 属性为 true 时，panel 中默认插槽将不会渲染，仅包含 title 插槽，通过 slot 方法获取的数组长度为 0。\n\n也就是说，传入panel的hidden属性为true，所以除了name=\"title\"之外的slot都不会渲染，所以最终只出现了title部分，而desc部分没有渲染出来。\n\n而for指令的用法类似if指令。\n\n```\n    var Panel = san.defineComponent({\n\t    template: '<div><slot name=\"title\"/><slot s-if=\"!hidden\"/></div>',\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t      'x-panel': Panel\n\t    },\n\n\t    template: ''\n\t        + '<div>'\n\t          + '<x-panel hidden=\"{{folderHidden}}\" s-ref=\"panel\">'\n\t              + '<b slot=\"title\">{{name}}</b>'\n\t              + '<p>{{desc}}</p>'\n\t          + '</x-panel>'\n\t        + '</div>',\n\n\t    attached: function () {\n\t        // 0\n\t        this.ref('panel').slot().length\n\t    }\n\t});\n\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        folderHidden: true,\n\t        desc: 'MVVM component framework',\n\t        name: 'San'\n\t    }\n\t});\n\n\t/* MyComponent渲染结果，hidden为true所以不包含default slot\n\t<div>\n\t    <b>San</b>\n\t</div>\n\t*/\n```\n\n\n#### scoped 插槽\n\n如果 slot 声明中包含 1 个以上 var- 数据前缀声明，该 slot 为 scoped slot。scoped slot 具有独立的 数据环境，其中仅包含 var- 声明的数据。scoped 数据声明的形式为 var-name=”expression”。\n\nscoped slot 通常用于组件的视图部分期望由 外部传入视图结构，渲染过程使用组件内部数据。\n\n但是在此例子中组件使用的数据依旧是外部传入的，有点混淆，其实是从MyComponent中定义了组件结构，并在对应的信息位置放置了变量，这些变量都将在Men组件内部来定义，组件中的p标签并没有意义，去除结果也是一样的，这里只是负责把数据定义出来就可以了\n\n```\n    var Men = san.defineComponent({\n\t    template: '<div>'\n\t      + '<slot s-for=\"item in data\" var-n=\"item.name\" var-email=\"item.email\" var-sex=\"item.sex ? \\'male\\' : \\'female\\'\">'\n\t        + '<p>{{n}},{{sex}},{{email}}</p>'\n\t      + '</slot>'\n\t      + '</div>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'x-men': Men\n\t    },\n\n\t    template: '<div><x-men data=\"{{men}}\" s-ref=\"men\">'\n\t          + '<h3>{{n}}</h3>'\n\t          + '<p><b>{{sex}}</b><u>{{email}}</u></p>'\n\t        + '</x-men></div>',\n\n\t    attached: function () {\n\t        var slots = this.ref('men').slot();\n\n\t        // 3\n\t        slots.length\n\n\t        // truthy\n\t        slots[0].isInserted\n\n\t        // truthy\n\t        contentSlot.isScoped\n\t    }\n\t});\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        men: [\n\t            {name: 'errorrik', sex: 1, email: 'errorrik@gmail.com'},\n\t            {name: 'leeight', sex: 0, email: 'leeight@gmail.com'},\n\t            {name: 'otakustay', email: 'otakustay@gmail.com', sex: 1}\n\t        ]\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t    <h3>errorrik</h3>\n\t    <p><b>male</b><u>errorrik@gmail.com</u></p>\n\t    <h3>leeight</h3>\n\t    <p><b>female</b><u>leeight@gmail.com</u></p>\n\t    <h3>otakustay</h3>\n\t    <p><b>male</b><u>otakustay@gmail.com</u></p>\n\t</div>\n\t*/\n```\n\nscoped slot 中，除了可以访问 var- 声明的数据外，还可以访问当前环境的数据。\n\n* 使用 slot 默认内容时，可以访问组件内部环境数据\n* 外层组件定义的 slot 内容，可以访问外层组件环境的数据\n\n```\n    var Man = san.defineComponent({\n\t    template: '<p>'\n\t      +   '<slot var-n=\"who.name\" var-email=\"who.email\">'\n\t      +     '{{n}},{{email}},{{country}}'\n\t      +   '</slot>'\n\t      + '</p>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'x-man': Man\n\t    },\n\n\t    template: ''\n\t        + '<div><x-man who=\"{{man}}\" country=\"{{country}}\">'\n\t        +   '<b>{{n}} - {{province}}</b>'\n\t        +   '<u>{{email}}</u>'\n\t        + '</x-man></div>'\n\t});\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        man: {\n\t            name: 'errorrik', \n\t            email: 'errorrik@gmail.com'\n\t        },\n\t        country: 'China',\n\t        province: 'HN'\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t    <p>\n\t        <b>errorrik - HN</b>\n\t        <u>errorrik@gmail.com</u>\n\t    </p>\n\t</div>\n\t*/\n```\n\n这里组件中的n,province和email三个变量中province未在组件内部进行定义，所以可以取到父组件中定义的内容，即HN，但是如果稍加修改如下\n\n```\n\t<slot var-n=\"who.name\" var-email=\"who.email\" var-province=\"who.province\">\n\t\t'{{n}},{{email}},{{country}},{{province}}'\n\n\tman: {\n        name: 'errorrik', \n        email: 'errorrik@gmail.com',\n        province: 'CN'\n    },\n```\n\n即在组件内部定义一个province变量，那么就可以覆盖掉父组件中的对应值，可见slot优先使用组件内部值\n\n\n#### 动态命名\n-------------\n\nslot 声明中，组件可以使用当前的数据环境进行命名，从而提供动态的插槽。插槽的动态命名常用于 组件结构根据数据生成 的场景下，比如表格组件。\n\n这里table组件中就进行了动态命名，当name=“col-name”时，父组件定义的b标签就会插入进去，从而实现在列表中加粗姓名的效果。\n\n```\n    var Table = san.defineComponent({\n\t    template: ''\n\t        + '<table>'\n\t        +   '<thead><tr><th s-for=\"col in columns\">{{col.label}}</th></tr></thead>'\n\t        +   '<tbody>'\n\t        +     '<tr s-for=\"row in datasource\">'\n\t        +       '<td s-for=\"col in columns\">'\n\t        +         '<slot name=\"col-{{col.name}}\" var-row=\"row\" var-col=\"col\">{{row[col.name]}}</slot>'\n\t        +       '</td>'\n\t        + '    </tr>'\n\t        +   '</tbody>'\n\t        + '</table>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'x-table': Table\n\t    },\n\n\t    template: ''\n\t        + '<div>'\n\t        +   '<x-table columns=\"{{columns}}\" datasource=\"{{list}}\">'\n\t        +     '<b slot=\"col-name\">{{row.name}}</b>'\n\t        +   '</x-table>'\n\t        + '</div>'\n\n\t});\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        columns: [\n\t            {name: 'name', label: '名'},\n\t            {name: 'email', label: '邮'}\n\t        ],\n\t        list: [\n\t            {name: 'errorrik', email: 'errorrik@gmail.com'},\n\t            {name: 'leeight', email: 'leeight@gmail.com'}\n\t        ]\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t    <table>\n\t        <thead>\n\t            <tr>\n\t                <th>名</th>\n\t                <th>邮</th>\n\t            </tr>\n\t        </thead>\n\t        <tbody>\n\t            <tr>\n\t                <td><b>errorrik</b></td>\n\t                <td>errorrik@gmail.com</td>\n\t            </tr>\n\t            <tr>\n\t                <td><b>leeight</b></td>\n\t                <td>leeight@gmail.com</td>\n\t            </tr>\n\t        </tbody>\n\t    </table>\n\t</div>\n\t*/\n```\n\n","source":"_posts/san3.md","raw":"---\nlayout: post\ntitle: \"San学习笔记 三\"\nsubtitle: \"插槽\"\ndate: 2018-1-9\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - San\n---\n\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 插槽\n-------------\n\n在视图模板中可以通过 slot 声明一个插槽的位置，其位置的内容可以由外层组件定义。\n\n```\n    var Panel = san.defineComponent({\n\t    template: '<div>'\n\t        + '  <div class=\"head\" on-click=\"toggle\">title</div>'\n\t        + '  <p><slot></slot></p>'\n\t        + '</div>',\n\n\t    initData: function () {\n\t        return {name: 'Panel'};\n\t    }\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'ui-panel': Panel\n\t    },\n\n\t    template: '<div><ui-panel>I am {{name}}</ui-panel></div>',\n\n\t    initData: function () {\n\t        return {name: 'MyComponent'};\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t  <div class=\"head\">title</div>\n\t  <p>I am MyComponent</p>\n\t</div>\n\t*/\n```\n\n可以看到，MyComponent组件中传入的信息插在了Panel组件提供的slot插槽中，并且其数据环境为 声明时的环境，即name取值为'MyComponent'\n\n那么如果想要给组件的不同位置插入信息该怎么办呢？就需要对插槽进行命名。\n\n一个视图模板的声明可以包含一个默认 slot 和多个命名 slot。外层组件的元素通过 slot=\"name\" 的属性声明，可以指定自身的插入点。\n\n```\n    var Tab = san.defineComponent({\n\t    template: '<div>'\n\t        + '  <header><slot name=\"title\"></slot></header>'\n\t        + '  <main><slot></slot></main>'\n\t        + '</div>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'ui-tab': Tab\n\t    },\n\n\t    template: '<div><ui-tab>'\n\t        + '<h3 slot=\"title\">1</h3><p>one</p>'\n\t        + '<h3 slot=\"title\">2</h3><p>two<a slot=\"title\">slot fail</a></p>'\n\t        + '</ui-tab></div>'\n\t});\n\n\t/* MyComponent渲染结果，a 元素无法被插入 title slot\n\t<div>\n\t  <header><h3>1</h3><h3>2</h3></header>\n\t  <main><p>one</p><p>two<a>slot fail</a></p></main>\n\t</div>\n\t*/\n```\n\n可见拥有title的slot属性的信息被插入到了组件的name=‘title’的插槽中，但是这里有个问题，那就是 外层组件的替换元素，只有在直接子元素上才能声明 slot=\"name\" 指定自身的插入点。\n\n\n在 slot 声明时应用 if 或 for 指令，可以让插槽根据组件数据动态化。\n\npanel 的 hidden 属性为 true 时，panel 中默认插槽将不会渲染，仅包含 title 插槽，通过 slot 方法获取的数组长度为 0。\n\n也就是说，传入panel的hidden属性为true，所以除了name=\"title\"之外的slot都不会渲染，所以最终只出现了title部分，而desc部分没有渲染出来。\n\n而for指令的用法类似if指令。\n\n```\n    var Panel = san.defineComponent({\n\t    template: '<div><slot name=\"title\"/><slot s-if=\"!hidden\"/></div>',\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t      'x-panel': Panel\n\t    },\n\n\t    template: ''\n\t        + '<div>'\n\t          + '<x-panel hidden=\"{{folderHidden}}\" s-ref=\"panel\">'\n\t              + '<b slot=\"title\">{{name}}</b>'\n\t              + '<p>{{desc}}</p>'\n\t          + '</x-panel>'\n\t        + '</div>',\n\n\t    attached: function () {\n\t        // 0\n\t        this.ref('panel').slot().length\n\t    }\n\t});\n\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        folderHidden: true,\n\t        desc: 'MVVM component framework',\n\t        name: 'San'\n\t    }\n\t});\n\n\t/* MyComponent渲染结果，hidden为true所以不包含default slot\n\t<div>\n\t    <b>San</b>\n\t</div>\n\t*/\n```\n\n\n#### scoped 插槽\n\n如果 slot 声明中包含 1 个以上 var- 数据前缀声明，该 slot 为 scoped slot。scoped slot 具有独立的 数据环境，其中仅包含 var- 声明的数据。scoped 数据声明的形式为 var-name=”expression”。\n\nscoped slot 通常用于组件的视图部分期望由 外部传入视图结构，渲染过程使用组件内部数据。\n\n但是在此例子中组件使用的数据依旧是外部传入的，有点混淆，其实是从MyComponent中定义了组件结构，并在对应的信息位置放置了变量，这些变量都将在Men组件内部来定义，组件中的p标签并没有意义，去除结果也是一样的，这里只是负责把数据定义出来就可以了\n\n```\n    var Men = san.defineComponent({\n\t    template: '<div>'\n\t      + '<slot s-for=\"item in data\" var-n=\"item.name\" var-email=\"item.email\" var-sex=\"item.sex ? \\'male\\' : \\'female\\'\">'\n\t        + '<p>{{n}},{{sex}},{{email}}</p>'\n\t      + '</slot>'\n\t      + '</div>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'x-men': Men\n\t    },\n\n\t    template: '<div><x-men data=\"{{men}}\" s-ref=\"men\">'\n\t          + '<h3>{{n}}</h3>'\n\t          + '<p><b>{{sex}}</b><u>{{email}}</u></p>'\n\t        + '</x-men></div>',\n\n\t    attached: function () {\n\t        var slots = this.ref('men').slot();\n\n\t        // 3\n\t        slots.length\n\n\t        // truthy\n\t        slots[0].isInserted\n\n\t        // truthy\n\t        contentSlot.isScoped\n\t    }\n\t});\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        men: [\n\t            {name: 'errorrik', sex: 1, email: 'errorrik@gmail.com'},\n\t            {name: 'leeight', sex: 0, email: 'leeight@gmail.com'},\n\t            {name: 'otakustay', email: 'otakustay@gmail.com', sex: 1}\n\t        ]\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t    <h3>errorrik</h3>\n\t    <p><b>male</b><u>errorrik@gmail.com</u></p>\n\t    <h3>leeight</h3>\n\t    <p><b>female</b><u>leeight@gmail.com</u></p>\n\t    <h3>otakustay</h3>\n\t    <p><b>male</b><u>otakustay@gmail.com</u></p>\n\t</div>\n\t*/\n```\n\nscoped slot 中，除了可以访问 var- 声明的数据外，还可以访问当前环境的数据。\n\n* 使用 slot 默认内容时，可以访问组件内部环境数据\n* 外层组件定义的 slot 内容，可以访问外层组件环境的数据\n\n```\n    var Man = san.defineComponent({\n\t    template: '<p>'\n\t      +   '<slot var-n=\"who.name\" var-email=\"who.email\">'\n\t      +     '{{n}},{{email}},{{country}}'\n\t      +   '</slot>'\n\t      + '</p>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'x-man': Man\n\t    },\n\n\t    template: ''\n\t        + '<div><x-man who=\"{{man}}\" country=\"{{country}}\">'\n\t        +   '<b>{{n}} - {{province}}</b>'\n\t        +   '<u>{{email}}</u>'\n\t        + '</x-man></div>'\n\t});\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        man: {\n\t            name: 'errorrik', \n\t            email: 'errorrik@gmail.com'\n\t        },\n\t        country: 'China',\n\t        province: 'HN'\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t    <p>\n\t        <b>errorrik - HN</b>\n\t        <u>errorrik@gmail.com</u>\n\t    </p>\n\t</div>\n\t*/\n```\n\n这里组件中的n,province和email三个变量中province未在组件内部进行定义，所以可以取到父组件中定义的内容，即HN，但是如果稍加修改如下\n\n```\n\t<slot var-n=\"who.name\" var-email=\"who.email\" var-province=\"who.province\">\n\t\t'{{n}},{{email}},{{country}},{{province}}'\n\n\tman: {\n        name: 'errorrik', \n        email: 'errorrik@gmail.com',\n        province: 'CN'\n    },\n```\n\n即在组件内部定义一个province变量，那么就可以覆盖掉父组件中的对应值，可见slot优先使用组件内部值\n\n\n#### 动态命名\n-------------\n\nslot 声明中，组件可以使用当前的数据环境进行命名，从而提供动态的插槽。插槽的动态命名常用于 组件结构根据数据生成 的场景下，比如表格组件。\n\n这里table组件中就进行了动态命名，当name=“col-name”时，父组件定义的b标签就会插入进去，从而实现在列表中加粗姓名的效果。\n\n```\n    var Table = san.defineComponent({\n\t    template: ''\n\t        + '<table>'\n\t        +   '<thead><tr><th s-for=\"col in columns\">{{col.label}}</th></tr></thead>'\n\t        +   '<tbody>'\n\t        +     '<tr s-for=\"row in datasource\">'\n\t        +       '<td s-for=\"col in columns\">'\n\t        +         '<slot name=\"col-{{col.name}}\" var-row=\"row\" var-col=\"col\">{{row[col.name]}}</slot>'\n\t        +       '</td>'\n\t        + '    </tr>'\n\t        +   '</tbody>'\n\t        + '</table>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'x-table': Table\n\t    },\n\n\t    template: ''\n\t        + '<div>'\n\t        +   '<x-table columns=\"{{columns}}\" datasource=\"{{list}}\">'\n\t        +     '<b slot=\"col-name\">{{row.name}}</b>'\n\t        +   '</x-table>'\n\t        + '</div>'\n\n\t});\n\n\tvar myComponent = new MyComponent({\n\t    data: {\n\t        columns: [\n\t            {name: 'name', label: '名'},\n\t            {name: 'email', label: '邮'}\n\t        ],\n\t        list: [\n\t            {name: 'errorrik', email: 'errorrik@gmail.com'},\n\t            {name: 'leeight', email: 'leeight@gmail.com'}\n\t        ]\n\t    }\n\t});\n\n\t/* MyComponent渲染结果\n\t<div>\n\t    <table>\n\t        <thead>\n\t            <tr>\n\t                <th>名</th>\n\t                <th>邮</th>\n\t            </tr>\n\t        </thead>\n\t        <tbody>\n\t            <tr>\n\t                <td><b>errorrik</b></td>\n\t                <td>errorrik@gmail.com</td>\n\t            </tr>\n\t            <tr>\n\t                <td><b>leeight</b></td>\n\t                <td>leeight@gmail.com</td>\n\t            </tr>\n\t        </tbody>\n\t    </table>\n\t</div>\n\t*/\n```\n\n","slug":"san3","published":1,"updated":"2018-01-31T04:59:51.367Z","comments":1,"photos":[],"link":"","_id":"cjekvj52w000armjfam98l9y6","content":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><hr>\n<p>在视图模板中可以通过 slot 声明一个插槽的位置，其位置的内容可以由外层组件定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Panel = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;div class=&quot;head&quot; on-click=&quot;toggle&quot;&gt;title&lt;/div&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;p&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;name: &apos;Panel&apos;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;ui-panel&apos;: Panel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-panel&gt;I am &#123;&#123;name&#125;&#125;&lt;/ui-panel&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;name: &apos;MyComponent&apos;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;head&quot;&gt;title&lt;/div&gt;</span><br><span class=\"line\">  &lt;p&gt;I am MyComponent&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>可以看到，MyComponent组件中传入的信息插在了Panel组件提供的slot插槽中，并且其数据环境为 声明时的环境，即name取值为’MyComponent’</p>\n<p>那么如果想要给组件的不同位置插入信息该怎么办呢？就需要对插槽进行命名。</p>\n<p>一个视图模板的声明可以包含一个默认 slot 和多个命名 slot。外层组件的元素通过 slot=”name” 的属性声明，可以指定自身的插入点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Tab = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;header&gt;&lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;&lt;/header&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;main&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/main&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;ui-tab&apos;: Tab</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-tab&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;h3 slot=&quot;title&quot;&gt;1&lt;/h3&gt;&lt;p&gt;one&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;h3 slot=&quot;title&quot;&gt;2&lt;/h3&gt;&lt;p&gt;two&lt;a slot=&quot;title&quot;&gt;slot fail&lt;/a&gt;&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/ui-tab&gt;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果，a 元素无法被插入 title slot</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;header&gt;&lt;h3&gt;1&lt;/h3&gt;&lt;h3&gt;2&lt;/h3&gt;&lt;/header&gt;</span><br><span class=\"line\">  &lt;main&gt;&lt;p&gt;one&lt;/p&gt;&lt;p&gt;two&lt;a&gt;slot fail&lt;/a&gt;&lt;/p&gt;&lt;/main&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>可见拥有title的slot属性的信息被插入到了组件的name=‘title’的插槽中，但是这里有个问题，那就是 外层组件的替换元素，只有在直接子元素上才能声明 slot=”name” 指定自身的插入点。</p>\n<p>在 slot 声明时应用 if 或 for 指令，可以让插槽根据组件数据动态化。</p>\n<p>panel 的 hidden 属性为 true 时，panel 中默认插槽将不会渲染，仅包含 title 插槽，通过 slot 方法获取的数组长度为 0。</p>\n<p>也就是说，传入panel的hidden属性为true，所以除了name=”title”之外的slot都不会渲染，所以最终只出现了title部分，而desc部分没有渲染出来。</p>\n<p>而for指令的用法类似if指令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Panel = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;slot name=&quot;title&quot;/&gt;&lt;slot s-if=&quot;!hidden&quot;/&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      &apos;x-panel&apos;: Panel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;x-panel hidden=&quot;&#123;&#123;folderHidden&#125;&#125;&quot; s-ref=&quot;panel&quot;&gt;&apos;</span><br><span class=\"line\">              + &apos;&lt;b slot=&quot;title&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/b&gt;&apos;</span><br><span class=\"line\">              + &apos;&lt;p&gt;&#123;&#123;desc&#125;&#125;&lt;/p&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;/x-panel&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        // 0</span><br><span class=\"line\">        this.ref(&apos;panel&apos;).slot().length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        folderHidden: true,</span><br><span class=\"line\">        desc: &apos;MVVM component framework&apos;,</span><br><span class=\"line\">        name: &apos;San&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果，hidden为true所以不包含default slot</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;b&gt;San&lt;/b&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<h4 id=\"scoped-插槽\"><a href=\"#scoped-插槽\" class=\"headerlink\" title=\"scoped 插槽\"></a>scoped 插槽</h4><p>如果 slot 声明中包含 1 个以上 var- 数据前缀声明，该 slot 为 scoped slot。scoped slot 具有独立的 数据环境，其中仅包含 var- 声明的数据。scoped 数据声明的形式为 var-name=”expression”。</p>\n<p>scoped slot 通常用于组件的视图部分期望由 外部传入视图结构，渲染过程使用组件内部数据。</p>\n<p>但是在此例子中组件使用的数据依旧是外部传入的，有点混淆，其实是从MyComponent中定义了组件结构，并在对应的信息位置放置了变量，这些变量都将在Men组件内部来定义，组件中的p标签并没有意义，去除结果也是一样的，这里只是负责把数据定义出来就可以了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Men = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;slot s-for=&quot;item in data&quot; var-n=&quot;item.name&quot; var-email=&quot;item.email&quot; var-sex=&quot;item.sex ? \\&apos;male\\&apos; : \\&apos;female\\&apos;&quot;&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;p&gt;&#123;&#123;n&#125;&#125;,&#123;&#123;sex&#125;&#125;,&#123;&#123;email&#125;&#125;&lt;/p&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;/slot&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;x-men&apos;: Men</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;x-men data=&quot;&#123;&#123;men&#125;&#125;&quot; s-ref=&quot;men&quot;&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;h3&gt;&#123;&#123;n&#125;&#125;&lt;/h3&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;p&gt;&lt;b&gt;&#123;&#123;sex&#125;&#125;&lt;/b&gt;&lt;u&gt;&#123;&#123;email&#125;&#125;&lt;/u&gt;&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/x-men&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        var slots = this.ref(&apos;men&apos;).slot();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 3</span><br><span class=\"line\">        slots.length</span><br><span class=\"line\"></span><br><span class=\"line\">        // truthy</span><br><span class=\"line\">        slots[0].isInserted</span><br><span class=\"line\"></span><br><span class=\"line\">        // truthy</span><br><span class=\"line\">        contentSlot.isScoped</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        men: [</span><br><span class=\"line\">            &#123;name: &apos;errorrik&apos;, sex: 1, email: &apos;errorrik@gmail.com&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;leeight&apos;, sex: 0, email: &apos;leeight@gmail.com&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;otakustay&apos;, email: &apos;otakustay@gmail.com&apos;, sex: 1&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;h3&gt;errorrik&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;b&gt;male&lt;/b&gt;&lt;u&gt;errorrik@gmail.com&lt;/u&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;h3&gt;leeight&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;b&gt;female&lt;/b&gt;&lt;u&gt;leeight@gmail.com&lt;/u&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;h3&gt;otakustay&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;b&gt;male&lt;/b&gt;&lt;u&gt;otakustay@gmail.com&lt;/u&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>scoped slot 中，除了可以访问 var- 声明的数据外，还可以访问当前环境的数据。</p>\n<ul>\n<li>使用 slot 默认内容时，可以访问组件内部环境数据</li>\n<li>外层组件定义的 slot 内容，可以访问外层组件环境的数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Man = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;p&gt;&apos;</span><br><span class=\"line\">      +   &apos;&lt;slot var-n=&quot;who.name&quot; var-email=&quot;who.email&quot;&gt;&apos;</span><br><span class=\"line\">      +     &apos;&#123;&#123;n&#125;&#125;,&#123;&#123;email&#125;&#125;,&#123;&#123;country&#125;&#125;&apos;</span><br><span class=\"line\">      +   &apos;&lt;/slot&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;/p&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;x-man&apos;: Man</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&lt;x-man who=&quot;&#123;&#123;man&#125;&#125;&quot; country=&quot;&#123;&#123;country&#125;&#125;&quot;&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;b&gt;&#123;&#123;n&#125;&#125; - &#123;&#123;province&#125;&#125;&lt;/b&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;u&gt;&#123;&#123;email&#125;&#125;&lt;/u&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/x-man&gt;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        man: &#123;</span><br><span class=\"line\">            name: &apos;errorrik&apos;, </span><br><span class=\"line\">            email: &apos;errorrik@gmail.com&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        country: &apos;China&apos;,</span><br><span class=\"line\">        province: &apos;HN&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">        &lt;b&gt;errorrik - HN&lt;/b&gt;</span><br><span class=\"line\">        &lt;u&gt;errorrik@gmail.com&lt;/u&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>这里组件中的n,province和email三个变量中province未在组件内部进行定义，所以可以取到父组件中定义的内容，即HN，但是如果稍加修改如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;slot var-n=&quot;who.name&quot; var-email=&quot;who.email&quot; var-province=&quot;who.province&quot;&gt;</span><br><span class=\"line\">\t&apos;&#123;&#123;n&#125;&#125;,&#123;&#123;email&#125;&#125;,&#123;&#123;country&#125;&#125;,&#123;&#123;province&#125;&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">man: &#123;</span><br><span class=\"line\">       name: &apos;errorrik&apos;, </span><br><span class=\"line\">       email: &apos;errorrik@gmail.com&apos;,</span><br><span class=\"line\">       province: &apos;CN&apos;</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n<p>即在组件内部定义一个province变量，那么就可以覆盖掉父组件中的对应值，可见slot优先使用组件内部值</p>\n<h4 id=\"动态命名\"><a href=\"#动态命名\" class=\"headerlink\" title=\"动态命名\"></a>动态命名</h4><hr>\n<p>slot 声明中，组件可以使用当前的数据环境进行命名，从而提供动态的插槽。插槽的动态命名常用于 组件结构根据数据生成 的场景下，比如表格组件。</p>\n<p>这里table组件中就进行了动态命名，当name=“col-name”时，父组件定义的b标签就会插入进去，从而实现在列表中加粗姓名的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Table = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;table&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;thead&gt;&lt;tr&gt;&lt;th s-for=&quot;col in columns&quot;&gt;&#123;&#123;col.label&#125;&#125;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;tbody&gt;&apos;</span><br><span class=\"line\">        +     &apos;&lt;tr s-for=&quot;row in datasource&quot;&gt;&apos;</span><br><span class=\"line\">        +       &apos;&lt;td s-for=&quot;col in columns&quot;&gt;&apos;</span><br><span class=\"line\">        +         &apos;&lt;slot name=&quot;col-&#123;&#123;col.name&#125;&#125;&quot; var-row=&quot;row&quot; var-col=&quot;col&quot;&gt;&#123;&#123;row[col.name]&#125;&#125;&lt;/slot&gt;&apos;</span><br><span class=\"line\">        +       &apos;&lt;/td&gt;&apos;</span><br><span class=\"line\">        + &apos;    &lt;/tr&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;/tbody&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/table&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;x-table&apos;: Table</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;x-table columns=&quot;&#123;&#123;columns&#125;&#125;&quot; datasource=&quot;&#123;&#123;list&#125;&#125;&quot;&gt;&apos;</span><br><span class=\"line\">        +     &apos;&lt;b slot=&quot;col-name&quot;&gt;&#123;&#123;row.name&#125;&#125;&lt;/b&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;/x-table&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        columns: [</span><br><span class=\"line\">            &#123;name: &apos;name&apos;, label: &apos;名&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;email&apos;, label: &apos;邮&apos;&#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        list: [</span><br><span class=\"line\">            &#123;name: &apos;errorrik&apos;, email: &apos;errorrik@gmail.com&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;leeight&apos;, email: &apos;leeight@gmail.com&apos;&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;table&gt;</span><br><span class=\"line\">        &lt;thead&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th&gt;名&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;邮&lt;/th&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/thead&gt;</span><br><span class=\"line\">        &lt;tbody&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;&lt;b&gt;errorrik&lt;/b&gt;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;errorrik@gmail.com&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;&lt;b&gt;leeight&lt;/b&gt;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;leeight@gmail.com&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/tbody&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><hr>\n<p>在视图模板中可以通过 slot 声明一个插槽的位置，其位置的内容可以由外层组件定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Panel = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;div class=&quot;head&quot; on-click=&quot;toggle&quot;&gt;title&lt;/div&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;p&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;name: &apos;Panel&apos;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;ui-panel&apos;: Panel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-panel&gt;I am &#123;&#123;name&#125;&#125;&lt;/ui-panel&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;name: &apos;MyComponent&apos;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;head&quot;&gt;title&lt;/div&gt;</span><br><span class=\"line\">  &lt;p&gt;I am MyComponent&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>可以看到，MyComponent组件中传入的信息插在了Panel组件提供的slot插槽中，并且其数据环境为 声明时的环境，即name取值为’MyComponent’</p>\n<p>那么如果想要给组件的不同位置插入信息该怎么办呢？就需要对插槽进行命名。</p>\n<p>一个视图模板的声明可以包含一个默认 slot 和多个命名 slot。外层组件的元素通过 slot=”name” 的属性声明，可以指定自身的插入点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Tab = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;header&gt;&lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;&lt;/header&gt;&apos;</span><br><span class=\"line\">        + &apos;  &lt;main&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/main&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;ui-tab&apos;: Tab</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-tab&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;h3 slot=&quot;title&quot;&gt;1&lt;/h3&gt;&lt;p&gt;one&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;h3 slot=&quot;title&quot;&gt;2&lt;/h3&gt;&lt;p&gt;two&lt;a slot=&quot;title&quot;&gt;slot fail&lt;/a&gt;&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/ui-tab&gt;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果，a 元素无法被插入 title slot</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;header&gt;&lt;h3&gt;1&lt;/h3&gt;&lt;h3&gt;2&lt;/h3&gt;&lt;/header&gt;</span><br><span class=\"line\">  &lt;main&gt;&lt;p&gt;one&lt;/p&gt;&lt;p&gt;two&lt;a&gt;slot fail&lt;/a&gt;&lt;/p&gt;&lt;/main&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>可见拥有title的slot属性的信息被插入到了组件的name=‘title’的插槽中，但是这里有个问题，那就是 外层组件的替换元素，只有在直接子元素上才能声明 slot=”name” 指定自身的插入点。</p>\n<p>在 slot 声明时应用 if 或 for 指令，可以让插槽根据组件数据动态化。</p>\n<p>panel 的 hidden 属性为 true 时，panel 中默认插槽将不会渲染，仅包含 title 插槽，通过 slot 方法获取的数组长度为 0。</p>\n<p>也就是说，传入panel的hidden属性为true，所以除了name=”title”之外的slot都不会渲染，所以最终只出现了title部分，而desc部分没有渲染出来。</p>\n<p>而for指令的用法类似if指令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Panel = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;slot name=&quot;title&quot;/&gt;&lt;slot s-if=&quot;!hidden&quot;/&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      &apos;x-panel&apos;: Panel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;x-panel hidden=&quot;&#123;&#123;folderHidden&#125;&#125;&quot; s-ref=&quot;panel&quot;&gt;&apos;</span><br><span class=\"line\">              + &apos;&lt;b slot=&quot;title&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/b&gt;&apos;</span><br><span class=\"line\">              + &apos;&lt;p&gt;&#123;&#123;desc&#125;&#125;&lt;/p&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;/x-panel&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        // 0</span><br><span class=\"line\">        this.ref(&apos;panel&apos;).slot().length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        folderHidden: true,</span><br><span class=\"line\">        desc: &apos;MVVM component framework&apos;,</span><br><span class=\"line\">        name: &apos;San&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果，hidden为true所以不包含default slot</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;b&gt;San&lt;/b&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<h4 id=\"scoped-插槽\"><a href=\"#scoped-插槽\" class=\"headerlink\" title=\"scoped 插槽\"></a>scoped 插槽</h4><p>如果 slot 声明中包含 1 个以上 var- 数据前缀声明，该 slot 为 scoped slot。scoped slot 具有独立的 数据环境，其中仅包含 var- 声明的数据。scoped 数据声明的形式为 var-name=”expression”。</p>\n<p>scoped slot 通常用于组件的视图部分期望由 外部传入视图结构，渲染过程使用组件内部数据。</p>\n<p>但是在此例子中组件使用的数据依旧是外部传入的，有点混淆，其实是从MyComponent中定义了组件结构，并在对应的信息位置放置了变量，这些变量都将在Men组件内部来定义，组件中的p标签并没有意义，去除结果也是一样的，这里只是负责把数据定义出来就可以了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Men = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;slot s-for=&quot;item in data&quot; var-n=&quot;item.name&quot; var-email=&quot;item.email&quot; var-sex=&quot;item.sex ? \\&apos;male\\&apos; : \\&apos;female\\&apos;&quot;&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;p&gt;&#123;&#123;n&#125;&#125;,&#123;&#123;sex&#125;&#125;,&#123;&#123;email&#125;&#125;&lt;/p&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;/slot&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;x-men&apos;: Men</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;x-men data=&quot;&#123;&#123;men&#125;&#125;&quot; s-ref=&quot;men&quot;&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;h3&gt;&#123;&#123;n&#125;&#125;&lt;/h3&gt;&apos;</span><br><span class=\"line\">          + &apos;&lt;p&gt;&lt;b&gt;&#123;&#123;sex&#125;&#125;&lt;/b&gt;&lt;u&gt;&#123;&#123;email&#125;&#125;&lt;/u&gt;&lt;/p&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/x-men&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        var slots = this.ref(&apos;men&apos;).slot();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 3</span><br><span class=\"line\">        slots.length</span><br><span class=\"line\"></span><br><span class=\"line\">        // truthy</span><br><span class=\"line\">        slots[0].isInserted</span><br><span class=\"line\"></span><br><span class=\"line\">        // truthy</span><br><span class=\"line\">        contentSlot.isScoped</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        men: [</span><br><span class=\"line\">            &#123;name: &apos;errorrik&apos;, sex: 1, email: &apos;errorrik@gmail.com&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;leeight&apos;, sex: 0, email: &apos;leeight@gmail.com&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;otakustay&apos;, email: &apos;otakustay@gmail.com&apos;, sex: 1&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;h3&gt;errorrik&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;b&gt;male&lt;/b&gt;&lt;u&gt;errorrik@gmail.com&lt;/u&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;h3&gt;leeight&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;b&gt;female&lt;/b&gt;&lt;u&gt;leeight@gmail.com&lt;/u&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;h3&gt;otakustay&lt;/h3&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;b&gt;male&lt;/b&gt;&lt;u&gt;otakustay@gmail.com&lt;/u&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>scoped slot 中，除了可以访问 var- 声明的数据外，还可以访问当前环境的数据。</p>\n<ul>\n<li>使用 slot 默认内容时，可以访问组件内部环境数据</li>\n<li>外层组件定义的 slot 内容，可以访问外层组件环境的数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Man = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;p&gt;&apos;</span><br><span class=\"line\">      +   &apos;&lt;slot var-n=&quot;who.name&quot; var-email=&quot;who.email&quot;&gt;&apos;</span><br><span class=\"line\">      +     &apos;&#123;&#123;n&#125;&#125;,&#123;&#123;email&#125;&#125;,&#123;&#123;country&#125;&#125;&apos;</span><br><span class=\"line\">      +   &apos;&lt;/slot&gt;&apos;</span><br><span class=\"line\">      + &apos;&lt;/p&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;x-man&apos;: Man</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&lt;x-man who=&quot;&#123;&#123;man&#125;&#125;&quot; country=&quot;&#123;&#123;country&#125;&#125;&quot;&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;b&gt;&#123;&#123;n&#125;&#125; - &#123;&#123;province&#125;&#125;&lt;/b&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;u&gt;&#123;&#123;email&#125;&#125;&lt;/u&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/x-man&gt;&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        man: &#123;</span><br><span class=\"line\">            name: &apos;errorrik&apos;, </span><br><span class=\"line\">            email: &apos;errorrik@gmail.com&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        country: &apos;China&apos;,</span><br><span class=\"line\">        province: &apos;HN&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">        &lt;b&gt;errorrik - HN&lt;/b&gt;</span><br><span class=\"line\">        &lt;u&gt;errorrik@gmail.com&lt;/u&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>这里组件中的n,province和email三个变量中province未在组件内部进行定义，所以可以取到父组件中定义的内容，即HN，但是如果稍加修改如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;slot var-n=&quot;who.name&quot; var-email=&quot;who.email&quot; var-province=&quot;who.province&quot;&gt;</span><br><span class=\"line\">\t&apos;&#123;&#123;n&#125;&#125;,&#123;&#123;email&#125;&#125;,&#123;&#123;country&#125;&#125;,&#123;&#123;province&#125;&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">man: &#123;</span><br><span class=\"line\">       name: &apos;errorrik&apos;, </span><br><span class=\"line\">       email: &apos;errorrik@gmail.com&apos;,</span><br><span class=\"line\">       province: &apos;CN&apos;</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n<p>即在组件内部定义一个province变量，那么就可以覆盖掉父组件中的对应值，可见slot优先使用组件内部值</p>\n<h4 id=\"动态命名\"><a href=\"#动态命名\" class=\"headerlink\" title=\"动态命名\"></a>动态命名</h4><hr>\n<p>slot 声明中，组件可以使用当前的数据环境进行命名，从而提供动态的插槽。插槽的动态命名常用于 组件结构根据数据生成 的场景下，比如表格组件。</p>\n<p>这里table组件中就进行了动态命名，当name=“col-name”时，父组件定义的b标签就会插入进去，从而实现在列表中加粗姓名的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Table = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;table&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;thead&gt;&lt;tr&gt;&lt;th s-for=&quot;col in columns&quot;&gt;&#123;&#123;col.label&#125;&#125;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;tbody&gt;&apos;</span><br><span class=\"line\">        +     &apos;&lt;tr s-for=&quot;row in datasource&quot;&gt;&apos;</span><br><span class=\"line\">        +       &apos;&lt;td s-for=&quot;col in columns&quot;&gt;&apos;</span><br><span class=\"line\">        +         &apos;&lt;slot name=&quot;col-&#123;&#123;col.name&#125;&#125;&quot; var-row=&quot;row&quot; var-col=&quot;col&quot;&gt;&#123;&#123;row[col.name]&#125;&#125;&lt;/slot&gt;&apos;</span><br><span class=\"line\">        +       &apos;&lt;/td&gt;&apos;</span><br><span class=\"line\">        + &apos;    &lt;/tr&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;/tbody&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/table&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;x-table&apos;: Table</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;x-table columns=&quot;&#123;&#123;columns&#125;&#125;&quot; datasource=&quot;&#123;&#123;list&#125;&#125;&quot;&gt;&apos;</span><br><span class=\"line\">        +     &apos;&lt;b slot=&quot;col-name&quot;&gt;&#123;&#123;row.name&#125;&#125;&lt;/b&gt;&apos;</span><br><span class=\"line\">        +   &apos;&lt;/x-table&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myComponent = new MyComponent(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        columns: [</span><br><span class=\"line\">            &#123;name: &apos;name&apos;, label: &apos;名&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;email&apos;, label: &apos;邮&apos;&#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        list: [</span><br><span class=\"line\">            &#123;name: &apos;errorrik&apos;, email: &apos;errorrik@gmail.com&apos;&#125;,</span><br><span class=\"line\">            &#123;name: &apos;leeight&apos;, email: &apos;leeight@gmail.com&apos;&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* MyComponent渲染结果</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;table&gt;</span><br><span class=\"line\">        &lt;thead&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th&gt;名&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;邮&lt;/th&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/thead&gt;</span><br><span class=\"line\">        &lt;tbody&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;&lt;b&gt;errorrik&lt;/b&gt;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;errorrik@gmail.com&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;&lt;b&gt;leeight&lt;/b&gt;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;leeight@gmail.com&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/tbody&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"San学习笔记 二","subtitle":"事件处理及表单提交","date":"2018-01-05T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 事件处理\n-------------\n\n通过 on- 前缀，可以将事件的处理绑定到组件的方法上，无论是 DOM 事件还是组件的自定义事件，都通过 on- 前缀绑定，没有语法区分。\n\non- + 事件名 将 DOM 元素的事件绑定到组件方法上。当 DOM 事件触发时，组件方法将被调用，this 指向组件实例。\n\n```\n    san.defineComponent({\n\t    template: '\n\t    \t<ul>\n\t\t\t    <li s-for=\"item, index in todos\">\n\t\t\t        <h3>{{ item.title }}</h3>\n\t\t\t        <p>{{ item.desc }}</p>\n\t\t\t        <i class=\"fa fa-trash-o\" on-click=\"rmTodo(item)\"></i>\n\t\t\t    </li>\n\t\t\t</ul>',\n\n\t    rmTodo: function (todo) {\n\t        service.rmTodo(todo.id);\n\t        this.data.remove('todos', todo);\n\t    }\n\t});\n```\n\n$event 是 San 保留的一个特殊变量，指定 $event 将引用到 DOM Event 对象。从而你可以拿到事件触发的 DOM 对象、鼠标事件的鼠标位置等事件信息。\n\n```\n\tsan.defineComponent({\n\t    template: '<button type=\"button\" on-click=\"clicker($event)\">click here</button>',\n\n\t    clicker: function (e) {\n\t        alert(e.target.tagName); // BUTTON\n\t    }\n\t});\n```\n\n\n自定义事件的绑定\n\n```\n\t//定义一个Label组件，此组件会通过调用 fire 方法来派发一个事件\n\tvar Label = san.defineComponent({\n\t    template: '<template class=\"ui-label\" title=\"{{text}}\">{{text}}</template>',\n\n\t    attached: function () {\n\t        this.fire('done', this.data.get('text') + ' done');\n\t    }\n\t});\n\n\tvar MyComponent = san.defineComponent({\n    \tcomponents: {\n\t        'ui-label': Label  \t//这里引入自定义组件Label\n\t    },\n\n\t    template: '<div><ui-label bind-text=\"name\" on-done=\"labelDone($event)\"></ui-label></div>',\n\t    //这里绑定了text为字符串name，绑定了done事件\n\n\t    labelDone: function (doneMsg) {\n\t        alert(doneMsg);\t//组件自身的done事件会派发一个事件，发出一个字符串\n\t    }\n\t});\t\n```\n\n\n\n#### 修饰符\n\n在元素的事件声明中使用 capture 修饰符，事件将被绑定到捕获阶段。\n\n```\n    var MyComponent = san.defineComponent({\n\t    template: ''\n\t        + '<div on-click=\"capture:mainClick\">'\n\t            + '<button on-click=\"capture:btnClick\">click</button>'\n\t        + '</div>',\n\n\t    mainClick: function (title) {\n\t        alert('Main');\n\t    },\n\n\t    btnClick: function (title) {\n\t        alert('Button');\n\t    }\n\t});\n\t// 会先触发mainClick事件再触发btnClick事件，因为是按点击事件的捕获顺序执行的\n```\n\n在组件的事件声明中使用 native 修饰符，事件将被绑定到组件根元素的 DOM 事件。\n\n```\n    var Button = san.defineComponent({\n\t    template: '<a class=\"my-button\"><slot/></a>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'ui-button': Button\n\t    },\n\n\t    template: '<div><ui-button on-click=\"native:clicker(title)\">{{title}}</ui-button></div>',\n\n\t    initData: function () {\n            return {\n                title: 'San'\n            };\n        },\n\n\t    clicker: function (title) {\n\t        alert(title);\n\t    }\n\t});\n\t//点击会显示：San\n```\n\n\n#### 表单\n-------------\n\n输入框的绑定方法比较简单，直接对输入框的 value 属性应用双向绑定就行了。\n\n```\n    <input type=\"text\" value=\"{= name =}\">\n```\n\ncheckbox\n\ncheckbox 常见的使用场景是分组，在组件模板中，我们把需要分组的 checkbox 将 checked 属性双向绑定到同名的组件数据中。\n\n我们期望 checkbox 绑定到的数据项是一个 Array<string> 。当 checkbox 被选中时，其 value 会被添加到绑定的数据项中；当 checkbox 被取消选中时，其 value 会从绑定数据项中移除。\n\n```\n    san.defineComponent({\n\t    template: '<div>\n\t\t    <label><input type=\"checkbox\" on-click=\"chooseone\" value=\"errorrik\" checked=\"{= online =}\">errorrik</label>\n\t\t    <label><input type=\"checkbox\" on-click=\"chooseone\" value=\"otakustay\" checked=\"{= online =}\">otakustay</label>\n\t\t    <label><input type=\"checkbox\" on-click=\"chooseone\" value=\"firede\" checked=\"{= online =}\">firede</label>\n\t\t</div>',\n\n\t    initData: function () {\n\t        return {\n\t            online: []\n\t        };\n\t    },\n\n\t    chooseone: function () {\n            console.log(this.data.get('online'));\n        },\n\n\t    attached: function () {\n\t        this.data.set('online', ['errorrik', 'otakustay']);\n\t    }\n\t});\n```\n\nradio\n\n与 checkbox 类似，我们在组件模板中，把需要分组的 radio 将 checked 属性绑定到同名的组件数据中。\n\n你需要手工指定分组 radio 的 name 属性，使浏览器能处理 radio 选择的互斥。可以把它设置成与绑定数据的名称相同。\n\n我们期望 radio 绑定到的数据项是一个 string 。当 radio 被选中时，绑定的数据项值被设置成选中的 radio 的 value 属性值。\n\n```\n    san.defineComponent({\n\t    template: '<div>\n\t\t    <label><input type=\"radio\" on-click=\"chooseone\" value=\"errorrik\"  checked=\"{= online =}\" name=\"online\">errorrik</label>\n\t\t    <label><input type=\"radio\" on-click=\"chooseone\" value=\"otakustay\" checked=\"{= online =}\" name=\"online\">otakustay</label>\n\t\t    <label><input type=\"radio\" on-click=\"chooseone\" value=\"firede\"    checked=\"{= online =}\" name=\"online\">firede</label>\n\t\t</div>',\n\n\t    initData: function () {\n\t        return {\n\t            online: 'errorrik'\n\t        };\n\t    },\n\n\t    chooseone: function () {\n            console.log(this.data.get('online'));\n        },\n\t});\n```\n\nselect\n\nselect 的使用方式和输入框类似，直接对 value 属性应用双向绑定。\n\n在浏览器中，select 的 value 属性并不控制其选中项，select 的选中项是由 option 的 selected 属性控制的。考虑到开发的方便，开发者不需要编写 option 的 selected 属性，San 会在下一个视图更新时间片中刷新 select 的选中状态。\n\n```\n    san.defineComponent({\n\t    template: '<select value=\"{= online =}\" on-change=\"chooseone\">\n\t\t    <option value=\"errorrik\">errorrik</option>\n\t\t    <option value=\"otakustay\">otakustay</option>\n\t\t    <option value=\"firede\">firede</option>\n\t\t</select>',\n\n\t    initData: function () {\n\t        return {\n\t            online: 'errorrik'\n\t        };\n\t    },\n\n\t    chooseone: function () {\n            console.log(this.data.get('online'));\n        },\n\t});\n```","source":"_posts/san2.md","raw":"---\nlayout: post\ntitle: \"San学习笔记 二\"\nsubtitle: \"事件处理及表单提交\"\ndate: 2018-1-6\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - San\n---\n\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 事件处理\n-------------\n\n通过 on- 前缀，可以将事件的处理绑定到组件的方法上，无论是 DOM 事件还是组件的自定义事件，都通过 on- 前缀绑定，没有语法区分。\n\non- + 事件名 将 DOM 元素的事件绑定到组件方法上。当 DOM 事件触发时，组件方法将被调用，this 指向组件实例。\n\n```\n    san.defineComponent({\n\t    template: '\n\t    \t<ul>\n\t\t\t    <li s-for=\"item, index in todos\">\n\t\t\t        <h3>{{ item.title }}</h3>\n\t\t\t        <p>{{ item.desc }}</p>\n\t\t\t        <i class=\"fa fa-trash-o\" on-click=\"rmTodo(item)\"></i>\n\t\t\t    </li>\n\t\t\t</ul>',\n\n\t    rmTodo: function (todo) {\n\t        service.rmTodo(todo.id);\n\t        this.data.remove('todos', todo);\n\t    }\n\t});\n```\n\n$event 是 San 保留的一个特殊变量，指定 $event 将引用到 DOM Event 对象。从而你可以拿到事件触发的 DOM 对象、鼠标事件的鼠标位置等事件信息。\n\n```\n\tsan.defineComponent({\n\t    template: '<button type=\"button\" on-click=\"clicker($event)\">click here</button>',\n\n\t    clicker: function (e) {\n\t        alert(e.target.tagName); // BUTTON\n\t    }\n\t});\n```\n\n\n自定义事件的绑定\n\n```\n\t//定义一个Label组件，此组件会通过调用 fire 方法来派发一个事件\n\tvar Label = san.defineComponent({\n\t    template: '<template class=\"ui-label\" title=\"{{text}}\">{{text}}</template>',\n\n\t    attached: function () {\n\t        this.fire('done', this.data.get('text') + ' done');\n\t    }\n\t});\n\n\tvar MyComponent = san.defineComponent({\n    \tcomponents: {\n\t        'ui-label': Label  \t//这里引入自定义组件Label\n\t    },\n\n\t    template: '<div><ui-label bind-text=\"name\" on-done=\"labelDone($event)\"></ui-label></div>',\n\t    //这里绑定了text为字符串name，绑定了done事件\n\n\t    labelDone: function (doneMsg) {\n\t        alert(doneMsg);\t//组件自身的done事件会派发一个事件，发出一个字符串\n\t    }\n\t});\t\n```\n\n\n\n#### 修饰符\n\n在元素的事件声明中使用 capture 修饰符，事件将被绑定到捕获阶段。\n\n```\n    var MyComponent = san.defineComponent({\n\t    template: ''\n\t        + '<div on-click=\"capture:mainClick\">'\n\t            + '<button on-click=\"capture:btnClick\">click</button>'\n\t        + '</div>',\n\n\t    mainClick: function (title) {\n\t        alert('Main');\n\t    },\n\n\t    btnClick: function (title) {\n\t        alert('Button');\n\t    }\n\t});\n\t// 会先触发mainClick事件再触发btnClick事件，因为是按点击事件的捕获顺序执行的\n```\n\n在组件的事件声明中使用 native 修饰符，事件将被绑定到组件根元素的 DOM 事件。\n\n```\n    var Button = san.defineComponent({\n\t    template: '<a class=\"my-button\"><slot/></a>'\n\t});\n\n\tvar MyComponent = san.defineComponent({\n\t    components: {\n\t        'ui-button': Button\n\t    },\n\n\t    template: '<div><ui-button on-click=\"native:clicker(title)\">{{title}}</ui-button></div>',\n\n\t    initData: function () {\n            return {\n                title: 'San'\n            };\n        },\n\n\t    clicker: function (title) {\n\t        alert(title);\n\t    }\n\t});\n\t//点击会显示：San\n```\n\n\n#### 表单\n-------------\n\n输入框的绑定方法比较简单，直接对输入框的 value 属性应用双向绑定就行了。\n\n```\n    <input type=\"text\" value=\"{= name =}\">\n```\n\ncheckbox\n\ncheckbox 常见的使用场景是分组，在组件模板中，我们把需要分组的 checkbox 将 checked 属性双向绑定到同名的组件数据中。\n\n我们期望 checkbox 绑定到的数据项是一个 Array<string> 。当 checkbox 被选中时，其 value 会被添加到绑定的数据项中；当 checkbox 被取消选中时，其 value 会从绑定数据项中移除。\n\n```\n    san.defineComponent({\n\t    template: '<div>\n\t\t    <label><input type=\"checkbox\" on-click=\"chooseone\" value=\"errorrik\" checked=\"{= online =}\">errorrik</label>\n\t\t    <label><input type=\"checkbox\" on-click=\"chooseone\" value=\"otakustay\" checked=\"{= online =}\">otakustay</label>\n\t\t    <label><input type=\"checkbox\" on-click=\"chooseone\" value=\"firede\" checked=\"{= online =}\">firede</label>\n\t\t</div>',\n\n\t    initData: function () {\n\t        return {\n\t            online: []\n\t        };\n\t    },\n\n\t    chooseone: function () {\n            console.log(this.data.get('online'));\n        },\n\n\t    attached: function () {\n\t        this.data.set('online', ['errorrik', 'otakustay']);\n\t    }\n\t});\n```\n\nradio\n\n与 checkbox 类似，我们在组件模板中，把需要分组的 radio 将 checked 属性绑定到同名的组件数据中。\n\n你需要手工指定分组 radio 的 name 属性，使浏览器能处理 radio 选择的互斥。可以把它设置成与绑定数据的名称相同。\n\n我们期望 radio 绑定到的数据项是一个 string 。当 radio 被选中时，绑定的数据项值被设置成选中的 radio 的 value 属性值。\n\n```\n    san.defineComponent({\n\t    template: '<div>\n\t\t    <label><input type=\"radio\" on-click=\"chooseone\" value=\"errorrik\"  checked=\"{= online =}\" name=\"online\">errorrik</label>\n\t\t    <label><input type=\"radio\" on-click=\"chooseone\" value=\"otakustay\" checked=\"{= online =}\" name=\"online\">otakustay</label>\n\t\t    <label><input type=\"radio\" on-click=\"chooseone\" value=\"firede\"    checked=\"{= online =}\" name=\"online\">firede</label>\n\t\t</div>',\n\n\t    initData: function () {\n\t        return {\n\t            online: 'errorrik'\n\t        };\n\t    },\n\n\t    chooseone: function () {\n            console.log(this.data.get('online'));\n        },\n\t});\n```\n\nselect\n\nselect 的使用方式和输入框类似，直接对 value 属性应用双向绑定。\n\n在浏览器中，select 的 value 属性并不控制其选中项，select 的选中项是由 option 的 selected 属性控制的。考虑到开发的方便，开发者不需要编写 option 的 selected 属性，San 会在下一个视图更新时间片中刷新 select 的选中状态。\n\n```\n    san.defineComponent({\n\t    template: '<select value=\"{= online =}\" on-change=\"chooseone\">\n\t\t    <option value=\"errorrik\">errorrik</option>\n\t\t    <option value=\"otakustay\">otakustay</option>\n\t\t    <option value=\"firede\">firede</option>\n\t\t</select>',\n\n\t    initData: function () {\n\t        return {\n\t            online: 'errorrik'\n\t        };\n\t    },\n\n\t    chooseone: function () {\n            console.log(this.data.get('online'));\n        },\n\t});\n```","slug":"san2","published":1,"updated":"2018-01-28T08:57:07.472Z","comments":1,"photos":[],"link":"","_id":"cjekvj52y000drmjfzrrkr49z","content":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><hr>\n<p>通过 on- 前缀，可以将事件的处理绑定到组件的方法上，无论是 DOM 事件还是组件的自定义事件，都通过 on- 前缀绑定，没有语法区分。</p>\n<p>on- + 事件名 将 DOM 元素的事件绑定到组件方法上。当 DOM 事件触发时，组件方法将被调用，this 指向组件实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;</span><br><span class=\"line\">    \t&lt;ul&gt;</span><br><span class=\"line\">\t\t    &lt;li s-for=&quot;item, index in todos&quot;&gt;</span><br><span class=\"line\">\t\t        &lt;h3&gt;&#123;&#123; item.title &#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\">\t\t        &lt;p&gt;&#123;&#123; item.desc &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">\t\t        &lt;i class=&quot;fa fa-trash-o&quot; on-click=&quot;rmTodo(item)&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">\t\t    &lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    rmTodo: function (todo) &#123;</span><br><span class=\"line\">        service.rmTodo(todo.id);</span><br><span class=\"line\">        this.data.remove(&apos;todos&apos;, todo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>$event 是 San 保留的一个特殊变量，指定 $event 将引用到 DOM Event 对象。从而你可以拿到事件触发的 DOM 对象、鼠标事件的鼠标位置等事件信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;button type=&quot;button&quot; on-click=&quot;clicker($event)&quot;&gt;click here&lt;/button&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    clicker: function (e) &#123;</span><br><span class=\"line\">        alert(e.target.tagName); // BUTTON</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>自定义事件的绑定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个Label组件，此组件会通过调用 fire 方法来派发一个事件</span><br><span class=\"line\">var Label = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;template class=&quot;ui-label&quot; title=&quot;&#123;&#123;text&#125;&#125;&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/template&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.fire(&apos;done&apos;, this.data.get(&apos;text&apos;) + &apos; done&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">   \tcomponents: &#123;</span><br><span class=\"line\">        &apos;ui-label&apos;: Label  \t//这里引入自定义组件Label</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-label bind-text=&quot;name&quot; on-done=&quot;labelDone($event)&quot;&gt;&lt;/ui-label&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\">    //这里绑定了text为字符串name，绑定了done事件</span><br><span class=\"line\"></span><br><span class=\"line\">    labelDone: function (doneMsg) &#123;</span><br><span class=\"line\">        alert(doneMsg);\t//组件自身的done事件会派发一个事件，发出一个字符串</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><p>在元素的事件声明中使用 capture 修饰符，事件将被绑定到捕获阶段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div on-click=&quot;capture:mainClick&quot;&gt;&apos;</span><br><span class=\"line\">            + &apos;&lt;button on-click=&quot;capture:btnClick&quot;&gt;click&lt;/button&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    mainClick: function (title) &#123;</span><br><span class=\"line\">        alert(&apos;Main&apos;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    btnClick: function (title) &#123;</span><br><span class=\"line\">        alert(&apos;Button&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 会先触发mainClick事件再触发btnClick事件，因为是按点击事件的捕获顺序执行的</span><br></pre></td></tr></table></figure>\n<p>在组件的事件声明中使用 native 修饰符，事件将被绑定到组件根元素的 DOM 事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Button = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;a class=&quot;my-button&quot;&gt;&lt;slot/&gt;&lt;/a&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;ui-button&apos;: Button</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-button on-click=&quot;native:clicker(title)&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/ui-button&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">           return &#123;</span><br><span class=\"line\">               title: &apos;San&apos;</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    clicker: function (title) &#123;</span><br><span class=\"line\">        alert(title);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//点击会显示：San</span><br></pre></td></tr></table></figure>\n<h4 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h4><hr>\n<p>输入框的绑定方法比较简单，直接对输入框的 value 属性应用双向绑定就行了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;&#123;= name =&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>checkbox</p>\n<p>checkbox 常见的使用场景是分组，在组件模板中，我们把需要分组的 checkbox 将 checked 属性双向绑定到同名的组件数据中。</p>\n<p>我们期望 checkbox 绑定到的数据项是一个 Array<string> 。当 checkbox 被选中时，其 value 会被添加到绑定的数据项中；当 checkbox 被取消选中时，其 value 会从绑定数据项中移除。</string></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;checkbox&quot; on-click=&quot;chooseone&quot; value=&quot;errorrik&quot; checked=&quot;&#123;= online =&#125;&quot;&gt;errorrik&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;checkbox&quot; on-click=&quot;chooseone&quot; value=&quot;otakustay&quot; checked=&quot;&#123;= online =&#125;&quot;&gt;otakustay&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;checkbox&quot; on-click=&quot;chooseone&quot; value=&quot;firede&quot; checked=&quot;&#123;= online =&#125;&quot;&gt;firede&lt;/label&gt;</span><br><span class=\"line\">\t&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            online: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chooseone: function () &#123;</span><br><span class=\"line\">           console.log(this.data.get(&apos;online&apos;));</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;online&apos;, [&apos;errorrik&apos;, &apos;otakustay&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>radio</p>\n<p>与 checkbox 类似，我们在组件模板中，把需要分组的 radio 将 checked 属性绑定到同名的组件数据中。</p>\n<p>你需要手工指定分组 radio 的 name 属性，使浏览器能处理 radio 选择的互斥。可以把它设置成与绑定数据的名称相同。</p>\n<p>我们期望 radio 绑定到的数据项是一个 string 。当 radio 被选中时，绑定的数据项值被设置成选中的 radio 的 value 属性值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;radio&quot; on-click=&quot;chooseone&quot; value=&quot;errorrik&quot;  checked=&quot;&#123;= online =&#125;&quot; name=&quot;online&quot;&gt;errorrik&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;radio&quot; on-click=&quot;chooseone&quot; value=&quot;otakustay&quot; checked=&quot;&#123;= online =&#125;&quot; name=&quot;online&quot;&gt;otakustay&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;radio&quot; on-click=&quot;chooseone&quot; value=&quot;firede&quot;    checked=&quot;&#123;= online =&#125;&quot; name=&quot;online&quot;&gt;firede&lt;/label&gt;</span><br><span class=\"line\">\t&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            online: &apos;errorrik&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chooseone: function () &#123;</span><br><span class=\"line\">           console.log(this.data.get(&apos;online&apos;));</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>select</p>\n<p>select 的使用方式和输入框类似，直接对 value 属性应用双向绑定。</p>\n<p>在浏览器中，select 的 value 属性并不控制其选中项，select 的选中项是由 option 的 selected 属性控制的。考虑到开发的方便，开发者不需要编写 option 的 selected 属性，San 会在下一个视图更新时间片中刷新 select 的选中状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;select value=&quot;&#123;= online =&#125;&quot; on-change=&quot;chooseone&quot;&gt;</span><br><span class=\"line\">\t    &lt;option value=&quot;errorrik&quot;&gt;errorrik&lt;/option&gt;</span><br><span class=\"line\">\t    &lt;option value=&quot;otakustay&quot;&gt;otakustay&lt;/option&gt;</span><br><span class=\"line\">\t    &lt;option value=&quot;firede&quot;&gt;firede&lt;/option&gt;</span><br><span class=\"line\">\t&lt;/select&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            online: &apos;errorrik&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chooseone: function () &#123;</span><br><span class=\"line\">           console.log(this.data.get(&apos;online&apos;));</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><hr>\n<p>通过 on- 前缀，可以将事件的处理绑定到组件的方法上，无论是 DOM 事件还是组件的自定义事件，都通过 on- 前缀绑定，没有语法区分。</p>\n<p>on- + 事件名 将 DOM 元素的事件绑定到组件方法上。当 DOM 事件触发时，组件方法将被调用，this 指向组件实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;</span><br><span class=\"line\">    \t&lt;ul&gt;</span><br><span class=\"line\">\t\t    &lt;li s-for=&quot;item, index in todos&quot;&gt;</span><br><span class=\"line\">\t\t        &lt;h3&gt;&#123;&#123; item.title &#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\">\t\t        &lt;p&gt;&#123;&#123; item.desc &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">\t\t        &lt;i class=&quot;fa fa-trash-o&quot; on-click=&quot;rmTodo(item)&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">\t\t    &lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    rmTodo: function (todo) &#123;</span><br><span class=\"line\">        service.rmTodo(todo.id);</span><br><span class=\"line\">        this.data.remove(&apos;todos&apos;, todo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>$event 是 San 保留的一个特殊变量，指定 $event 将引用到 DOM Event 对象。从而你可以拿到事件触发的 DOM 对象、鼠标事件的鼠标位置等事件信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;button type=&quot;button&quot; on-click=&quot;clicker($event)&quot;&gt;click here&lt;/button&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    clicker: function (e) &#123;</span><br><span class=\"line\">        alert(e.target.tagName); // BUTTON</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>自定义事件的绑定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个Label组件，此组件会通过调用 fire 方法来派发一个事件</span><br><span class=\"line\">var Label = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;template class=&quot;ui-label&quot; title=&quot;&#123;&#123;text&#125;&#125;&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/template&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.fire(&apos;done&apos;, this.data.get(&apos;text&apos;) + &apos; done&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">   \tcomponents: &#123;</span><br><span class=\"line\">        &apos;ui-label&apos;: Label  \t//这里引入自定义组件Label</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-label bind-text=&quot;name&quot; on-done=&quot;labelDone($event)&quot;&gt;&lt;/ui-label&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\">    //这里绑定了text为字符串name，绑定了done事件</span><br><span class=\"line\"></span><br><span class=\"line\">    labelDone: function (doneMsg) &#123;</span><br><span class=\"line\">        alert(doneMsg);\t//组件自身的done事件会派发一个事件，发出一个字符串</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><p>在元素的事件声明中使用 capture 修饰符，事件将被绑定到捕获阶段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&apos;</span><br><span class=\"line\">        + &apos;&lt;div on-click=&quot;capture:mainClick&quot;&gt;&apos;</span><br><span class=\"line\">            + &apos;&lt;button on-click=&quot;capture:btnClick&quot;&gt;click&lt;/button&gt;&apos;</span><br><span class=\"line\">        + &apos;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    mainClick: function (title) &#123;</span><br><span class=\"line\">        alert(&apos;Main&apos;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    btnClick: function (title) &#123;</span><br><span class=\"line\">        alert(&apos;Button&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 会先触发mainClick事件再触发btnClick事件，因为是按点击事件的捕获顺序执行的</span><br></pre></td></tr></table></figure>\n<p>在组件的事件声明中使用 native 修饰符，事件将被绑定到组件根元素的 DOM 事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var Button = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;a class=&quot;my-button&quot;&gt;&lt;slot/&gt;&lt;/a&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var MyComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        &apos;ui-button&apos;: Button</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;ui-button on-click=&quot;native:clicker(title)&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/ui-button&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">           return &#123;</span><br><span class=\"line\">               title: &apos;San&apos;</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    clicker: function (title) &#123;</span><br><span class=\"line\">        alert(title);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//点击会显示：San</span><br></pre></td></tr></table></figure>\n<h4 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h4><hr>\n<p>输入框的绑定方法比较简单，直接对输入框的 value 属性应用双向绑定就行了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;&#123;= name =&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>checkbox</p>\n<p>checkbox 常见的使用场景是分组，在组件模板中，我们把需要分组的 checkbox 将 checked 属性双向绑定到同名的组件数据中。</p>\n<p>我们期望 checkbox 绑定到的数据项是一个 Array<string> 。当 checkbox 被选中时，其 value 会被添加到绑定的数据项中；当 checkbox 被取消选中时，其 value 会从绑定数据项中移除。</string></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;checkbox&quot; on-click=&quot;chooseone&quot; value=&quot;errorrik&quot; checked=&quot;&#123;= online =&#125;&quot;&gt;errorrik&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;checkbox&quot; on-click=&quot;chooseone&quot; value=&quot;otakustay&quot; checked=&quot;&#123;= online =&#125;&quot;&gt;otakustay&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;checkbox&quot; on-click=&quot;chooseone&quot; value=&quot;firede&quot; checked=&quot;&#123;= online =&#125;&quot;&gt;firede&lt;/label&gt;</span><br><span class=\"line\">\t&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            online: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chooseone: function () &#123;</span><br><span class=\"line\">           console.log(this.data.get(&apos;online&apos;));</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;online&apos;, [&apos;errorrik&apos;, &apos;otakustay&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>radio</p>\n<p>与 checkbox 类似，我们在组件模板中，把需要分组的 radio 将 checked 属性绑定到同名的组件数据中。</p>\n<p>你需要手工指定分组 radio 的 name 属性，使浏览器能处理 radio 选择的互斥。可以把它设置成与绑定数据的名称相同。</p>\n<p>我们期望 radio 绑定到的数据项是一个 string 。当 radio 被选中时，绑定的数据项值被设置成选中的 radio 的 value 属性值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;radio&quot; on-click=&quot;chooseone&quot; value=&quot;errorrik&quot;  checked=&quot;&#123;= online =&#125;&quot; name=&quot;online&quot;&gt;errorrik&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;radio&quot; on-click=&quot;chooseone&quot; value=&quot;otakustay&quot; checked=&quot;&#123;= online =&#125;&quot; name=&quot;online&quot;&gt;otakustay&lt;/label&gt;</span><br><span class=\"line\">\t    &lt;label&gt;&lt;input type=&quot;radio&quot; on-click=&quot;chooseone&quot; value=&quot;firede&quot;    checked=&quot;&#123;= online =&#125;&quot; name=&quot;online&quot;&gt;firede&lt;/label&gt;</span><br><span class=\"line\">\t&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            online: &apos;errorrik&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chooseone: function () &#123;</span><br><span class=\"line\">           console.log(this.data.get(&apos;online&apos;));</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>select</p>\n<p>select 的使用方式和输入框类似，直接对 value 属性应用双向绑定。</p>\n<p>在浏览器中，select 的 value 属性并不控制其选中项，select 的选中项是由 option 的 selected 属性控制的。考虑到开发的方便，开发者不需要编写 option 的 selected 属性，San 会在下一个视图更新时间片中刷新 select 的选中状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;select value=&quot;&#123;= online =&#125;&quot; on-change=&quot;chooseone&quot;&gt;</span><br><span class=\"line\">\t    &lt;option value=&quot;errorrik&quot;&gt;errorrik&lt;/option&gt;</span><br><span class=\"line\">\t    &lt;option value=&quot;otakustay&quot;&gt;otakustay&lt;/option&gt;</span><br><span class=\"line\">\t    &lt;option value=&quot;firede&quot;&gt;firede&lt;/option&gt;</span><br><span class=\"line\">\t&lt;/select&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            online: &apos;errorrik&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chooseone: function () &#123;</span><br><span class=\"line\">           console.log(this.data.get(&apos;online&apos;));</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"San学习笔记 四","subtitle":"过渡","date":"2018-01-10T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 过渡\n-------------\n\n在元素上通过 s-transition 指令，可以声明过渡动画控制器。\n\n```\n    san.defineComponent({\n\t    template: '<div><button s-transition=\"opacityTransition\">click</button></div>',\n\n\t    opacityTransition: {\n\t        // 过渡动画控制器\n\t        // ...\n\t    }\n\t});\n```\n\ns-transition 只能应用在具体的元素中。template 这种没有具体元素的标签上应用 s-transition 将没有效果。\n\n\n#### 动画控制器\n\n过渡动画控制器是一个包含 enter 和 leave 方法的对象。\n\nenter 和 leave 方法的签名为 function({HTMLElement}el, {Function}done)。san 会把要过渡的元素传给过渡动画控制器，控制器在完成动画后调用 done 回调函数。\n\n```\n    san.defineComponent({\n\t    template: `\n\t        <div>\n\t            <button on-click=\"toggle\">toggle</button>\n\t            <button s-if=\"isShow\" s-transition=\"opacityTrans\">Hello San!</button>\n\t            <button s-else s-transition=\"opacityTrans\">Hello ER!</button>\n\t        </div>\n\t    `,\n\n\t    toggle: function () {\n\t        this.data.set('isShow', !this.data.get('isShow'));\n\t    },\n\n\t    opacityTrans: {\n\t        enter: function (el, done) {\n\t            var steps = 20;\n\t            var currentStep = 0;\n\n\t            function goStep() {\n\t                if (currentStep >= steps) {\n\t                    el.style.opacity = 1;\n\t                    done();\n\t                    return;\n\t                }\n\n\t                el.style.opacity = 1 / steps * currentStep++;\n\t                requestAnimationFrame(goStep);\n\t            }\n\n\t            goStep();\n\t        },\n\n\t        leave: function (el, done) {\n\t            var steps = 20;\n\t            var currentStep = 0;\n\n\t            function goStep() {\n\t                if (currentStep >= steps) {\n\t                    el.style.opacity = 0;\n\t                    done();\n\t                    return;\n\t                }\n\n\t                el.style.opacity = 1 - 1 / steps * currentStep++;\n\t                requestAnimationFrame(goStep);\n\t            }\n\n\t            goStep();\n\t        }\n\t    }\n\t});\n```\n\nsan 把动画控制器留给应用方实现，框架本身不内置动画控制效果。应用方可以：\n\n* 使用 css 动画，在 transitionend 或 animationend 事件监听中回调 done\n* 使用 requestAnimationFrame 控制动画，完成后回调 done\n* 在老旧浏览器使用 setTimeout / setInterval 控制动画，完成后回调 done\n* 发挥想象力\n\n\n过渡动画控制器 Creator调用支持传入参数\n\n```\n    san.defineComponent({\n\t    template: `\n\t        <div>\n\t            <button on-click=\"toggle\">toggle</button>\n\t            <button on-click=\"toggleTrans\">toggle transition</button>\n\t            <button s-if=\"isShow\" s-transition=\"opacityTrans(noTransition)\">Hello San!</button>\n\t            <button s-else s-transition=\"opacityTrans(noTransition)\">Hello ER!</button>\n\t        </div>\n\t    `,\n\n\t    toggle: function () {\n\t        this.data.set('isShow', !this.data.get('isShow'));\n\t    },\n\n\t    toggleTrans: function () {\n\t        this.data.set('noTransition', !this.data.get('noTransition'));\n\t    },\n\n\t    initData: function () {\n\t        return {\n\t            noTransition: false\n\t        };\n\t    },\n\n\t    opacityTrans: function (disabled) {\n\t        return {\n\t            enter: function (el, done) {\n\t                if (disabled) {\n\t                    done();\n\t                    return;\n\t                }\n\n\t                var steps = 20;\n\t                var currentStep = 0;\n\n\t                function goStep() {\n\t                    if (currentStep >= steps) {\n\t                        el.style.opacity = 1;\n\t                        done();\n\t                        return;\n\t                    }\n\n\t                    el.style.opacity = 1 / steps * currentStep++;\n\t                    requestAnimationFrame(goStep);\n\t                }\n\n\t                goStep();\n\t            },\n\n\t            leave: function (el, done) {\n\t                if (disabled) {\n\t                    done();\n\t                    return;\n\t                }\n\n\t                var steps = 20;\n\t                var currentStep = 0;\n\n\t                function goStep() {\n\t                    if (currentStep >= steps) {\n\t                        el.style.opacity = 0;\n\t                        done();\n\t                        return;\n\t                    }\n\n\t                    el.style.opacity = 1 - 1 / steps * currentStep++;\n\t                    requestAnimationFrame(goStep);\n\t                }\n\n\t                goStep();\n\t            }\n\t        }\n\t    }\n\t});\n```\n\n","source":"_posts/san4.md","raw":"---\nlayout: post\ntitle: \"San学习笔记 四\"\nsubtitle: \"过渡\"\ndate: 2018-1-11\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - San\n---\n\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 过渡\n-------------\n\n在元素上通过 s-transition 指令，可以声明过渡动画控制器。\n\n```\n    san.defineComponent({\n\t    template: '<div><button s-transition=\"opacityTransition\">click</button></div>',\n\n\t    opacityTransition: {\n\t        // 过渡动画控制器\n\t        // ...\n\t    }\n\t});\n```\n\ns-transition 只能应用在具体的元素中。template 这种没有具体元素的标签上应用 s-transition 将没有效果。\n\n\n#### 动画控制器\n\n过渡动画控制器是一个包含 enter 和 leave 方法的对象。\n\nenter 和 leave 方法的签名为 function({HTMLElement}el, {Function}done)。san 会把要过渡的元素传给过渡动画控制器，控制器在完成动画后调用 done 回调函数。\n\n```\n    san.defineComponent({\n\t    template: `\n\t        <div>\n\t            <button on-click=\"toggle\">toggle</button>\n\t            <button s-if=\"isShow\" s-transition=\"opacityTrans\">Hello San!</button>\n\t            <button s-else s-transition=\"opacityTrans\">Hello ER!</button>\n\t        </div>\n\t    `,\n\n\t    toggle: function () {\n\t        this.data.set('isShow', !this.data.get('isShow'));\n\t    },\n\n\t    opacityTrans: {\n\t        enter: function (el, done) {\n\t            var steps = 20;\n\t            var currentStep = 0;\n\n\t            function goStep() {\n\t                if (currentStep >= steps) {\n\t                    el.style.opacity = 1;\n\t                    done();\n\t                    return;\n\t                }\n\n\t                el.style.opacity = 1 / steps * currentStep++;\n\t                requestAnimationFrame(goStep);\n\t            }\n\n\t            goStep();\n\t        },\n\n\t        leave: function (el, done) {\n\t            var steps = 20;\n\t            var currentStep = 0;\n\n\t            function goStep() {\n\t                if (currentStep >= steps) {\n\t                    el.style.opacity = 0;\n\t                    done();\n\t                    return;\n\t                }\n\n\t                el.style.opacity = 1 - 1 / steps * currentStep++;\n\t                requestAnimationFrame(goStep);\n\t            }\n\n\t            goStep();\n\t        }\n\t    }\n\t});\n```\n\nsan 把动画控制器留给应用方实现，框架本身不内置动画控制效果。应用方可以：\n\n* 使用 css 动画，在 transitionend 或 animationend 事件监听中回调 done\n* 使用 requestAnimationFrame 控制动画，完成后回调 done\n* 在老旧浏览器使用 setTimeout / setInterval 控制动画，完成后回调 done\n* 发挥想象力\n\n\n过渡动画控制器 Creator调用支持传入参数\n\n```\n    san.defineComponent({\n\t    template: `\n\t        <div>\n\t            <button on-click=\"toggle\">toggle</button>\n\t            <button on-click=\"toggleTrans\">toggle transition</button>\n\t            <button s-if=\"isShow\" s-transition=\"opacityTrans(noTransition)\">Hello San!</button>\n\t            <button s-else s-transition=\"opacityTrans(noTransition)\">Hello ER!</button>\n\t        </div>\n\t    `,\n\n\t    toggle: function () {\n\t        this.data.set('isShow', !this.data.get('isShow'));\n\t    },\n\n\t    toggleTrans: function () {\n\t        this.data.set('noTransition', !this.data.get('noTransition'));\n\t    },\n\n\t    initData: function () {\n\t        return {\n\t            noTransition: false\n\t        };\n\t    },\n\n\t    opacityTrans: function (disabled) {\n\t        return {\n\t            enter: function (el, done) {\n\t                if (disabled) {\n\t                    done();\n\t                    return;\n\t                }\n\n\t                var steps = 20;\n\t                var currentStep = 0;\n\n\t                function goStep() {\n\t                    if (currentStep >= steps) {\n\t                        el.style.opacity = 1;\n\t                        done();\n\t                        return;\n\t                    }\n\n\t                    el.style.opacity = 1 / steps * currentStep++;\n\t                    requestAnimationFrame(goStep);\n\t                }\n\n\t                goStep();\n\t            },\n\n\t            leave: function (el, done) {\n\t                if (disabled) {\n\t                    done();\n\t                    return;\n\t                }\n\n\t                var steps = 20;\n\t                var currentStep = 0;\n\n\t                function goStep() {\n\t                    if (currentStep >= steps) {\n\t                        el.style.opacity = 0;\n\t                        done();\n\t                        return;\n\t                    }\n\n\t                    el.style.opacity = 1 - 1 / steps * currentStep++;\n\t                    requestAnimationFrame(goStep);\n\t                }\n\n\t                goStep();\n\t            }\n\t        }\n\t    }\n\t});\n```\n\n","slug":"san4","published":1,"updated":"2018-02-02T04:24:54.407Z","comments":1,"photos":[],"link":"","_id":"cjekvj52z000ermjf18i4r22s","content":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"过渡\"><a href=\"#过渡\" class=\"headerlink\" title=\"过渡\"></a>过渡</h3><hr>\n<p>在元素上通过 s-transition 指令，可以声明过渡动画控制器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;button s-transition=&quot;opacityTransition&quot;&gt;click&lt;/button&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    opacityTransition: &#123;</span><br><span class=\"line\">        // 过渡动画控制器</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>s-transition 只能应用在具体的元素中。template 这种没有具体元素的标签上应用 s-transition 将没有效果。</p>\n<h4 id=\"动画控制器\"><a href=\"#动画控制器\" class=\"headerlink\" title=\"动画控制器\"></a>动画控制器</h4><p>过渡动画控制器是一个包含 enter 和 leave 方法的对象。</p>\n<p>enter 和 leave 方法的签名为 function({HTMLElement}el, {Function}done)。san 会把要过渡的元素传给过渡动画控制器，控制器在完成动画后调用 done 回调函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: `</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;button on-click=&quot;toggle&quot;&gt;toggle&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-if=&quot;isShow&quot; s-transition=&quot;opacityTrans&quot;&gt;Hello San!&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-else s-transition=&quot;opacityTrans&quot;&gt;Hello ER!&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    `,</span><br><span class=\"line\"></span><br><span class=\"line\">    toggle: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;isShow&apos;, !this.data.get(&apos;isShow&apos;));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    opacityTrans: &#123;</span><br><span class=\"line\">        enter: function (el, done) &#123;</span><br><span class=\"line\">            var steps = 20;</span><br><span class=\"line\">            var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            function goStep() &#123;</span><br><span class=\"line\">                if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                    el.style.opacity = 1;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                el.style.opacity = 1 / steps * currentStep++;</span><br><span class=\"line\">                requestAnimationFrame(goStep);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            goStep();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        leave: function (el, done) &#123;</span><br><span class=\"line\">            var steps = 20;</span><br><span class=\"line\">            var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            function goStep() &#123;</span><br><span class=\"line\">                if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                    el.style.opacity = 0;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                el.style.opacity = 1 - 1 / steps * currentStep++;</span><br><span class=\"line\">                requestAnimationFrame(goStep);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            goStep();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>san 把动画控制器留给应用方实现，框架本身不内置动画控制效果。应用方可以：</p>\n<ul>\n<li>使用 css 动画，在 transitionend 或 animationend 事件监听中回调 done</li>\n<li>使用 requestAnimationFrame 控制动画，完成后回调 done</li>\n<li>在老旧浏览器使用 setTimeout / setInterval 控制动画，完成后回调 done</li>\n<li>发挥想象力</li>\n</ul>\n<p>过渡动画控制器 Creator调用支持传入参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: `</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;button on-click=&quot;toggle&quot;&gt;toggle&lt;/button&gt;</span><br><span class=\"line\">            &lt;button on-click=&quot;toggleTrans&quot;&gt;toggle transition&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-if=&quot;isShow&quot; s-transition=&quot;opacityTrans(noTransition)&quot;&gt;Hello San!&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-else s-transition=&quot;opacityTrans(noTransition)&quot;&gt;Hello ER!&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    `,</span><br><span class=\"line\"></span><br><span class=\"line\">    toggle: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;isShow&apos;, !this.data.get(&apos;isShow&apos;));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    toggleTrans: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;noTransition&apos;, !this.data.get(&apos;noTransition&apos;));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            noTransition: false</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    opacityTrans: function (disabled) &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            enter: function (el, done) &#123;</span><br><span class=\"line\">                if (disabled) &#123;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                var steps = 20;</span><br><span class=\"line\">                var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">                function goStep() &#123;</span><br><span class=\"line\">                    if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                        el.style.opacity = 1;</span><br><span class=\"line\">                        done();</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    el.style.opacity = 1 / steps * currentStep++;</span><br><span class=\"line\">                    requestAnimationFrame(goStep);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                goStep();</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            leave: function (el, done) &#123;</span><br><span class=\"line\">                if (disabled) &#123;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                var steps = 20;</span><br><span class=\"line\">                var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">                function goStep() &#123;</span><br><span class=\"line\">                    if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                        el.style.opacity = 0;</span><br><span class=\"line\">                        done();</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    el.style.opacity = 1 - 1 / steps * currentStep++;</span><br><span class=\"line\">                    requestAnimationFrame(goStep);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                goStep();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"过渡\"><a href=\"#过渡\" class=\"headerlink\" title=\"过渡\"></a>过渡</h3><hr>\n<p>在元素上通过 s-transition 指令，可以声明过渡动画控制器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;div&gt;&lt;button s-transition=&quot;opacityTransition&quot;&gt;click&lt;/button&gt;&lt;/div&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    opacityTransition: &#123;</span><br><span class=\"line\">        // 过渡动画控制器</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>s-transition 只能应用在具体的元素中。template 这种没有具体元素的标签上应用 s-transition 将没有效果。</p>\n<h4 id=\"动画控制器\"><a href=\"#动画控制器\" class=\"headerlink\" title=\"动画控制器\"></a>动画控制器</h4><p>过渡动画控制器是一个包含 enter 和 leave 方法的对象。</p>\n<p>enter 和 leave 方法的签名为 function({HTMLElement}el, {Function}done)。san 会把要过渡的元素传给过渡动画控制器，控制器在完成动画后调用 done 回调函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: `</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;button on-click=&quot;toggle&quot;&gt;toggle&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-if=&quot;isShow&quot; s-transition=&quot;opacityTrans&quot;&gt;Hello San!&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-else s-transition=&quot;opacityTrans&quot;&gt;Hello ER!&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    `,</span><br><span class=\"line\"></span><br><span class=\"line\">    toggle: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;isShow&apos;, !this.data.get(&apos;isShow&apos;));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    opacityTrans: &#123;</span><br><span class=\"line\">        enter: function (el, done) &#123;</span><br><span class=\"line\">            var steps = 20;</span><br><span class=\"line\">            var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            function goStep() &#123;</span><br><span class=\"line\">                if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                    el.style.opacity = 1;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                el.style.opacity = 1 / steps * currentStep++;</span><br><span class=\"line\">                requestAnimationFrame(goStep);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            goStep();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        leave: function (el, done) &#123;</span><br><span class=\"line\">            var steps = 20;</span><br><span class=\"line\">            var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            function goStep() &#123;</span><br><span class=\"line\">                if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                    el.style.opacity = 0;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                el.style.opacity = 1 - 1 / steps * currentStep++;</span><br><span class=\"line\">                requestAnimationFrame(goStep);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            goStep();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>san 把动画控制器留给应用方实现，框架本身不内置动画控制效果。应用方可以：</p>\n<ul>\n<li>使用 css 动画，在 transitionend 或 animationend 事件监听中回调 done</li>\n<li>使用 requestAnimationFrame 控制动画，完成后回调 done</li>\n<li>在老旧浏览器使用 setTimeout / setInterval 控制动画，完成后回调 done</li>\n<li>发挥想象力</li>\n</ul>\n<p>过渡动画控制器 Creator调用支持传入参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    template: `</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;button on-click=&quot;toggle&quot;&gt;toggle&lt;/button&gt;</span><br><span class=\"line\">            &lt;button on-click=&quot;toggleTrans&quot;&gt;toggle transition&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-if=&quot;isShow&quot; s-transition=&quot;opacityTrans(noTransition)&quot;&gt;Hello San!&lt;/button&gt;</span><br><span class=\"line\">            &lt;button s-else s-transition=&quot;opacityTrans(noTransition)&quot;&gt;Hello ER!&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    `,</span><br><span class=\"line\"></span><br><span class=\"line\">    toggle: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;isShow&apos;, !this.data.get(&apos;isShow&apos;));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    toggleTrans: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;noTransition&apos;, !this.data.get(&apos;noTransition&apos;));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            noTransition: false</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    opacityTrans: function (disabled) &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            enter: function (el, done) &#123;</span><br><span class=\"line\">                if (disabled) &#123;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                var steps = 20;</span><br><span class=\"line\">                var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">                function goStep() &#123;</span><br><span class=\"line\">                    if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                        el.style.opacity = 1;</span><br><span class=\"line\">                        done();</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    el.style.opacity = 1 / steps * currentStep++;</span><br><span class=\"line\">                    requestAnimationFrame(goStep);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                goStep();</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            leave: function (el, done) &#123;</span><br><span class=\"line\">                if (disabled) &#123;</span><br><span class=\"line\">                    done();</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                var steps = 20;</span><br><span class=\"line\">                var currentStep = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">                function goStep() &#123;</span><br><span class=\"line\">                    if (currentStep &gt;= steps) &#123;</span><br><span class=\"line\">                        el.style.opacity = 0;</span><br><span class=\"line\">                        done();</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    el.style.opacity = 1 - 1 / steps * currentStep++;</span><br><span class=\"line\">                    requestAnimationFrame(goStep);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                goStep();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"San学习笔记 五","subtitle":"组件","date":"2018-01-13T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 组件\n-------------\n\n组件是 San 的基本单位，是独立的数据、逻辑、视图的封装单元。从页面的角度看，组件是 HTML 元素的扩展。从功能模式的角度看，组件是一个 ViewModel。\n\n如何定义组件？\n\n如果不使用ESNext，San 提供了快捷方法 san.defineComponent 用于方便地定义组件。\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    attached: function () {\n\t        this.data.set('list', ['san', 'er', 'esui', 'etpl', 'esl']);\n\t    }\n\t});\n```\n\n如果使用ESNext，通过 ESNext 的 extends 继承时，template / filters / components 属性请使用 static property 的方式定义。\n\n```\n    import {Component} from 'san';\n\n\tclass HelloComponent extends Component {\n\t    constructor(options) {\n\t        super(options);\n\t        // .....\n\t    }\n\t    static template = '<p>Hello {{name}}!</p>';\n\t    initData() {\n\t        return {name: 'San'}\n\t    }\n\t}\n\n\tnew HelloComponent().attach(document.body);\n```\n\n\n#### 生命周期\n\n* compiled  - 组件视图模板编译完成\n* inited    - 组件实例初始化完成\n* created   - 组件元素创建完成\n* attached  - 组件已被附加到页面中\n* detached  - 组件从页面中移除\n* disposed  - 组件卸载完成\n\n组件的生命周期有这样的一些特点：\n\n* 生命周期代表组件的状态，生命周期本质就是状态管理。\n* 在生命周期到达时，对应的钩子函数会被触发运行。\n* 并存。比如 attached 和 created 等状态是同时并存的。\n* 互斥。attached 和 detached 是互斥的，disposed 会互斥掉其它所有的状态。\n* 有的时间点并不代表组件状态，只代表某个行为。当行为完成时，钩子函数也会触发。如 updated 代表每次数据变化导致的视图变更完成。\n\n\n通过声明周期的钩子函数，我们可以在生命周期到达时做一些事情。比如在生命周期 attached 中发起获取数据的请求，在请求返回后更新数据，使视图刷新。\n\n```\n    var ListComponent = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    initData: function () {\n\t        return {\n\t            list: []\n\t        };\n\t    },\n\n\t    attached: function () {\n\t        requestList().then(this.updateList.bind(this));\n\t    },\n\n\t    updateList: function (list) {\n\t        this.data.set('list', list);\n\t    }\n\t});\n```\n\n#### 数据\n\n所有组件数据相关的操作，都由组件实例的 data 成员提供。\n\n通过 data.get 方法可以获取数据\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        var params = this.data.get('params');\n\t        this.data.set('list', getList(params[1]));\n\t    }\n\t});\n```\n\n组件在实例化时可以通过 option 传入 data，指定组件初始化时的数据\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>'\n\t});\n\n\tvar myApp = new MyApp({\n\t    data: {\n\t        list: ['san', 'er', 'esui', 'etpl', 'esl']\n\t    }\n\t});\n\tmyApp.attach(document.body);\n```\n\nnew 时传入初始数据是针对实例的特例需求。\n\n但如果我们在定义组件时希望每个实例都具有初始的一些数据，此时可以定义 initData 方法，可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。\n\n```\n\tvar MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    initData: function () {\n\t        return {\n\t            list: ['san', 'er', 'esui', 'etpl', 'esl']\n\t        };\n\t    }\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n```\n\n计算数据\n\n一个数据项的值可能由其他数据项计算得来，这时我们可以通过 computed 定义计算数据。 \n\ncomputed 是一个对象，key 为计算数据项的名称，value 是返回数据项值的函数。\n\n```\n\tsan.defineComponent({\n\t    template: '<a>{{info}}</a>',\n\n\t    // name 数据项由 firstName 和 lastName 计算得来\n\t    computed: {\n\t        name: function () {\n\t            return this.data.get('firstName') + ' ' + this.data.get('lastName');\n\t        },\n\n\t        info: function () {\n\t            return this.data.get('name') + ' - ' + this.data.get('email');\n\t        }\n\t    }\n\t});\n```\n\n计算数据的函数中只能使用 this.data.get 方法获取数据项的值，不能通过 this.method 调用组件方法，也不能通过 this.data.set 设置组件数据。\n\n\n#### 过滤器\n\n在定义视图模板时，插值是常用的展现数据的方式。在编写插值时，我们常使用 过滤器 将数据转换成适合视图展现的形式。\n\n```\n    {{createTime | dateFormat('yyyy-MM-dd')}}\n```\n\nSan 针对常用场景，内置了几个过滤器：\n\n* html - HTML 转义。当不指定过滤器时，默认使用此过滤器\n* url - URL 转义\n* raw - 不进行转义。当不想使用 HTML 转义时，使用此过滤器\n\n定制过滤器\n\n通过定义组件的 filters 成员，可以指定组件的视图模板可以使用哪些过滤器。\n\n```\n\tsan.defineComponent({\n\t    template: '<a>{{createTime | dateFormat(\"yyyy-MM-dd\")}}</a>',\n\n\t    filters: {\n\t        dateFormat: function (value, format) {\n\t            return moment(value).format(format);\n\t        }\n\t    }\n\t});\n```\n\n#### 消息\n\n通过 dispatch 方法，组件可以向组件树的上层派发消息。\n\n```\n    var SelectItem = san.defineComponent({\n\t    template: '<li on-click=\"select\"><slot></slot></li>',\n\n\t    select: function () {\n\t        var value = this.data.get('value');\n\n\t        // 向组件树的上层派发消息\n\t        this.dispatch('UI:select-item-selected', value);\n\t    }\n\t});\n```\n\n消息将沿着组件树向上传递，直到遇到第一个处理该消息的组件，则停止。通过 messages 可以声明组件要处理的消息。\n\nmessages 是一个对象，key 是消息名称，value 是消息处理的函数，接收一个包含 target(派发消息的组件) 和 value(消息的值) 的参数对象。\n\n```\n\tvar Select = san.defineComponent({\n\t    template: '<ul><slot></slot></ul>',\n\n\t    // 声明组件要处理的消息\n\t    messages: {\n\t        'UI:select-item-selected': function (arg) {\n\t            var value = arg.value;\n\t            this.data.set('value', value);\n\n\t            // arg.target 可以拿到派发消息的组件\n\t        }\n\t    }\n\t});\n```\n\n","source":"_posts/san5.md","raw":"---\nlayout: post\ntitle: \"San学习笔记 五\"\nsubtitle: \"组件\"\ndate: 2018-1-14\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - San\n---\n\n\n最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。\n[中文文档](https://ecomfe.github.io/san/tutorial/start/)\n\n----------\n\n### 组件\n-------------\n\n组件是 San 的基本单位，是独立的数据、逻辑、视图的封装单元。从页面的角度看，组件是 HTML 元素的扩展。从功能模式的角度看，组件是一个 ViewModel。\n\n如何定义组件？\n\n如果不使用ESNext，San 提供了快捷方法 san.defineComponent 用于方便地定义组件。\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    attached: function () {\n\t        this.data.set('list', ['san', 'er', 'esui', 'etpl', 'esl']);\n\t    }\n\t});\n```\n\n如果使用ESNext，通过 ESNext 的 extends 继承时，template / filters / components 属性请使用 static property 的方式定义。\n\n```\n    import {Component} from 'san';\n\n\tclass HelloComponent extends Component {\n\t    constructor(options) {\n\t        super(options);\n\t        // .....\n\t    }\n\t    static template = '<p>Hello {{name}}!</p>';\n\t    initData() {\n\t        return {name: 'San'}\n\t    }\n\t}\n\n\tnew HelloComponent().attach(document.body);\n```\n\n\n#### 生命周期\n\n* compiled  - 组件视图模板编译完成\n* inited    - 组件实例初始化完成\n* created   - 组件元素创建完成\n* attached  - 组件已被附加到页面中\n* detached  - 组件从页面中移除\n* disposed  - 组件卸载完成\n\n组件的生命周期有这样的一些特点：\n\n* 生命周期代表组件的状态，生命周期本质就是状态管理。\n* 在生命周期到达时，对应的钩子函数会被触发运行。\n* 并存。比如 attached 和 created 等状态是同时并存的。\n* 互斥。attached 和 detached 是互斥的，disposed 会互斥掉其它所有的状态。\n* 有的时间点并不代表组件状态，只代表某个行为。当行为完成时，钩子函数也会触发。如 updated 代表每次数据变化导致的视图变更完成。\n\n\n通过声明周期的钩子函数，我们可以在生命周期到达时做一些事情。比如在生命周期 attached 中发起获取数据的请求，在请求返回后更新数据，使视图刷新。\n\n```\n    var ListComponent = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    initData: function () {\n\t        return {\n\t            list: []\n\t        };\n\t    },\n\n\t    attached: function () {\n\t        requestList().then(this.updateList.bind(this));\n\t    },\n\n\t    updateList: function (list) {\n\t        this.data.set('list', list);\n\t    }\n\t});\n```\n\n#### 数据\n\n所有组件数据相关的操作，都由组件实例的 data 成员提供。\n\n通过 data.get 方法可以获取数据\n\n```\n    san.defineComponent({\n\t    attached: function () {\n\t        var params = this.data.get('params');\n\t        this.data.set('list', getList(params[1]));\n\t    }\n\t});\n```\n\n组件在实例化时可以通过 option 传入 data，指定组件初始化时的数据\n\n```\n    var MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>'\n\t});\n\n\tvar myApp = new MyApp({\n\t    data: {\n\t        list: ['san', 'er', 'esui', 'etpl', 'esl']\n\t    }\n\t});\n\tmyApp.attach(document.body);\n```\n\nnew 时传入初始数据是针对实例的特例需求。\n\n但如果我们在定义组件时希望每个实例都具有初始的一些数据，此时可以定义 initData 方法，可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。\n\n```\n\tvar MyApp = san.defineComponent({\n\t    template: '<ul><li s-for=\"item in list\">{{item}}</li></ul>',\n\n\t    initData: function () {\n\t        return {\n\t            list: ['san', 'er', 'esui', 'etpl', 'esl']\n\t        };\n\t    }\n\t});\n\n\tvar myApp = new MyApp();\n\tmyApp.attach(document.body);\n```\n\n计算数据\n\n一个数据项的值可能由其他数据项计算得来，这时我们可以通过 computed 定义计算数据。 \n\ncomputed 是一个对象，key 为计算数据项的名称，value 是返回数据项值的函数。\n\n```\n\tsan.defineComponent({\n\t    template: '<a>{{info}}</a>',\n\n\t    // name 数据项由 firstName 和 lastName 计算得来\n\t    computed: {\n\t        name: function () {\n\t            return this.data.get('firstName') + ' ' + this.data.get('lastName');\n\t        },\n\n\t        info: function () {\n\t            return this.data.get('name') + ' - ' + this.data.get('email');\n\t        }\n\t    }\n\t});\n```\n\n计算数据的函数中只能使用 this.data.get 方法获取数据项的值，不能通过 this.method 调用组件方法，也不能通过 this.data.set 设置组件数据。\n\n\n#### 过滤器\n\n在定义视图模板时，插值是常用的展现数据的方式。在编写插值时，我们常使用 过滤器 将数据转换成适合视图展现的形式。\n\n```\n    {{createTime | dateFormat('yyyy-MM-dd')}}\n```\n\nSan 针对常用场景，内置了几个过滤器：\n\n* html - HTML 转义。当不指定过滤器时，默认使用此过滤器\n* url - URL 转义\n* raw - 不进行转义。当不想使用 HTML 转义时，使用此过滤器\n\n定制过滤器\n\n通过定义组件的 filters 成员，可以指定组件的视图模板可以使用哪些过滤器。\n\n```\n\tsan.defineComponent({\n\t    template: '<a>{{createTime | dateFormat(\"yyyy-MM-dd\")}}</a>',\n\n\t    filters: {\n\t        dateFormat: function (value, format) {\n\t            return moment(value).format(format);\n\t        }\n\t    }\n\t});\n```\n\n#### 消息\n\n通过 dispatch 方法，组件可以向组件树的上层派发消息。\n\n```\n    var SelectItem = san.defineComponent({\n\t    template: '<li on-click=\"select\"><slot></slot></li>',\n\n\t    select: function () {\n\t        var value = this.data.get('value');\n\n\t        // 向组件树的上层派发消息\n\t        this.dispatch('UI:select-item-selected', value);\n\t    }\n\t});\n```\n\n消息将沿着组件树向上传递，直到遇到第一个处理该消息的组件，则停止。通过 messages 可以声明组件要处理的消息。\n\nmessages 是一个对象，key 是消息名称，value 是消息处理的函数，接收一个包含 target(派发消息的组件) 和 value(消息的值) 的参数对象。\n\n```\n\tvar Select = san.defineComponent({\n\t    template: '<ul><slot></slot></ul>',\n\n\t    // 声明组件要处理的消息\n\t    messages: {\n\t        'UI:select-item-selected': function (arg) {\n\t            var value = arg.value;\n\t            this.data.set('value', value);\n\n\t            // arg.target 可以拿到派发消息的组件\n\t        }\n\t    }\n\t});\n```\n\n","slug":"san5","published":1,"updated":"2018-02-05T05:54:47.423Z","comments":1,"photos":[],"link":"","_id":"cjekvj531000hrmjfkm6nrpb1","content":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><hr>\n<p>组件是 San 的基本单位，是独立的数据、逻辑、视图的封装单元。从页面的角度看，组件是 HTML 元素的扩展。从功能模式的角度看，组件是一个 ViewModel。</p>\n<p>如何定义组件？</p>\n<p>如果不使用ESNext，San 提供了快捷方法 san.defineComponent 用于方便地定义组件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果使用ESNext，通过 ESNext 的 extends 继承时，template / filters / components 属性请使用 static property 的方式定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   import &#123;Component&#125; from &apos;san&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HelloComponent extends Component &#123;</span><br><span class=\"line\">    constructor(options) &#123;</span><br><span class=\"line\">        super(options);</span><br><span class=\"line\">        // .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    static template = &apos;&lt;p&gt;Hello &#123;&#123;name&#125;&#125;!&lt;/p&gt;&apos;;</span><br><span class=\"line\">    initData() &#123;</span><br><span class=\"line\">        return &#123;name: &apos;San&apos;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new HelloComponent().attach(document.body);</span><br></pre></td></tr></table></figure>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><ul>\n<li>compiled  - 组件视图模板编译完成</li>\n<li>inited    - 组件实例初始化完成</li>\n<li>created   - 组件元素创建完成</li>\n<li>attached  - 组件已被附加到页面中</li>\n<li>detached  - 组件从页面中移除</li>\n<li>disposed  - 组件卸载完成</li>\n</ul>\n<p>组件的生命周期有这样的一些特点：</p>\n<ul>\n<li>生命周期代表组件的状态，生命周期本质就是状态管理。</li>\n<li>在生命周期到达时，对应的钩子函数会被触发运行。</li>\n<li>并存。比如 attached 和 created 等状态是同时并存的。</li>\n<li>互斥。attached 和 detached 是互斥的，disposed 会互斥掉其它所有的状态。</li>\n<li>有的时间点并不代表组件状态，只代表某个行为。当行为完成时，钩子函数也会触发。如 updated 代表每次数据变化导致的视图变更完成。</li>\n</ul>\n<p>通过声明周期的钩子函数，我们可以在生命周期到达时做一些事情。比如在生命周期 attached 中发起获取数据的请求，在请求返回后更新数据，使视图刷新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var ListComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            list: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        requestList().then(this.updateList.bind(this));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    updateList: function (list) &#123;</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h4><p>所有组件数据相关的操作，都由组件实例的 data 成员提供。</p>\n<p>通过 data.get 方法可以获取数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        var params = this.data.get(&apos;params&apos;);</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, getList(params[1]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>组件在实例化时可以通过 option 传入 data，指定组件初始化时的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        list: [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>new 时传入初始数据是针对实例的特例需求。</p>\n<p>但如果我们在定义组件时希望每个实例都具有初始的一些数据，此时可以定义 initData 方法，可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            list: [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>计算数据</p>\n<p>一个数据项的值可能由其他数据项计算得来，这时我们可以通过 computed 定义计算数据。 </p>\n<p>computed 是一个对象，key 为计算数据项的名称，value 是返回数据项值的函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;a&gt;&#123;&#123;info&#125;&#125;&lt;/a&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // name 数据项由 firstName 和 lastName 计算得来</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        name: function () &#123;</span><br><span class=\"line\">            return this.data.get(&apos;firstName&apos;) + &apos; &apos; + this.data.get(&apos;lastName&apos;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        info: function () &#123;</span><br><span class=\"line\">            return this.data.get(&apos;name&apos;) + &apos; - &apos; + this.data.get(&apos;email&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>计算数据的函数中只能使用 this.data.get 方法获取数据项的值，不能通过 this.method 调用组件方法，也不能通过 this.data.set 设置组件数据。</p>\n<h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><p>在定义视图模板时，插值是常用的展现数据的方式。在编写插值时，我们常使用 过滤器 将数据转换成适合视图展现的形式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;createTime | dateFormat(&apos;yyyy-MM-dd&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>San 针对常用场景，内置了几个过滤器：</p>\n<ul>\n<li>html - HTML 转义。当不指定过滤器时，默认使用此过滤器</li>\n<li>url - URL 转义</li>\n<li>raw - 不进行转义。当不想使用 HTML 转义时，使用此过滤器</li>\n</ul>\n<p>定制过滤器</p>\n<p>通过定义组件的 filters 成员，可以指定组件的视图模板可以使用哪些过滤器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;a&gt;&#123;&#123;createTime | dateFormat(&quot;yyyy-MM-dd&quot;)&#125;&#125;&lt;/a&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    filters: &#123;</span><br><span class=\"line\">        dateFormat: function (value, format) &#123;</span><br><span class=\"line\">            return moment(value).format(format);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h4><p>通过 dispatch 方法，组件可以向组件树的上层派发消息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var SelectItem = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;li on-click=&quot;select&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/li&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    select: function () &#123;</span><br><span class=\"line\">        var value = this.data.get(&apos;value&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 向组件树的上层派发消息</span><br><span class=\"line\">        this.dispatch(&apos;UI:select-item-selected&apos;, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>消息将沿着组件树向上传递，直到遇到第一个处理该消息的组件，则停止。通过 messages 可以声明组件要处理的消息。</p>\n<p>messages 是一个对象，key 是消息名称，value 是消息处理的函数，接收一个包含 target(派发消息的组件) 和 value(消息的值) 的参数对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Select = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // 声明组件要处理的消息</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">        &apos;UI:select-item-selected&apos;: function (arg) &#123;</span><br><span class=\"line\">            var value = arg.value;</span><br><span class=\"line\">            this.data.set(&apos;value&apos;, value);</span><br><span class=\"line\"></span><br><span class=\"line\">            // arg.target 可以拿到派发消息的组件</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近关注了一个极简MVVM框架San，翻了一遍San的文档，做些笔记。<br><a href=\"https://ecomfe.github.io/san/tutorial/start/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<hr>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><hr>\n<p>组件是 San 的基本单位，是独立的数据、逻辑、视图的封装单元。从页面的角度看，组件是 HTML 元素的扩展。从功能模式的角度看，组件是一个 ViewModel。</p>\n<p>如何定义组件？</p>\n<p>如果不使用ESNext，San 提供了快捷方法 san.defineComponent 用于方便地定义组件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果使用ESNext，通过 ESNext 的 extends 继承时，template / filters / components 属性请使用 static property 的方式定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   import &#123;Component&#125; from &apos;san&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HelloComponent extends Component &#123;</span><br><span class=\"line\">    constructor(options) &#123;</span><br><span class=\"line\">        super(options);</span><br><span class=\"line\">        // .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    static template = &apos;&lt;p&gt;Hello &#123;&#123;name&#125;&#125;!&lt;/p&gt;&apos;;</span><br><span class=\"line\">    initData() &#123;</span><br><span class=\"line\">        return &#123;name: &apos;San&apos;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new HelloComponent().attach(document.body);</span><br></pre></td></tr></table></figure>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><ul>\n<li>compiled  - 组件视图模板编译完成</li>\n<li>inited    - 组件实例初始化完成</li>\n<li>created   - 组件元素创建完成</li>\n<li>attached  - 组件已被附加到页面中</li>\n<li>detached  - 组件从页面中移除</li>\n<li>disposed  - 组件卸载完成</li>\n</ul>\n<p>组件的生命周期有这样的一些特点：</p>\n<ul>\n<li>生命周期代表组件的状态，生命周期本质就是状态管理。</li>\n<li>在生命周期到达时，对应的钩子函数会被触发运行。</li>\n<li>并存。比如 attached 和 created 等状态是同时并存的。</li>\n<li>互斥。attached 和 detached 是互斥的，disposed 会互斥掉其它所有的状态。</li>\n<li>有的时间点并不代表组件状态，只代表某个行为。当行为完成时，钩子函数也会触发。如 updated 代表每次数据变化导致的视图变更完成。</li>\n</ul>\n<p>通过声明周期的钩子函数，我们可以在生命周期到达时做一些事情。比如在生命周期 attached 中发起获取数据的请求，在请求返回后更新数据，使视图刷新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var ListComponent = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            list: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        requestList().then(this.updateList.bind(this));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    updateList: function (list) &#123;</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h4><p>所有组件数据相关的操作，都由组件实例的 data 成员提供。</p>\n<p>通过 data.get 方法可以获取数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   san.defineComponent(&#123;</span><br><span class=\"line\">    attached: function () &#123;</span><br><span class=\"line\">        var params = this.data.get(&apos;params&apos;);</span><br><span class=\"line\">        this.data.set(&apos;list&apos;, getList(params[1]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>组件在实例化时可以通过 option 传入 data，指定组件初始化时的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        list: [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>new 时传入初始数据是针对实例的特例需求。</p>\n<p>但如果我们在定义组件时希望每个实例都具有初始的一些数据，此时可以定义 initData 方法，可以在定义组件时指定组件初始化时的数据。initData 方法返回组件实例的初始化数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MyApp = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;li s-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    initData: function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            list: [&apos;san&apos;, &apos;er&apos;, &apos;esui&apos;, &apos;etpl&apos;, &apos;esl&apos;]</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var myApp = new MyApp();</span><br><span class=\"line\">myApp.attach(document.body);</span><br></pre></td></tr></table></figure>\n<p>计算数据</p>\n<p>一个数据项的值可能由其他数据项计算得来，这时我们可以通过 computed 定义计算数据。 </p>\n<p>computed 是一个对象，key 为计算数据项的名称，value 是返回数据项值的函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;a&gt;&#123;&#123;info&#125;&#125;&lt;/a&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // name 数据项由 firstName 和 lastName 计算得来</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        name: function () &#123;</span><br><span class=\"line\">            return this.data.get(&apos;firstName&apos;) + &apos; &apos; + this.data.get(&apos;lastName&apos;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        info: function () &#123;</span><br><span class=\"line\">            return this.data.get(&apos;name&apos;) + &apos; - &apos; + this.data.get(&apos;email&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>计算数据的函数中只能使用 this.data.get 方法获取数据项的值，不能通过 this.method 调用组件方法，也不能通过 this.data.set 设置组件数据。</p>\n<h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><p>在定义视图模板时，插值是常用的展现数据的方式。在编写插值时，我们常使用 过滤器 将数据转换成适合视图展现的形式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;createTime | dateFormat(&apos;yyyy-MM-dd&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>San 针对常用场景，内置了几个过滤器：</p>\n<ul>\n<li>html - HTML 转义。当不指定过滤器时，默认使用此过滤器</li>\n<li>url - URL 转义</li>\n<li>raw - 不进行转义。当不想使用 HTML 转义时，使用此过滤器</li>\n</ul>\n<p>定制过滤器</p>\n<p>通过定义组件的 filters 成员，可以指定组件的视图模板可以使用哪些过滤器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;a&gt;&#123;&#123;createTime | dateFormat(&quot;yyyy-MM-dd&quot;)&#125;&#125;&lt;/a&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    filters: &#123;</span><br><span class=\"line\">        dateFormat: function (value, format) &#123;</span><br><span class=\"line\">            return moment(value).format(format);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h4><p>通过 dispatch 方法，组件可以向组件树的上层派发消息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var SelectItem = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;li on-click=&quot;select&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/li&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    select: function () &#123;</span><br><span class=\"line\">        var value = this.data.get(&apos;value&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 向组件树的上层派发消息</span><br><span class=\"line\">        this.dispatch(&apos;UI:select-item-selected&apos;, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>消息将沿着组件树向上传递，直到遇到第一个处理该消息的组件，则停止。通过 messages 可以声明组件要处理的消息。</p>\n<p>messages 是一个对象，key 是消息名称，value 是消息处理的函数，接收一个包含 target(派发消息的组件) 和 value(消息的值) 的参数对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Select = san.defineComponent(&#123;</span><br><span class=\"line\">    template: &apos;&lt;ul&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/ul&gt;&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // 声明组件要处理的消息</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">        &apos;UI:select-item-selected&apos;: function (arg) &#123;</span><br><span class=\"line\">            var value = arg.value;</span><br><span class=\"line\">            this.data.set(&apos;value&apos;, value);</span><br><span class=\"line\"></span><br><span class=\"line\">            // arg.target 可以拿到派发消息的组件</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"使用VPS搭建VPN","subtitle":"没错，小梯子","date":"2018-01-19T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n最近公司的服务器出了点小问题，梯子用不了了，考虑到自己还有一台服务器闲置，所以拿出来搭个梯子自用。\n\n----------\n\n\n#### 准备工作\n-------------\n\n\n首先要有一台VPS，推荐购买美国的，自用的是洛杉矶服务器，最低配即可。\n\n-------------\n\n#### 一键部署\n\n服务器系统为CentOS 7，其余系统可参照官网采用不同的包。\n\n\n```\nwget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh\n//回车\n\nchmod +x shadowsocks.sh\n//回车\n\n./shadowsocks.sh 2>&1 | tee shadowsocks.log\n//回车\n\n//安装过程中会有两三次提示，分别要求设置 端口、密码及加密方式，直接回车会使用默认设置\n\n//程序执行完成后需要到/etc/shadowsocks.json文件中将server 0.0.0.0改成自己vps的ip\n\n//结束\n//自己电脑上下载Shadowsocks客户端（Mac OS上为ShadowsocksX-NG）输入自己的配置即可\n```\n\n","source":"_posts/VPS.md","raw":"---\nlayout: post\ntitle: \"使用VPS搭建VPN\"\nsubtitle: \"没错，小梯子\"\ndate: 2018-1-20\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags:\n\t- VPS\n---\n\n<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n\n\n最近公司的服务器出了点小问题，梯子用不了了，考虑到自己还有一台服务器闲置，所以拿出来搭个梯子自用。\n\n----------\n\n\n#### 准备工作\n-------------\n\n\n首先要有一台VPS，推荐购买美国的，自用的是洛杉矶服务器，最低配即可。\n\n-------------\n\n#### 一键部署\n\n服务器系统为CentOS 7，其余系统可参照官网采用不同的包。\n\n\n```\nwget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh\n//回车\n\nchmod +x shadowsocks.sh\n//回车\n\n./shadowsocks.sh 2>&1 | tee shadowsocks.log\n//回车\n\n//安装过程中会有两三次提示，分别要求设置 端口、密码及加密方式，直接回车会使用默认设置\n\n//程序执行完成后需要到/etc/shadowsocks.json文件中将server 0.0.0.0改成自己vps的ip\n\n//结束\n//自己电脑上下载Shadowsocks客户端（Mac OS上为ShadowsocksX-NG）输入自己的配置即可\n```\n\n","slug":"VPS","published":1,"updated":"2018-03-09T07:34:00.467Z","comments":1,"photos":[],"link":"","_id":"cjekvj532000irmjfix4m78yt","content":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>最近公司的服务器出了点小问题，梯子用不了了，考虑到自己还有一台服务器闲置，所以拿出来搭个梯子自用。</p>\n<hr>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><hr>\n<p>首先要有一台VPS，推荐购买美国的，自用的是洛杉矶服务器，最低配即可。</p>\n<hr>\n<h4 id=\"一键部署\"><a href=\"#一键部署\" class=\"headerlink\" title=\"一键部署\"></a>一键部署</h4><p>服务器系统为CentOS 7，其余系统可参照官网采用不同的包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class=\"line\">//回车</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x shadowsocks.sh</span><br><span class=\"line\">//回车</span><br><span class=\"line\"></span><br><span class=\"line\">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br><span class=\"line\">//回车</span><br><span class=\"line\"></span><br><span class=\"line\">//安装过程中会有两三次提示，分别要求设置 端口、密码及加密方式，直接回车会使用默认设置</span><br><span class=\"line\"></span><br><span class=\"line\">//程序执行完成后需要到/etc/shadowsocks.json文件中将server 0.0.0.0改成自己vps的ip</span><br><span class=\"line\"></span><br><span class=\"line\">//结束</span><br><span class=\"line\">//自己电脑上下载Shadowsocks客户端（Mac OS上为ShadowsocksX-NG）输入自己的配置即可</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<!-- LeetCode刷题系列(1)(question 3)\n=================== -->\n<p>最近公司的服务器出了点小问题，梯子用不了了，考虑到自己还有一台服务器闲置，所以拿出来搭个梯子自用。</p>\n<hr>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><hr>\n<p>首先要有一台VPS，推荐购买美国的，自用的是洛杉矶服务器，最低配即可。</p>\n<hr>\n<h4 id=\"一键部署\"><a href=\"#一键部署\" class=\"headerlink\" title=\"一键部署\"></a>一键部署</h4><p>服务器系统为CentOS 7，其余系统可参照官网采用不同的包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class=\"line\">//回车</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x shadowsocks.sh</span><br><span class=\"line\">//回车</span><br><span class=\"line\"></span><br><span class=\"line\">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br><span class=\"line\">//回车</span><br><span class=\"line\"></span><br><span class=\"line\">//安装过程中会有两三次提示，分别要求设置 端口、密码及加密方式，直接回车会使用默认设置</span><br><span class=\"line\"></span><br><span class=\"line\">//程序执行完成后需要到/etc/shadowsocks.json文件中将server 0.0.0.0改成自己vps的ip</span><br><span class=\"line\"></span><br><span class=\"line\">//结束</span><br><span class=\"line\">//自己电脑上下载Shadowsocks客户端（Mac OS上为ShadowsocksX-NG）输入自己的配置即可</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Koa学习笔记 一","subtitle":"基本用法","date":"2017-12-31T16:00:00.000Z","author":"Ai Shuangying","header-img":"hack.jpeg","cdn":"header-on","_content":"\n\n这个系列将记载我在学习Koa过程中需要记录下来的重点和遇到的问题。\n[中文文档](https://koa.bootcss.com/)\n[英文文档](http://koajs.com)\n\n----------\n\n### 安装koa\n-------------\n\nKoa 依赖 node v7.6.0 或 ES2015及更高版本和 async 方法支持\n\n这里提供将升级本地node版本的方法\n\n先查看本机node.js版本：\n\n```\n    $ node -v\n```\n\n清除node.js的cache：(此步会要求输入密码)\n\n```\n    $ sudo npm cache clean -f\n```\n\n安装 n 工具，这个工具是专门用来管理node.js版本的\n\n```\n    $ sudo npm install -g n\n```\n\n安装最新版本的node.js\n\n```\n    $ sudo n stable\n```\n\n再次查看本机的node.js版本：(本文采用的node版本为9.4.0)\n\n```\n    $ node -v\n```\n\n安装koa\n\n```\n    $ npm i koa\n```\n\n\n### 架设HTTP服务\n-------------\n\n```\n    const Koa = require('koa');\n\tconst app = new Koa();\n\n\tapp.listen(3000);\n```\n\n这里的 app.listen(...) 方法只是以下方法的语法糖:\n\n```\n    const http = require('http');\n\tconst Koa = require('koa');\n\tconst app = new Koa();\n\thttp.createServer(app.callback()).listen(3000);\n```\n\n这意味着您可以将同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址：\n\n```\n    const http = require('http');\n\tconst https = require('https');\n\tconst Koa = require('koa');\n\tconst app = new Koa();\n\thttp.createServer(app.callback()).listen(3000);\n\thttps.createServer(app.callback()).listen(3001);\n```\n\n\n### 上下文对象 Context\n-------------\n\nKoa 提供一个 Context 对象，表示一次对话的上下文（包括 HTTP 请求和 HTTP 回复）。通过加工这个对象，就可以控制返回给用户的内容。\n\n```\n\tapp.use(async ctx => {\n\t  \tctx; \t\t\t// 这是 Context\n\t  \tctx.req; \t\t// 这是 Node Request\n\t  \tctx.res; \t\t// 这是 Node Response  绕过 Koa 的 response 处理是 不被支持的. \n\t  \tctx.request; \t// 这是 koa Request\n\t  \tctx.response; \t// 这是 koa Response\n\n\t  \tctx.request.header   \t//请求标头对象。\n\t  \tctx.request.header=   \t//设置请求标头对象。\n\t  \tctx.request.method   \t//请求方法。\n\t  \tctx.request.method=   \t//设置请求方法，对于实现诸如 methodOverride() 的中间件是有用的。\n\t  \tctx.request.length   \t//返回以数字返回请求的 Content-Length，或 undefined。\n\t  \tctx.request.url   \t\t//获取请求 URL.\n\t  \tctx.request.url=    \t//设置请求 URL, 对 url 重写有用。\n\t  \tctx.request.origin   \t//获取URL的来源，包括 protocol 和 host。\n\t  \tctx.request.href    \t//获取完整的请求URL，包括 protocol，host 和 url。\n\t  \tctx.request.path   \t    //获取请求路径名。\n\t  \tctx.request.querystring //根据 ? 获取原始查询字符串.\n\t  \tctx.request.search   \t//使用 ? 获取原始查询字符串。\n\t  \tctx.request.query   \t//获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。请注意，此 getter 不 支持嵌套解析。\n\t});\n```\n\nContext.response.body属性就是发送给用户的内容。\n\n```\n    const Koa = require('koa');\n\tconst app = new Koa();\n\tconst main = ctx => {\n\t  \tctx.response.body = 'Hello World';\n\t};\n\tapp.use(main);\n\tapp.listen(3000);\n```\n\n```\n    ctx.response.type = 'json / xml / html / text'; //这些都是response的类型\n```\n\n```\n    const main = ctx => {\n\t  \tctx.response.type = 'html';\n\t  \tctx.response.body = fs.createReadStream('./demos/template.html');\n\t};    //返回一个网页模板\n```\n\nctx.cookies用来读写 Cookie\n\n```\n\tconst main = function(ctx) {\n  \t\tconst n = Number(ctx.cookies.get('view') || 0) + 1;\n  \t\tctx.cookies.set('view', n);\n  \t\tctx.response.body = n + ' views';\n\t}\n```\n\n### 路由\n-------------\n\n这里使用koa自带的koa-route 模块\n\n```\n    const route = require('koa-route');\n\n\tconst about = ctx => {\n\t  \tctx.response.type = 'html';\n\t  \tctx.response.body = '<a href=\"/\">Index Page</a>';\n\t};\n\n\tconst main = ctx => {\n\t  \tctx.response.body = 'Hello World';\n\t};\n\n\tapp.use(route.get('/', main));\n\tapp.use(route.get('/about', about));\n```\n\n静态资源访问则使用koa自带的koa-static模块\n\n```\n    const path = require('path');\n\tconst serve = require('koa-static');\n\n\tconst main = serve(path.join(__dirname));\n\tapp.use(main);\n```\n\n重定向\n\n```\n    const redirect = ctx => {\n  \t\tctx.response.redirect('/');\n  \t\tctx.response.body = '<a href=\"/\">Index Page</a>';\n\t};\n\n\tapp.use(route.get('/redirect', redirect));  //访问'/redirect'的请求会被重定向到'/'\n```\n\n\n### 中间件\n-------------\n\n基本上，Koa 所有的功能都是通过中间件实现的。\n中间件的实现很简单，所谓中间件可以看做是有两个参数的函数，用来在 HTTP Request 和 HTTP Response 中间实现某种功能。\n\n```\n\t//一个非常简单的输出log的中间件函数\n    const logger = (ctx, next) => {\n  \t\tconsole.log(`${Date.now()} ${ctx.request.method} ${ctx.request.url}`);\n  \t\tnext();\n\t}\n\tapp.use(logger);\n```\n\n如果对进程添加很多中间件的话会怎么样呢？\n多个中间件会形成一个栈结构（middle stack），以\"先进后出\"（first-in-last-out）的顺序执行。\n\n也就是说，会从上至下依次进入每个中间件，但只有在最内层中间件执行完毕后才会一层层返回到最外层中间件，示例如下：\n\n```\n\tconst one = (ctx, next) => {\n\t  \tconsole.log('>> one');\n\t  \tnext();\n\t  \tconsole.log('<< one');\n\t}\n\tconst two = (ctx, next) => {\n\t  \tconsole.log('>> two');\n\t  \tnext(); \n\t  \tconsole.log('<< two');\n\t}\n\tconst three = (ctx, next) => {\n\t  \tconsole.log('>> three');\n\t  \tnext();\n\t  \tconsole.log('<< three');\n\t}\n\n\tapp.use(one);\n\tapp.use(two);\n\tapp.use(three);\n```\n\n此时的输出应该是\n\n```\n\t>> one\n\t>> two\n\t>> three\n\t<< three\n\t<< two\n\t<< one\n```\n\n这是全同步中间件的执行流程，如果这些中间件中包含异步操作，那么执行的流程就会发生变化\n\n首先，包含异步操作的中间件必须写成async函数\n\n```\n\t//这就是一个异步中间件\n\tconst main = async function (ctx, next) {\n\t  \tctx.response.type = 'html';\n\t  \tctx.response.body = await fs.readFile('./demos/template.html', 'utf8');\n\t};\n\n\tapp.use(main);\n```\n\n中间件的合成则可以使用 koa-compose 模块\n\n```\n\tconst compose = require('koa-compose');\n\n\tconst logger = (ctx, next) => {\n\t  \tconsole.log(`${Date.now()} ${ctx.request.method} ${ctx.request.url}`);\n\t  \tnext();\n\t}\n\n\tconst main = ctx => {\n\t  \tctx.response.body = 'Hello World';\n\t};\n\n\tconst middlewares = compose([logger, main]);\n\tapp.use(middlewares);\n```\n\n从 POST 请求的数据体里面提取键值对使用 koa-body 模块\n\n```\n\tconst koaBody = require('koa-body');\n\n\tconst main = async function(ctx) {\n\t  \tconst body = ctx.request.body;\n\t  \tif (!body.name) ctx.throw(400, '.name required');\n\t  \tctx.body = { name: body.name };\n\t};\n\n\tapp.use(koaBody());\n```\n\n\n\n### 错误处理\n-------------\n\n直接抛出错误\n\n```\n\tconst main = ctx => {\n  \t\tctx.throw(500);\n\t};\n```\n\n返回错误\n\n```\n\tconst main = ctx => {\n  \t\tctx.response.status = 404;\n  \t\tctx.response.body = 'Page Not Found';\n\t};\n```\n\n为了方便处理错误，最好使用try...catch将其捕获。但是，为每个中间件都写try...catch太麻烦，我们可以让最外层的中间件，负责所有中间件的错误处理。\n\n```\n\tconst handler = async (ctx, next) => {\n\t  \ttry {\n\t    \tawait next();\n\t  \t}catch (err) {\n\t    \tctx.response.status = err.statusCode || err.status || 500;\n\t    \tctx.response.body = {\n\t      \t\tmessage: err.message\n\t    \t};\n\t  \t}\n\t};\n\n\tconst main = ctx => {\n\t  \tctx.throw(500);\n\t};\n\n\tapp.use(handler);\n\tapp.use(main);\n```\n\napp监听错误的处理方法\n\n```\n\tapp.on('error', (err, ctx) =>\n  \t\tconsole.error('server error', err);\n\t);\n```\n\n需要注意的是，如果错误被try...catch捕获，就不会触发error事件。这时，必须调用ctx.app.emit()，手动释放error事件，才能让监听函数生效。\n\n```\n\tconst handler = async (ctx, next) => {\n\t  \ttry {\n\t    \tawait next();\n\t  \t} catch (err) {\n\t    \tctx.response.status = err.statusCode || err.status || 500;\n\t    \tctx.response.type = 'html';\n\t    \tctx.response.body = '<p>Something wrong, please contact administrator.</p>';\n\t    \tctx.app.emit('error', err, ctx);\n\t  \t}\n\t};\n```\n\n\n参考：\n[阮一峰koa教程](http://www.ruanyifeng.com/blog/2017/08/koa.html)\n","source":"_posts/koa1.md","raw":"---\nlayout: post\ntitle: \"Koa学习笔记 一\"\nsubtitle: \"基本用法\"\ndate: 2018-1-1\nauthor: \"Ai Shuangying\"\nheader-img: \"hack.jpeg\"\ncdn: 'header-on'\ntags: \n    - Node.js\n    - Koa\n---\n\n\n这个系列将记载我在学习Koa过程中需要记录下来的重点和遇到的问题。\n[中文文档](https://koa.bootcss.com/)\n[英文文档](http://koajs.com)\n\n----------\n\n### 安装koa\n-------------\n\nKoa 依赖 node v7.6.0 或 ES2015及更高版本和 async 方法支持\n\n这里提供将升级本地node版本的方法\n\n先查看本机node.js版本：\n\n```\n    $ node -v\n```\n\n清除node.js的cache：(此步会要求输入密码)\n\n```\n    $ sudo npm cache clean -f\n```\n\n安装 n 工具，这个工具是专门用来管理node.js版本的\n\n```\n    $ sudo npm install -g n\n```\n\n安装最新版本的node.js\n\n```\n    $ sudo n stable\n```\n\n再次查看本机的node.js版本：(本文采用的node版本为9.4.0)\n\n```\n    $ node -v\n```\n\n安装koa\n\n```\n    $ npm i koa\n```\n\n\n### 架设HTTP服务\n-------------\n\n```\n    const Koa = require('koa');\n\tconst app = new Koa();\n\n\tapp.listen(3000);\n```\n\n这里的 app.listen(...) 方法只是以下方法的语法糖:\n\n```\n    const http = require('http');\n\tconst Koa = require('koa');\n\tconst app = new Koa();\n\thttp.createServer(app.callback()).listen(3000);\n```\n\n这意味着您可以将同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址：\n\n```\n    const http = require('http');\n\tconst https = require('https');\n\tconst Koa = require('koa');\n\tconst app = new Koa();\n\thttp.createServer(app.callback()).listen(3000);\n\thttps.createServer(app.callback()).listen(3001);\n```\n\n\n### 上下文对象 Context\n-------------\n\nKoa 提供一个 Context 对象，表示一次对话的上下文（包括 HTTP 请求和 HTTP 回复）。通过加工这个对象，就可以控制返回给用户的内容。\n\n```\n\tapp.use(async ctx => {\n\t  \tctx; \t\t\t// 这是 Context\n\t  \tctx.req; \t\t// 这是 Node Request\n\t  \tctx.res; \t\t// 这是 Node Response  绕过 Koa 的 response 处理是 不被支持的. \n\t  \tctx.request; \t// 这是 koa Request\n\t  \tctx.response; \t// 这是 koa Response\n\n\t  \tctx.request.header   \t//请求标头对象。\n\t  \tctx.request.header=   \t//设置请求标头对象。\n\t  \tctx.request.method   \t//请求方法。\n\t  \tctx.request.method=   \t//设置请求方法，对于实现诸如 methodOverride() 的中间件是有用的。\n\t  \tctx.request.length   \t//返回以数字返回请求的 Content-Length，或 undefined。\n\t  \tctx.request.url   \t\t//获取请求 URL.\n\t  \tctx.request.url=    \t//设置请求 URL, 对 url 重写有用。\n\t  \tctx.request.origin   \t//获取URL的来源，包括 protocol 和 host。\n\t  \tctx.request.href    \t//获取完整的请求URL，包括 protocol，host 和 url。\n\t  \tctx.request.path   \t    //获取请求路径名。\n\t  \tctx.request.querystring //根据 ? 获取原始查询字符串.\n\t  \tctx.request.search   \t//使用 ? 获取原始查询字符串。\n\t  \tctx.request.query   \t//获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。请注意，此 getter 不 支持嵌套解析。\n\t});\n```\n\nContext.response.body属性就是发送给用户的内容。\n\n```\n    const Koa = require('koa');\n\tconst app = new Koa();\n\tconst main = ctx => {\n\t  \tctx.response.body = 'Hello World';\n\t};\n\tapp.use(main);\n\tapp.listen(3000);\n```\n\n```\n    ctx.response.type = 'json / xml / html / text'; //这些都是response的类型\n```\n\n```\n    const main = ctx => {\n\t  \tctx.response.type = 'html';\n\t  \tctx.response.body = fs.createReadStream('./demos/template.html');\n\t};    //返回一个网页模板\n```\n\nctx.cookies用来读写 Cookie\n\n```\n\tconst main = function(ctx) {\n  \t\tconst n = Number(ctx.cookies.get('view') || 0) + 1;\n  \t\tctx.cookies.set('view', n);\n  \t\tctx.response.body = n + ' views';\n\t}\n```\n\n### 路由\n-------------\n\n这里使用koa自带的koa-route 模块\n\n```\n    const route = require('koa-route');\n\n\tconst about = ctx => {\n\t  \tctx.response.type = 'html';\n\t  \tctx.response.body = '<a href=\"/\">Index Page</a>';\n\t};\n\n\tconst main = ctx => {\n\t  \tctx.response.body = 'Hello World';\n\t};\n\n\tapp.use(route.get('/', main));\n\tapp.use(route.get('/about', about));\n```\n\n静态资源访问则使用koa自带的koa-static模块\n\n```\n    const path = require('path');\n\tconst serve = require('koa-static');\n\n\tconst main = serve(path.join(__dirname));\n\tapp.use(main);\n```\n\n重定向\n\n```\n    const redirect = ctx => {\n  \t\tctx.response.redirect('/');\n  \t\tctx.response.body = '<a href=\"/\">Index Page</a>';\n\t};\n\n\tapp.use(route.get('/redirect', redirect));  //访问'/redirect'的请求会被重定向到'/'\n```\n\n\n### 中间件\n-------------\n\n基本上，Koa 所有的功能都是通过中间件实现的。\n中间件的实现很简单，所谓中间件可以看做是有两个参数的函数，用来在 HTTP Request 和 HTTP Response 中间实现某种功能。\n\n```\n\t//一个非常简单的输出log的中间件函数\n    const logger = (ctx, next) => {\n  \t\tconsole.log(`${Date.now()} ${ctx.request.method} ${ctx.request.url}`);\n  \t\tnext();\n\t}\n\tapp.use(logger);\n```\n\n如果对进程添加很多中间件的话会怎么样呢？\n多个中间件会形成一个栈结构（middle stack），以\"先进后出\"（first-in-last-out）的顺序执行。\n\n也就是说，会从上至下依次进入每个中间件，但只有在最内层中间件执行完毕后才会一层层返回到最外层中间件，示例如下：\n\n```\n\tconst one = (ctx, next) => {\n\t  \tconsole.log('>> one');\n\t  \tnext();\n\t  \tconsole.log('<< one');\n\t}\n\tconst two = (ctx, next) => {\n\t  \tconsole.log('>> two');\n\t  \tnext(); \n\t  \tconsole.log('<< two');\n\t}\n\tconst three = (ctx, next) => {\n\t  \tconsole.log('>> three');\n\t  \tnext();\n\t  \tconsole.log('<< three');\n\t}\n\n\tapp.use(one);\n\tapp.use(two);\n\tapp.use(three);\n```\n\n此时的输出应该是\n\n```\n\t>> one\n\t>> two\n\t>> three\n\t<< three\n\t<< two\n\t<< one\n```\n\n这是全同步中间件的执行流程，如果这些中间件中包含异步操作，那么执行的流程就会发生变化\n\n首先，包含异步操作的中间件必须写成async函数\n\n```\n\t//这就是一个异步中间件\n\tconst main = async function (ctx, next) {\n\t  \tctx.response.type = 'html';\n\t  \tctx.response.body = await fs.readFile('./demos/template.html', 'utf8');\n\t};\n\n\tapp.use(main);\n```\n\n中间件的合成则可以使用 koa-compose 模块\n\n```\n\tconst compose = require('koa-compose');\n\n\tconst logger = (ctx, next) => {\n\t  \tconsole.log(`${Date.now()} ${ctx.request.method} ${ctx.request.url}`);\n\t  \tnext();\n\t}\n\n\tconst main = ctx => {\n\t  \tctx.response.body = 'Hello World';\n\t};\n\n\tconst middlewares = compose([logger, main]);\n\tapp.use(middlewares);\n```\n\n从 POST 请求的数据体里面提取键值对使用 koa-body 模块\n\n```\n\tconst koaBody = require('koa-body');\n\n\tconst main = async function(ctx) {\n\t  \tconst body = ctx.request.body;\n\t  \tif (!body.name) ctx.throw(400, '.name required');\n\t  \tctx.body = { name: body.name };\n\t};\n\n\tapp.use(koaBody());\n```\n\n\n\n### 错误处理\n-------------\n\n直接抛出错误\n\n```\n\tconst main = ctx => {\n  \t\tctx.throw(500);\n\t};\n```\n\n返回错误\n\n```\n\tconst main = ctx => {\n  \t\tctx.response.status = 404;\n  \t\tctx.response.body = 'Page Not Found';\n\t};\n```\n\n为了方便处理错误，最好使用try...catch将其捕获。但是，为每个中间件都写try...catch太麻烦，我们可以让最外层的中间件，负责所有中间件的错误处理。\n\n```\n\tconst handler = async (ctx, next) => {\n\t  \ttry {\n\t    \tawait next();\n\t  \t}catch (err) {\n\t    \tctx.response.status = err.statusCode || err.status || 500;\n\t    \tctx.response.body = {\n\t      \t\tmessage: err.message\n\t    \t};\n\t  \t}\n\t};\n\n\tconst main = ctx => {\n\t  \tctx.throw(500);\n\t};\n\n\tapp.use(handler);\n\tapp.use(main);\n```\n\napp监听错误的处理方法\n\n```\n\tapp.on('error', (err, ctx) =>\n  \t\tconsole.error('server error', err);\n\t);\n```\n\n需要注意的是，如果错误被try...catch捕获，就不会触发error事件。这时，必须调用ctx.app.emit()，手动释放error事件，才能让监听函数生效。\n\n```\n\tconst handler = async (ctx, next) => {\n\t  \ttry {\n\t    \tawait next();\n\t  \t} catch (err) {\n\t    \tctx.response.status = err.statusCode || err.status || 500;\n\t    \tctx.response.type = 'html';\n\t    \tctx.response.body = '<p>Something wrong, please contact administrator.</p>';\n\t    \tctx.app.emit('error', err, ctx);\n\t  \t}\n\t};\n```\n\n\n参考：\n[阮一峰koa教程](http://www.ruanyifeng.com/blog/2017/08/koa.html)\n","slug":"koa1","published":1,"updated":"2018-01-17T08:10:50.321Z","comments":1,"photos":[],"link":"","_id":"cjekvj533000krmjfx2zdoyjf","content":"<p>这个系列将记载我在学习Koa过程中需要记录下来的重点和遇到的问题。<br><a href=\"https://koa.bootcss.com/\" target=\"_blank\" rel=\"noopener\">中文文档</a><br><a href=\"http://koajs.com\" target=\"_blank\" rel=\"noopener\">英文文档</a></p>\n<hr>\n<h3 id=\"安装koa\"><a href=\"#安装koa\" class=\"headerlink\" title=\"安装koa\"></a>安装koa</h3><hr>\n<p>Koa 依赖 node v7.6.0 或 ES2015及更高版本和 async 方法支持</p>\n<p>这里提供将升级本地node版本的方法</p>\n<p>先查看本机node.js版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<p>清除node.js的cache：(此步会要求输入密码)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm cache clean -f</span><br></pre></td></tr></table></figure>\n<p>安装 n 工具，这个工具是专门用来管理node.js版本的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install -g n</span><br></pre></td></tr></table></figure>\n<p>安装最新版本的node.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo n stable</span><br></pre></td></tr></table></figure>\n<p>再次查看本机的node.js版本：(本文采用的node版本为9.4.0)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<p>安装koa</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i koa</span><br></pre></td></tr></table></figure>\n<h3 id=\"架设HTTP服务\"><a href=\"#架设HTTP服务\" class=\"headerlink\" title=\"架设HTTP服务\"></a>架设HTTP服务</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n<p>这里的 app.listen(…) 方法只是以下方法的语法糖:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const http = require(&apos;http&apos;);</span><br><span class=\"line\">const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\">http.createServer(app.callback()).listen(3000);</span><br></pre></td></tr></table></figure>\n<p>这意味着您可以将同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const http = require(&apos;http&apos;);</span><br><span class=\"line\">const https = require(&apos;https&apos;);</span><br><span class=\"line\">const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\">http.createServer(app.callback()).listen(3000);</span><br><span class=\"line\">https.createServer(app.callback()).listen(3001);</span><br></pre></td></tr></table></figure>\n<h3 id=\"上下文对象-Context\"><a href=\"#上下文对象-Context\" class=\"headerlink\" title=\"上下文对象 Context\"></a>上下文对象 Context</h3><hr>\n<p>Koa 提供一个 Context 对象，表示一次对话的上下文（包括 HTTP 请求和 HTTP 回复）。通过加工这个对象，就可以控制返回给用户的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(async ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx; \t\t\t// 这是 Context</span><br><span class=\"line\">  \tctx.req; \t\t// 这是 Node Request</span><br><span class=\"line\">  \tctx.res; \t\t// 这是 Node Response  绕过 Koa 的 response 处理是 不被支持的. </span><br><span class=\"line\">  \tctx.request; \t// 这是 koa Request</span><br><span class=\"line\">  \tctx.response; \t// 这是 koa Response</span><br><span class=\"line\"></span><br><span class=\"line\">  \tctx.request.header   \t//请求标头对象。</span><br><span class=\"line\">  \tctx.request.header=   \t//设置请求标头对象。</span><br><span class=\"line\">  \tctx.request.method   \t//请求方法。</span><br><span class=\"line\">  \tctx.request.method=   \t//设置请求方法，对于实现诸如 methodOverride() 的中间件是有用的。</span><br><span class=\"line\">  \tctx.request.length   \t//返回以数字返回请求的 Content-Length，或 undefined。</span><br><span class=\"line\">  \tctx.request.url   \t\t//获取请求 URL.</span><br><span class=\"line\">  \tctx.request.url=    \t//设置请求 URL, 对 url 重写有用。</span><br><span class=\"line\">  \tctx.request.origin   \t//获取URL的来源，包括 protocol 和 host。</span><br><span class=\"line\">  \tctx.request.href    \t//获取完整的请求URL，包括 protocol，host 和 url。</span><br><span class=\"line\">  \tctx.request.path   \t    //获取请求路径名。</span><br><span class=\"line\">  \tctx.request.querystring //根据 ? 获取原始查询字符串.</span><br><span class=\"line\">  \tctx.request.search   \t//使用 ? 获取原始查询字符串。</span><br><span class=\"line\">  \tctx.request.query   \t//获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。请注意，此 getter 不 支持嵌套解析。</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Context.response.body属性就是发送给用户的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.body = &apos;Hello World&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">app.use(main);</span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.response.type = &apos;json / xml / html / text&apos;; //这些都是response的类型</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">  \tctx.response.body = fs.createReadStream(&apos;./demos/template.html&apos;);</span><br><span class=\"line\">&#125;;    //返回一个网页模板</span><br></pre></td></tr></table></figure>\n<p>ctx.cookies用来读写 Cookie</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const main = function(ctx) &#123;</span><br><span class=\"line\"> \t\tconst n = Number(ctx.cookies.get(&apos;view&apos;) || 0) + 1;</span><br><span class=\"line\"> \t\tctx.cookies.set(&apos;view&apos;, n);</span><br><span class=\"line\"> \t\tctx.response.body = n + &apos; views&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><hr>\n<p>这里使用koa自带的koa-route 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const route = require(&apos;koa-route&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const about = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">  \tctx.response.body = &apos;&lt;a href=&quot;/&quot;&gt;Index Page&lt;/a&gt;&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.body = &apos;Hello World&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(route.get(&apos;/&apos;, main));</span><br><span class=\"line\">app.use(route.get(&apos;/about&apos;, about));</span><br></pre></td></tr></table></figure>\n<p>静态资源访问则使用koa自带的koa-static模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const path = require(&apos;path&apos;);</span><br><span class=\"line\">const serve = require(&apos;koa-static&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const main = serve(path.join(__dirname));</span><br><span class=\"line\">app.use(main);</span><br></pre></td></tr></table></figure>\n<p>重定向</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const redirect = ctx =&gt; &#123;</span><br><span class=\"line\"> \t\tctx.response.redirect(&apos;/&apos;);</span><br><span class=\"line\"> \t\tctx.response.body = &apos;&lt;a href=&quot;/&quot;&gt;Index Page&lt;/a&gt;&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(route.get(&apos;/redirect&apos;, redirect));  //访问&apos;/redirect&apos;的请求会被重定向到&apos;/&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><hr>\n<p>基本上，Koa 所有的功能都是通过中间件实现的。<br>中间件的实现很简单，所谓中间件可以看做是有两个参数的函数，用来在 HTTP Request 和 HTTP Response 中间实现某种功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//一个非常简单的输出log的中间件函数</span><br><span class=\"line\">   const logger = (ctx, next) =&gt; &#123;</span><br><span class=\"line\"> \t\tconsole.log(`$&#123;Date.now()&#125; $&#123;ctx.request.method&#125; $&#123;ctx.request.url&#125;`);</span><br><span class=\"line\"> \t\tnext();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">app.use(logger);</span><br></pre></td></tr></table></figure>\n<p>如果对进程添加很多中间件的话会怎么样呢？<br>多个中间件会形成一个栈结构（middle stack），以”先进后出”（first-in-last-out）的顺序执行。</p>\n<p>也就是说，会从上至下依次进入每个中间件，但只有在最内层中间件执行完毕后才会一层层返回到最外层中间件，示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const one = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(&apos;&gt;&gt; one&apos;);</span><br><span class=\"line\">  \tnext();</span><br><span class=\"line\">  \tconsole.log(&apos;&lt;&lt; one&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const two = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(&apos;&gt;&gt; two&apos;);</span><br><span class=\"line\">  \tnext(); </span><br><span class=\"line\">  \tconsole.log(&apos;&lt;&lt; two&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const three = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(&apos;&gt;&gt; three&apos;);</span><br><span class=\"line\">  \tnext();</span><br><span class=\"line\">  \tconsole.log(&apos;&lt;&lt; three&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(one);</span><br><span class=\"line\">app.use(two);</span><br><span class=\"line\">app.use(three);</span><br></pre></td></tr></table></figure>\n<p>此时的输出应该是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; one</span><br><span class=\"line\">&gt;&gt; two</span><br><span class=\"line\">&gt;&gt; three</span><br><span class=\"line\">&lt;&lt; three</span><br><span class=\"line\">&lt;&lt; two</span><br><span class=\"line\">&lt;&lt; one</span><br></pre></td></tr></table></figure>\n<p>这是全同步中间件的执行流程，如果这些中间件中包含异步操作，那么执行的流程就会发生变化</p>\n<p>首先，包含异步操作的中间件必须写成async函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这就是一个异步中间件</span><br><span class=\"line\">const main = async function (ctx, next) &#123;</span><br><span class=\"line\">  \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">  \tctx.response.body = await fs.readFile(&apos;./demos/template.html&apos;, &apos;utf8&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(main);</span><br></pre></td></tr></table></figure>\n<p>中间件的合成则可以使用 koa-compose 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const compose = require(&apos;koa-compose&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const logger = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(`$&#123;Date.now()&#125; $&#123;ctx.request.method&#125; $&#123;ctx.request.url&#125;`);</span><br><span class=\"line\">  \tnext();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.body = &apos;Hello World&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const middlewares = compose([logger, main]);</span><br><span class=\"line\">app.use(middlewares);</span><br></pre></td></tr></table></figure>\n<p>从 POST 请求的数据体里面提取键值对使用 koa-body 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const koaBody = require(&apos;koa-body&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const main = async function(ctx) &#123;</span><br><span class=\"line\">  \tconst body = ctx.request.body;</span><br><span class=\"line\">  \tif (!body.name) ctx.throw(400, &apos;.name required&apos;);</span><br><span class=\"line\">  \tctx.body = &#123; name: body.name &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(koaBody());</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><hr>\n<p>直接抛出错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\"> \t\tctx.throw(500);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>返回错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\"> \t\tctx.response.status = 404;</span><br><span class=\"line\"> \t\tctx.response.body = &apos;Page Not Found&apos;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>为了方便处理错误，最好使用try…catch将其捕获。但是，为每个中间件都写try…catch太麻烦，我们可以让最外层的中间件，负责所有中间件的错误处理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const handler = async (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \ttry &#123;</span><br><span class=\"line\">    \tawait next();</span><br><span class=\"line\">  \t&#125;catch (err) &#123;</span><br><span class=\"line\">    \tctx.response.status = err.statusCode || err.status || 500;</span><br><span class=\"line\">    \tctx.response.body = &#123;</span><br><span class=\"line\">      \t\tmessage: err.message</span><br><span class=\"line\">    \t&#125;;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.throw(500);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(handler);</span><br><span class=\"line\">app.use(main);</span><br></pre></td></tr></table></figure>\n<p>app监听错误的处理方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.on(&apos;error&apos;, (err, ctx) =&gt;</span><br><span class=\"line\"> \t\tconsole.error(&apos;server error&apos;, err);</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，如果错误被try…catch捕获，就不会触发error事件。这时，必须调用ctx.app.emit()，手动释放error事件，才能让监听函数生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const handler = async (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \ttry &#123;</span><br><span class=\"line\">    \tawait next();</span><br><span class=\"line\">  \t&#125; catch (err) &#123;</span><br><span class=\"line\">    \tctx.response.status = err.statusCode || err.status || 500;</span><br><span class=\"line\">    \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">    \tctx.response.body = &apos;&lt;p&gt;Something wrong, please contact administrator.&lt;/p&gt;&apos;;</span><br><span class=\"line\">    \tctx.app.emit(&apos;error&apos;, err, ctx);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://www.ruanyifeng.com/blog/2017/08/koa.html\" target=\"_blank\" rel=\"noopener\">阮一峰koa教程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个系列将记载我在学习Koa过程中需要记录下来的重点和遇到的问题。<br><a href=\"https://koa.bootcss.com/\" target=\"_blank\" rel=\"noopener\">中文文档</a><br><a href=\"http://koajs.com\" target=\"_blank\" rel=\"noopener\">英文文档</a></p>\n<hr>\n<h3 id=\"安装koa\"><a href=\"#安装koa\" class=\"headerlink\" title=\"安装koa\"></a>安装koa</h3><hr>\n<p>Koa 依赖 node v7.6.0 或 ES2015及更高版本和 async 方法支持</p>\n<p>这里提供将升级本地node版本的方法</p>\n<p>先查看本机node.js版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<p>清除node.js的cache：(此步会要求输入密码)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm cache clean -f</span><br></pre></td></tr></table></figure>\n<p>安装 n 工具，这个工具是专门用来管理node.js版本的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install -g n</span><br></pre></td></tr></table></figure>\n<p>安装最新版本的node.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo n stable</span><br></pre></td></tr></table></figure>\n<p>再次查看本机的node.js版本：(本文采用的node版本为9.4.0)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<p>安装koa</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i koa</span><br></pre></td></tr></table></figure>\n<h3 id=\"架设HTTP服务\"><a href=\"#架设HTTP服务\" class=\"headerlink\" title=\"架设HTTP服务\"></a>架设HTTP服务</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n<p>这里的 app.listen(…) 方法只是以下方法的语法糖:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const http = require(&apos;http&apos;);</span><br><span class=\"line\">const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\">http.createServer(app.callback()).listen(3000);</span><br></pre></td></tr></table></figure>\n<p>这意味着您可以将同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const http = require(&apos;http&apos;);</span><br><span class=\"line\">const https = require(&apos;https&apos;);</span><br><span class=\"line\">const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\">http.createServer(app.callback()).listen(3000);</span><br><span class=\"line\">https.createServer(app.callback()).listen(3001);</span><br></pre></td></tr></table></figure>\n<h3 id=\"上下文对象-Context\"><a href=\"#上下文对象-Context\" class=\"headerlink\" title=\"上下文对象 Context\"></a>上下文对象 Context</h3><hr>\n<p>Koa 提供一个 Context 对象，表示一次对话的上下文（包括 HTTP 请求和 HTTP 回复）。通过加工这个对象，就可以控制返回给用户的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(async ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx; \t\t\t// 这是 Context</span><br><span class=\"line\">  \tctx.req; \t\t// 这是 Node Request</span><br><span class=\"line\">  \tctx.res; \t\t// 这是 Node Response  绕过 Koa 的 response 处理是 不被支持的. </span><br><span class=\"line\">  \tctx.request; \t// 这是 koa Request</span><br><span class=\"line\">  \tctx.response; \t// 这是 koa Response</span><br><span class=\"line\"></span><br><span class=\"line\">  \tctx.request.header   \t//请求标头对象。</span><br><span class=\"line\">  \tctx.request.header=   \t//设置请求标头对象。</span><br><span class=\"line\">  \tctx.request.method   \t//请求方法。</span><br><span class=\"line\">  \tctx.request.method=   \t//设置请求方法，对于实现诸如 methodOverride() 的中间件是有用的。</span><br><span class=\"line\">  \tctx.request.length   \t//返回以数字返回请求的 Content-Length，或 undefined。</span><br><span class=\"line\">  \tctx.request.url   \t\t//获取请求 URL.</span><br><span class=\"line\">  \tctx.request.url=    \t//设置请求 URL, 对 url 重写有用。</span><br><span class=\"line\">  \tctx.request.origin   \t//获取URL的来源，包括 protocol 和 host。</span><br><span class=\"line\">  \tctx.request.href    \t//获取完整的请求URL，包括 protocol，host 和 url。</span><br><span class=\"line\">  \tctx.request.path   \t    //获取请求路径名。</span><br><span class=\"line\">  \tctx.request.querystring //根据 ? 获取原始查询字符串.</span><br><span class=\"line\">  \tctx.request.search   \t//使用 ? 获取原始查询字符串。</span><br><span class=\"line\">  \tctx.request.query   \t//获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。请注意，此 getter 不 支持嵌套解析。</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Context.response.body属性就是发送给用户的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const Koa = require(&apos;koa&apos;);</span><br><span class=\"line\">const app = new Koa();</span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.body = &apos;Hello World&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">app.use(main);</span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.response.type = &apos;json / xml / html / text&apos;; //这些都是response的类型</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">  \tctx.response.body = fs.createReadStream(&apos;./demos/template.html&apos;);</span><br><span class=\"line\">&#125;;    //返回一个网页模板</span><br></pre></td></tr></table></figure>\n<p>ctx.cookies用来读写 Cookie</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const main = function(ctx) &#123;</span><br><span class=\"line\"> \t\tconst n = Number(ctx.cookies.get(&apos;view&apos;) || 0) + 1;</span><br><span class=\"line\"> \t\tctx.cookies.set(&apos;view&apos;, n);</span><br><span class=\"line\"> \t\tctx.response.body = n + &apos; views&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><hr>\n<p>这里使用koa自带的koa-route 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const route = require(&apos;koa-route&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const about = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">  \tctx.response.body = &apos;&lt;a href=&quot;/&quot;&gt;Index Page&lt;/a&gt;&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.body = &apos;Hello World&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(route.get(&apos;/&apos;, main));</span><br><span class=\"line\">app.use(route.get(&apos;/about&apos;, about));</span><br></pre></td></tr></table></figure>\n<p>静态资源访问则使用koa自带的koa-static模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const path = require(&apos;path&apos;);</span><br><span class=\"line\">const serve = require(&apos;koa-static&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const main = serve(path.join(__dirname));</span><br><span class=\"line\">app.use(main);</span><br></pre></td></tr></table></figure>\n<p>重定向</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   const redirect = ctx =&gt; &#123;</span><br><span class=\"line\"> \t\tctx.response.redirect(&apos;/&apos;);</span><br><span class=\"line\"> \t\tctx.response.body = &apos;&lt;a href=&quot;/&quot;&gt;Index Page&lt;/a&gt;&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(route.get(&apos;/redirect&apos;, redirect));  //访问&apos;/redirect&apos;的请求会被重定向到&apos;/&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><hr>\n<p>基本上，Koa 所有的功能都是通过中间件实现的。<br>中间件的实现很简单，所谓中间件可以看做是有两个参数的函数，用来在 HTTP Request 和 HTTP Response 中间实现某种功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//一个非常简单的输出log的中间件函数</span><br><span class=\"line\">   const logger = (ctx, next) =&gt; &#123;</span><br><span class=\"line\"> \t\tconsole.log(`$&#123;Date.now()&#125; $&#123;ctx.request.method&#125; $&#123;ctx.request.url&#125;`);</span><br><span class=\"line\"> \t\tnext();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">app.use(logger);</span><br></pre></td></tr></table></figure>\n<p>如果对进程添加很多中间件的话会怎么样呢？<br>多个中间件会形成一个栈结构（middle stack），以”先进后出”（first-in-last-out）的顺序执行。</p>\n<p>也就是说，会从上至下依次进入每个中间件，但只有在最内层中间件执行完毕后才会一层层返回到最外层中间件，示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const one = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(&apos;&gt;&gt; one&apos;);</span><br><span class=\"line\">  \tnext();</span><br><span class=\"line\">  \tconsole.log(&apos;&lt;&lt; one&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const two = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(&apos;&gt;&gt; two&apos;);</span><br><span class=\"line\">  \tnext(); </span><br><span class=\"line\">  \tconsole.log(&apos;&lt;&lt; two&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const three = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(&apos;&gt;&gt; three&apos;);</span><br><span class=\"line\">  \tnext();</span><br><span class=\"line\">  \tconsole.log(&apos;&lt;&lt; three&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(one);</span><br><span class=\"line\">app.use(two);</span><br><span class=\"line\">app.use(three);</span><br></pre></td></tr></table></figure>\n<p>此时的输出应该是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; one</span><br><span class=\"line\">&gt;&gt; two</span><br><span class=\"line\">&gt;&gt; three</span><br><span class=\"line\">&lt;&lt; three</span><br><span class=\"line\">&lt;&lt; two</span><br><span class=\"line\">&lt;&lt; one</span><br></pre></td></tr></table></figure>\n<p>这是全同步中间件的执行流程，如果这些中间件中包含异步操作，那么执行的流程就会发生变化</p>\n<p>首先，包含异步操作的中间件必须写成async函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这就是一个异步中间件</span><br><span class=\"line\">const main = async function (ctx, next) &#123;</span><br><span class=\"line\">  \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">  \tctx.response.body = await fs.readFile(&apos;./demos/template.html&apos;, &apos;utf8&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(main);</span><br></pre></td></tr></table></figure>\n<p>中间件的合成则可以使用 koa-compose 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const compose = require(&apos;koa-compose&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const logger = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \tconsole.log(`$&#123;Date.now()&#125; $&#123;ctx.request.method&#125; $&#123;ctx.request.url&#125;`);</span><br><span class=\"line\">  \tnext();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.response.body = &apos;Hello World&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const middlewares = compose([logger, main]);</span><br><span class=\"line\">app.use(middlewares);</span><br></pre></td></tr></table></figure>\n<p>从 POST 请求的数据体里面提取键值对使用 koa-body 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const koaBody = require(&apos;koa-body&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const main = async function(ctx) &#123;</span><br><span class=\"line\">  \tconst body = ctx.request.body;</span><br><span class=\"line\">  \tif (!body.name) ctx.throw(400, &apos;.name required&apos;);</span><br><span class=\"line\">  \tctx.body = &#123; name: body.name &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(koaBody());</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><hr>\n<p>直接抛出错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\"> \t\tctx.throw(500);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>返回错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\"> \t\tctx.response.status = 404;</span><br><span class=\"line\"> \t\tctx.response.body = &apos;Page Not Found&apos;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>为了方便处理错误，最好使用try…catch将其捕获。但是，为每个中间件都写try…catch太麻烦，我们可以让最外层的中间件，负责所有中间件的错误处理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const handler = async (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \ttry &#123;</span><br><span class=\"line\">    \tawait next();</span><br><span class=\"line\">  \t&#125;catch (err) &#123;</span><br><span class=\"line\">    \tctx.response.status = err.statusCode || err.status || 500;</span><br><span class=\"line\">    \tctx.response.body = &#123;</span><br><span class=\"line\">      \t\tmessage: err.message</span><br><span class=\"line\">    \t&#125;;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const main = ctx =&gt; &#123;</span><br><span class=\"line\">  \tctx.throw(500);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(handler);</span><br><span class=\"line\">app.use(main);</span><br></pre></td></tr></table></figure>\n<p>app监听错误的处理方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.on(&apos;error&apos;, (err, ctx) =&gt;</span><br><span class=\"line\"> \t\tconsole.error(&apos;server error&apos;, err);</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，如果错误被try…catch捕获，就不会触发error事件。这时，必须调用ctx.app.emit()，手动释放error事件，才能让监听函数生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const handler = async (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  \ttry &#123;</span><br><span class=\"line\">    \tawait next();</span><br><span class=\"line\">  \t&#125; catch (err) &#123;</span><br><span class=\"line\">    \tctx.response.status = err.statusCode || err.status || 500;</span><br><span class=\"line\">    \tctx.response.type = &apos;html&apos;;</span><br><span class=\"line\">    \tctx.response.body = &apos;&lt;p&gt;Something wrong, please contact administrator.&lt;/p&gt;&apos;;</span><br><span class=\"line\">    \tctx.app.emit(&apos;error&apos;, err, ctx);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://www.ruanyifeng.com/blog/2017/08/koa.html\" target=\"_blank\" rel=\"noopener\">阮一峰koa教程</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjekvj52j0001rmjfcji0zvqu","tag_id":"cjekvj52o0003rmjfcfr0slpx","_id":"cjekvj52v0008rmjf0ty9ozyi"},{"post_id":"cjekvj52m0002rmjfqq5xhse5","tag_id":"cjekvj52o0003rmjfcfr0slpx","_id":"cjekvj52y000crmjf1991ymld"},{"post_id":"cjekvj52q0004rmjf6dbeqnct","tag_id":"cjekvj52o0003rmjfcfr0slpx","_id":"cjekvj531000grmjf4tm3m8fu"},{"post_id":"cjekvj52r0005rmjfdw1b4d9n","tag_id":"cjekvj531000frmjfguowg0bg","_id":"cjekvj534000lrmjf8r39bd2f"},{"post_id":"cjekvj52s0006rmjf1z7km3ui","tag_id":"cjekvj533000jrmjfqu3uwx2u","_id":"cjekvj535000nrmjf649jjy74"},{"post_id":"cjekvj52v0009rmjfd5bnpa0t","tag_id":"cjekvj535000mrmjf0frfbg2i","_id":"cjekvj535000qrmjfsk9q3d7x"},{"post_id":"cjekvj52v0009rmjfd5bnpa0t","tag_id":"cjekvj535000ormjfu06wb1wh","_id":"cjekvj536000rrmjfc40ryy5s"},{"post_id":"cjekvj52w000armjfam98l9y6","tag_id":"cjekvj533000jrmjfqu3uwx2u","_id":"cjekvj536000trmjftyp0yrx0"},{"post_id":"cjekvj52y000drmjfzrrkr49z","tag_id":"cjekvj533000jrmjfqu3uwx2u","_id":"cjekvj537000vrmjfthrz2vyp"},{"post_id":"cjekvj52z000ermjf18i4r22s","tag_id":"cjekvj533000jrmjfqu3uwx2u","_id":"cjekvj537000xrmjf9hc1sbbk"},{"post_id":"cjekvj531000hrmjfkm6nrpb1","tag_id":"cjekvj533000jrmjfqu3uwx2u","_id":"cjekvj538000zrmjfhfu8s4xm"},{"post_id":"cjekvj532000irmjfix4m78yt","tag_id":"cjekvj538000yrmjf5gbpy5yy","_id":"cjekvj5380011rmjfhoc7sjk7"},{"post_id":"cjekvj533000krmjfx2zdoyjf","tag_id":"cjekvj535000mrmjf0frfbg2i","_id":"cjekvj5390013rmjflvwnt0nl"},{"post_id":"cjekvj533000krmjfx2zdoyjf","tag_id":"cjekvj5390012rmjfid20n440","_id":"cjekvj5390014rmjfq55be7hv"}],"Tag":[{"name":"LeetCode","_id":"cjekvj52o0003rmjfcfr0slpx"},{"name":"Nginx","_id":"cjekvj531000frmjfguowg0bg"},{"name":"San","_id":"cjekvj533000jrmjfqu3uwx2u"},{"name":"Node.js","_id":"cjekvj535000mrmjf0frfbg2i"},{"name":"MongoDB","_id":"cjekvj535000ormjfu06wb1wh"},{"name":"VPS","_id":"cjekvj538000yrmjf5gbpy5yy"},{"name":"Koa","_id":"cjekvj5390012rmjfid20n440"}]}}